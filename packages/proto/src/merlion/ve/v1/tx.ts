// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/ve/v1/tx.proto" (package "merlion.ve.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * @generated from protobuf message merlion.ve.v1.MsgCreate
 */
export interface MsgCreate {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string to = 2;
     */
    to: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin amount = 3;
     */
    amount?: Coin;
    /**
     * @generated from protobuf field: uint64 lock_duration = 4;
     */
    lockDuration: string;
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgCreateResponse
 */
export interface MsgCreateResponse {
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgDeposit
 */
export interface MsgDeposit {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string ve_id = 2;
     */
    veId: string;
    /**
     * Amount to deposit, must be greater than 0
     *
     * @generated from protobuf field: cosmos.base.v1beta1.Coin amount = 3;
     */
    amount?: Coin;
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgDepositResponse
 */
export interface MsgDepositResponse {
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgExtendTime
 */
export interface MsgExtendTime {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string ve_id = 2;
     */
    veId: string;
    /**
     * Locking duration, must be greater than current locking duration
     *
     * @generated from protobuf field: uint64 lock_duration = 3;
     */
    lockDuration: string;
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgExtendTimeResponse
 */
export interface MsgExtendTimeResponse {
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgMerge
 */
export interface MsgMerge {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string from_ve_id = 2;
     */
    fromVeId: string;
    /**
     * @generated from protobuf field: string to_ve_id = 3;
     */
    toVeId: string;
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgMergeResponse
 */
export interface MsgMergeResponse {
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgWithdraw
 */
export interface MsgWithdraw {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string ve_id = 2;
     */
    veId: string;
}
/**
 * @generated from protobuf message merlion.ve.v1.MsgWithdrawResponse
 */
export interface MsgWithdrawResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreate$Type extends MessageType<MsgCreate> {
    constructor() {
        super("merlion.ve.v1.MsgCreate", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "to", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"to\"" } },
            { no: 3, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"amount\"" } },
            { no: 4, name: "lock_duration", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"lock_duration\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgCreate>): MsgCreate {
        const message = { sender: "", to: "", lockDuration: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreate): MsgCreate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string to */ 2:
                    message.to = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* uint64 lock_duration */ 4:
                    message.lockDuration = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string to = 2; */
        if (message.to !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.to);
        /* cosmos.base.v1beta1.Coin amount = 3; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 lock_duration = 4; */
        if (message.lockDuration !== "0")
            writer.tag(4, WireType.Varint).uint64(message.lockDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgCreate
 */
export const MsgCreate = new MsgCreate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateResponse$Type extends MessageType<MsgCreateResponse> {
    constructor() {
        super("merlion.ve.v1.MsgCreateResponse", []);
    }
    create(value?: PartialMessage<MsgCreateResponse>): MsgCreateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateResponse): MsgCreateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgCreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgCreateResponse
 */
export const MsgCreateResponse = new MsgCreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeposit$Type extends MessageType<MsgDeposit> {
    constructor() {
        super("merlion.ve.v1.MsgDeposit", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"ve_id\"" } },
            { no: 3, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"amount\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgDeposit>): MsgDeposit {
        const message = { sender: "", veId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeposit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeposit): MsgDeposit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string ve_id */ 2:
                    message.veId = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeposit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string ve_id = 2; */
        if (message.veId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.veId);
        /* cosmos.base.v1beta1.Coin amount = 3; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgDeposit
 */
export const MsgDeposit = new MsgDeposit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDepositResponse$Type extends MessageType<MsgDepositResponse> {
    constructor() {
        super("merlion.ve.v1.MsgDepositResponse", []);
    }
    create(value?: PartialMessage<MsgDepositResponse>): MsgDepositResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDepositResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDepositResponse): MsgDepositResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgDepositResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgDepositResponse
 */
export const MsgDepositResponse = new MsgDepositResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgExtendTime$Type extends MessageType<MsgExtendTime> {
    constructor() {
        super("merlion.ve.v1.MsgExtendTime", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"ve_id\"" } },
            { no: 3, name: "lock_duration", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"lock_duration\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgExtendTime>): MsgExtendTime {
        const message = { sender: "", veId: "", lockDuration: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgExtendTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgExtendTime): MsgExtendTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string ve_id */ 2:
                    message.veId = reader.string();
                    break;
                case /* uint64 lock_duration */ 3:
                    message.lockDuration = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgExtendTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string ve_id = 2; */
        if (message.veId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.veId);
        /* uint64 lock_duration = 3; */
        if (message.lockDuration !== "0")
            writer.tag(3, WireType.Varint).uint64(message.lockDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgExtendTime
 */
export const MsgExtendTime = new MsgExtendTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgExtendTimeResponse$Type extends MessageType<MsgExtendTimeResponse> {
    constructor() {
        super("merlion.ve.v1.MsgExtendTimeResponse", []);
    }
    create(value?: PartialMessage<MsgExtendTimeResponse>): MsgExtendTimeResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgExtendTimeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgExtendTimeResponse): MsgExtendTimeResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgExtendTimeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgExtendTimeResponse
 */
export const MsgExtendTimeResponse = new MsgExtendTimeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgMerge$Type extends MessageType<MsgMerge> {
    constructor() {
        super("merlion.ve.v1.MsgMerge", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "from_ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"from_ve_id\"" } },
            { no: 3, name: "to_ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"to_ve_id\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgMerge>): MsgMerge {
        const message = { sender: "", fromVeId: "", toVeId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgMerge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgMerge): MsgMerge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string from_ve_id */ 2:
                    message.fromVeId = reader.string();
                    break;
                case /* string to_ve_id */ 3:
                    message.toVeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgMerge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string from_ve_id = 2; */
        if (message.fromVeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromVeId);
        /* string to_ve_id = 3; */
        if (message.toVeId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toVeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgMerge
 */
export const MsgMerge = new MsgMerge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgMergeResponse$Type extends MessageType<MsgMergeResponse> {
    constructor() {
        super("merlion.ve.v1.MsgMergeResponse", []);
    }
    create(value?: PartialMessage<MsgMergeResponse>): MsgMergeResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgMergeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgMergeResponse): MsgMergeResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgMergeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgMergeResponse
 */
export const MsgMergeResponse = new MsgMergeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgWithdraw$Type extends MessageType<MsgWithdraw> {
    constructor() {
        super("merlion.ve.v1.MsgWithdraw", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"ve_id\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgWithdraw>): MsgWithdraw {
        const message = { sender: "", veId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgWithdraw>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgWithdraw): MsgWithdraw {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string ve_id */ 2:
                    message.veId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgWithdraw, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string ve_id = 2; */
        if (message.veId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.veId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgWithdraw
 */
export const MsgWithdraw = new MsgWithdraw$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgWithdrawResponse$Type extends MessageType<MsgWithdrawResponse> {
    constructor() {
        super("merlion.ve.v1.MsgWithdrawResponse", []);
    }
    create(value?: PartialMessage<MsgWithdrawResponse>): MsgWithdrawResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgWithdrawResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgWithdrawResponse): MsgWithdrawResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgWithdrawResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.MsgWithdrawResponse
 */
export const MsgWithdrawResponse = new MsgWithdrawResponse$Type();
/**
 * @generated ServiceType for protobuf service merlion.ve.v1.Msg
 */
export const Msg = new ServiceType("merlion.ve.v1.Msg", [
    { name: "Create", options: { "google.api.http": { get: "/merlion/ve/v1/tx/create" } }, I: MsgCreate, O: MsgCreateResponse },
    { name: "Deposit", options: { "google.api.http": { get: "/merlion/ve/v1/tx/deposit" } }, I: MsgDeposit, O: MsgDepositResponse },
    { name: "ExtendTime", options: { "google.api.http": { get: "/merlion/ve/v1/tx/extend_time" } }, I: MsgExtendTime, O: MsgExtendTimeResponse },
    { name: "Merge", options: { "google.api.http": { get: "/merlion/ve/v1/tx/merge" } }, I: MsgMerge, O: MsgMergeResponse },
    { name: "Withdraw", options: { "google.api.http": { get: "/merlion/ve/v1/tx/withdraw" } }, I: MsgWithdraw, O: MsgWithdrawResponse }
]);
