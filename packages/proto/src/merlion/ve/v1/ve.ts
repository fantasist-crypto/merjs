// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/ve/v1/ve.proto" (package "merlion.ve.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * LockedBalance represents locked amount and unlock time of a ve.
 *
 * @generated from protobuf message merlion.ve.v1.LockedBalance
 */
export interface LockedBalance {
    /**
     * locked amount
     *
     * @generated from protobuf field: string amount = 1;
     */
    amount: string;
    /**
     * unlocking unix time
     *
     * @generated from protobuf field: uint64 end = 2;
     */
    end: string;
}
/**
 * Checkpoint defines a checkpoint of voting power.
 *
 * @generated from protobuf message merlion.ve.v1.Checkpoint
 */
export interface Checkpoint {
    /**
     * voting power at checkpoint
     *
     * @generated from protobuf field: string bias = 1;
     */
    bias: string;
    /**
     * weight decay slope
     * so voting power at time t: bias - slope * (t - timestamp)
     *
     * @generated from protobuf field: string slope = 2;
     */
    slope: string;
    /**
     * unix timestamp at checkpoint
     *
     * @generated from protobuf field: uint64 timestamp = 3;
     */
    timestamp: string;
    /**
     * block height at checkpoint
     *
     * @generated from protobuf field: int64 block = 4;
     */
    block: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class LockedBalance$Type extends MessageType<LockedBalance> {
    constructor() {
        super("merlion.ve.v1.LockedBalance", [
            { no: 1, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 2, name: "end", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<LockedBalance>): LockedBalance {
        const message = { amount: "", end: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LockedBalance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockedBalance): LockedBalance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string amount */ 1:
                    message.amount = reader.string();
                    break;
                case /* uint64 end */ 2:
                    message.end = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LockedBalance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string amount = 1; */
        if (message.amount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.amount);
        /* uint64 end = 2; */
        if (message.end !== "0")
            writer.tag(2, WireType.Varint).uint64(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.LockedBalance
 */
export const LockedBalance = new LockedBalance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Checkpoint$Type extends MessageType<Checkpoint> {
    constructor() {
        super("merlion.ve.v1.Checkpoint", [
            { no: 1, name: "bias", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 2, name: "slope", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 3, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "block", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<Checkpoint>): Checkpoint {
        const message = { bias: "", slope: "", timestamp: "0", block: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Checkpoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Checkpoint): Checkpoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bias */ 1:
                    message.bias = reader.string();
                    break;
                case /* string slope */ 2:
                    message.slope = reader.string();
                    break;
                case /* uint64 timestamp */ 3:
                    message.timestamp = reader.uint64().toString();
                    break;
                case /* int64 block */ 4:
                    message.block = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Checkpoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bias = 1; */
        if (message.bias !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bias);
        /* string slope = 2; */
        if (message.slope !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.slope);
        /* uint64 timestamp = 3; */
        if (message.timestamp !== "0")
            writer.tag(3, WireType.Varint).uint64(message.timestamp);
        /* int64 block = 4; */
        if (message.block !== "0")
            writer.tag(4, WireType.Varint).int64(message.block);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.Checkpoint
 */
export const Checkpoint = new Checkpoint$Type();
