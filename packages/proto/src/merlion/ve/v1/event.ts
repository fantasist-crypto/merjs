// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/ve/v1/event.proto" (package "merlion.ve.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * @generated from protobuf message merlion.ve.v1.EventCreate
 */
export interface EventCreate {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string receiver = 2;
     */
    receiver: string;
    /**
     * @generated from protobuf field: string ve_id = 3;
     */
    veId: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin amount = 4;
     */
    amount?: Coin;
    /**
     * @generated from protobuf field: uint64 unlock_time = 5;
     */
    unlockTime: string;
}
/**
 * @generated from protobuf message merlion.ve.v1.EventDeposit
 */
export interface EventDeposit {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string ve_id = 2;
     */
    veId: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin amount = 3;
     */
    amount?: Coin;
}
/**
 * @generated from protobuf message merlion.ve.v1.EventExtendTime
 */
export interface EventExtendTime {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string ve_id = 2;
     */
    veId: string;
    /**
     * @generated from protobuf field: uint64 unlock_time = 3;
     */
    unlockTime: string;
}
/**
 * @generated from protobuf message merlion.ve.v1.EventMerge
 */
export interface EventMerge {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string from_ve_id = 2;
     */
    fromVeId: string;
    /**
     * @generated from protobuf field: string to_ve_id = 3;
     */
    toVeId: string;
}
/**
 * @generated from protobuf message merlion.ve.v1.EventWithdraw
 */
export interface EventWithdraw {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string ve_id = 2;
     */
    veId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class EventCreate$Type extends MessageType<EventCreate> {
    constructor() {
        super("merlion.ve.v1.EventCreate", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "receiver", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 5, name: "unlock_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<EventCreate>): EventCreate {
        const message = { sender: "", receiver: "", veId: "", unlockTime: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventCreate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventCreate): EventCreate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string receiver */ 2:
                    message.receiver = reader.string();
                    break;
                case /* string ve_id */ 3:
                    message.veId = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin amount */ 4:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* uint64 unlock_time */ 5:
                    message.unlockTime = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventCreate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string receiver = 2; */
        if (message.receiver !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.receiver);
        /* string ve_id = 3; */
        if (message.veId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.veId);
        /* cosmos.base.v1beta1.Coin amount = 4; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 unlock_time = 5; */
        if (message.unlockTime !== "0")
            writer.tag(5, WireType.Varint).uint64(message.unlockTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.EventCreate
 */
export const EventCreate = new EventCreate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventDeposit$Type extends MessageType<EventDeposit> {
    constructor() {
        super("merlion.ve.v1.EventDeposit", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<EventDeposit>): EventDeposit {
        const message = { sender: "", veId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventDeposit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventDeposit): EventDeposit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string ve_id */ 2:
                    message.veId = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventDeposit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string ve_id = 2; */
        if (message.veId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.veId);
        /* cosmos.base.v1beta1.Coin amount = 3; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.EventDeposit
 */
export const EventDeposit = new EventDeposit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventExtendTime$Type extends MessageType<EventExtendTime> {
    constructor() {
        super("merlion.ve.v1.EventExtendTime", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "unlock_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<EventExtendTime>): EventExtendTime {
        const message = { sender: "", veId: "", unlockTime: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventExtendTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventExtendTime): EventExtendTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string ve_id */ 2:
                    message.veId = reader.string();
                    break;
                case /* uint64 unlock_time */ 3:
                    message.unlockTime = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventExtendTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string ve_id = 2; */
        if (message.veId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.veId);
        /* uint64 unlock_time = 3; */
        if (message.unlockTime !== "0")
            writer.tag(3, WireType.Varint).uint64(message.unlockTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.EventExtendTime
 */
export const EventExtendTime = new EventExtendTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventMerge$Type extends MessageType<EventMerge> {
    constructor() {
        super("merlion.ve.v1.EventMerge", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from_ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "to_ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventMerge>): EventMerge {
        const message = { sender: "", fromVeId: "", toVeId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventMerge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventMerge): EventMerge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string from_ve_id */ 2:
                    message.fromVeId = reader.string();
                    break;
                case /* string to_ve_id */ 3:
                    message.toVeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventMerge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string from_ve_id = 2; */
        if (message.fromVeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromVeId);
        /* string to_ve_id = 3; */
        if (message.toVeId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.toVeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.EventMerge
 */
export const EventMerge = new EventMerge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventWithdraw$Type extends MessageType<EventWithdraw> {
    constructor() {
        super("merlion.ve.v1.EventWithdraw", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ve_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventWithdraw>): EventWithdraw {
        const message = { sender: "", veId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventWithdraw>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventWithdraw): EventWithdraw {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string ve_id */ 2:
                    message.veId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventWithdraw, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string ve_id = 2; */
        if (message.veId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.veId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.ve.v1.EventWithdraw
 */
export const EventWithdraw = new EventWithdraw$Type();
