// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/gauge/v1/gauge.proto" (package "merlion.gauge.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message merlion.gauge.v1.Checkpoint
 */
export interface Checkpoint {
    /**
     * unix timestamp
     *
     * @generated from protobuf field: uint64 timestamp = 1;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string amount = 2;
     */
    amount: string;
}
/**
 * @generated from protobuf message merlion.gauge.v1.Reward
 */
export interface Reward {
    /**
     * reward coin denom
     *
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
    /**
     * reward amount per second
     *
     * @generated from protobuf field: string rate = 2;
     */
    rate: string;
    /**
     * reward finish unix time
     *
     * @generated from protobuf field: uint64 finish_time = 3;
     */
    finishTime: string;
    /**
     * unix time of last reward update
     *
     * @generated from protobuf field: uint64 last_update_time = 4;
     */
    lastUpdateTime: string;
    /**
     * cumulative reward per voting ticket
     *
     * @generated from protobuf field: string cumulative_per_ticket = 5;
     */
    cumulativePerTicket: string;
    /**
     * accrued reward amount which has not been used for distributing rateably
     *
     * @generated from protobuf field: string accrued_amount = 6;
     */
    accruedAmount: string;
}
/**
 * @generated from protobuf message merlion.gauge.v1.UserReward
 */
export interface UserReward {
    /**
     * reward coin denom
     *
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
    /**
     * ve id
     *
     * @generated from protobuf field: uint64 ve_id = 2;
     */
    veId: string;
    /**
     * last claim unix time
     *
     * @generated from protobuf field: uint64 last_claim_time = 3;
     */
    lastClaimTime: string;
    /**
     * cumulative reward per voting ticket
     *
     * @generated from protobuf field: string cumulative_per_ticket = 4;
     */
    cumulativePerTicket: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Checkpoint$Type extends MessageType<Checkpoint> {
    constructor() {
        super("merlion.gauge.v1.Checkpoint", [
            { no: 1, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value?: PartialMessage<Checkpoint>): Checkpoint {
        const message = { timestamp: "0", amount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Checkpoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Checkpoint): Checkpoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 timestamp */ 1:
                    message.timestamp = reader.uint64().toString();
                    break;
                case /* string amount */ 2:
                    message.amount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Checkpoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 timestamp = 1; */
        if (message.timestamp !== "0")
            writer.tag(1, WireType.Varint).uint64(message.timestamp);
        /* string amount = 2; */
        if (message.amount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.gauge.v1.Checkpoint
 */
export const Checkpoint = new Checkpoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reward$Type extends MessageType<Reward> {
    constructor() {
        super("merlion.gauge.v1.Reward", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 3, name: "finish_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "last_update_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "cumulative_per_ticket", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 6, name: "accrued_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value?: PartialMessage<Reward>): Reward {
        const message = { denom: "", rate: "", finishTime: "0", lastUpdateTime: "0", cumulativePerTicket: "", accruedAmount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Reward>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reward): Reward {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                case /* string rate */ 2:
                    message.rate = reader.string();
                    break;
                case /* uint64 finish_time */ 3:
                    message.finishTime = reader.uint64().toString();
                    break;
                case /* uint64 last_update_time */ 4:
                    message.lastUpdateTime = reader.uint64().toString();
                    break;
                case /* string cumulative_per_ticket */ 5:
                    message.cumulativePerTicket = reader.string();
                    break;
                case /* string accrued_amount */ 6:
                    message.accruedAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reward, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        /* string rate = 2; */
        if (message.rate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rate);
        /* uint64 finish_time = 3; */
        if (message.finishTime !== "0")
            writer.tag(3, WireType.Varint).uint64(message.finishTime);
        /* uint64 last_update_time = 4; */
        if (message.lastUpdateTime !== "0")
            writer.tag(4, WireType.Varint).uint64(message.lastUpdateTime);
        /* string cumulative_per_ticket = 5; */
        if (message.cumulativePerTicket !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cumulativePerTicket);
        /* string accrued_amount = 6; */
        if (message.accruedAmount !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.accruedAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.gauge.v1.Reward
 */
export const Reward = new Reward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserReward$Type extends MessageType<UserReward> {
    constructor() {
        super("merlion.gauge.v1.UserReward", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ve_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "last_claim_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "cumulative_per_ticket", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value?: PartialMessage<UserReward>): UserReward {
        const message = { denom: "", veId: "0", lastClaimTime: "0", cumulativePerTicket: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserReward>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserReward): UserReward {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                case /* uint64 ve_id */ 2:
                    message.veId = reader.uint64().toString();
                    break;
                case /* uint64 last_claim_time */ 3:
                    message.lastClaimTime = reader.uint64().toString();
                    break;
                case /* string cumulative_per_ticket */ 4:
                    message.cumulativePerTicket = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserReward, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        /* uint64 ve_id = 2; */
        if (message.veId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.veId);
        /* uint64 last_claim_time = 3; */
        if (message.lastClaimTime !== "0")
            writer.tag(3, WireType.Varint).uint64(message.lastClaimTime);
        /* string cumulative_per_ticket = 4; */
        if (message.cumulativePerTicket !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.cumulativePerTicket);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.gauge.v1.UserReward
 */
export const UserReward = new UserReward$Type();
