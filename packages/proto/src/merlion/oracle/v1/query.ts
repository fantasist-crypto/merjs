// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/oracle/v1/query.proto" (package "merlion.oracle.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./oracle";
import { AggregateExchangeRateVote } from "./oracle";
import { AggregateExchangeRatePrevote } from "./oracle";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin";
/**
 * QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC
 * method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryExchangeRateRequest
 */
export interface QueryExchangeRateRequest {
    /**
     * denom defines the denomination to query for.
     *
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
}
/**
 * QueryExchangeRateResponse is response type for the
 * Query/ExchangeRate RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryExchangeRateResponse
 */
export interface QueryExchangeRateResponse {
    /**
     * exchange_rate defines the exchange rate of the denom asset denominated in
     * uUSD.
     *
     * @generated from protobuf field: string exchange_rate = 1;
     */
    exchangeRate: string;
}
/**
 * QueryExchangeRatesRequest is the request type for the Query/ExchangeRates RPC
 * method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryExchangeRatesRequest
 */
export interface QueryExchangeRatesRequest {
}
/**
 * QueryExchangeRatesResponse is response type for the
 * Query/ExchangeRates RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryExchangeRatesResponse
 */
export interface QueryExchangeRatesResponse {
    /**
     * exchange_rates defines a list of the exchange rate for all whitelisted
     * denoms.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.DecCoin exchange_rates = 1;
     */
    exchangeRates: DecCoin[];
}
/**
 * QueryActivesRequest is the request type for the Query/Actives RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryActivesRequest
 */
export interface QueryActivesRequest {
}
/**
 * QueryActivesResponse is response type for the
 * Query/Actives RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryActivesResponse
 */
export interface QueryActivesResponse {
    /**
     * actives defines a list of the denomination which oracle prices aggreed
     * upon.
     *
     * @generated from protobuf field: repeated string actives = 1;
     */
    actives: string[];
}
/**
 * QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC
 * method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryVoteTargetsRequest
 */
export interface QueryVoteTargetsRequest {
}
/**
 * QueryVoteTargetsResponse is response type for the
 * Query/VoteTargets RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryVoteTargetsResponse
 */
export interface QueryVoteTargetsResponse {
    /**
     * vote_targets defines a list of the denomination in which everyone
     * should vote in the current vote period.
     *
     * @generated from protobuf field: repeated string vote_targets = 1;
     */
    voteTargets: string[];
}
/**
 * QueryFeederDelegationRequest is the request type for the
 * Query/FeederDelegation RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryFeederDelegationRequest
 */
export interface QueryFeederDelegationRequest {
    /**
     * validator defines the validator address to query for.
     *
     * @generated from protobuf field: string validator_addr = 1;
     */
    validatorAddr: string;
}
/**
 * QueryFeederDelegationResponse is response type for the
 * Query/FeederDelegation RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryFeederDelegationResponse
 */
export interface QueryFeederDelegationResponse {
    /**
     * feeder_addr defines the feeder delegation of a validator.
     *
     * @generated from protobuf field: string feeder_addr = 1;
     */
    feederAddr: string;
}
/**
 * QueryMissCounterRequest is the request type for the Query/MissCounter RPC
 * method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryMissCounterRequest
 */
export interface QueryMissCounterRequest {
    /**
     * validator defines the validator address to query for.
     *
     * @generated from protobuf field: string validator_addr = 1;
     */
    validatorAddr: string;
}
/**
 * QueryMissCounterResponse is response type for the
 * Query/MissCounter RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryMissCounterResponse
 */
export interface QueryMissCounterResponse {
    /**
     * miss_counter defines the oracle miss counter of a validator.
     *
     * @generated from protobuf field: uint64 miss_counter = 1;
     */
    missCounter: string;
}
/**
 * QueryAggregatePrevoteRequest is the request type for the
 * Query/AggregatePrevote RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregatePrevoteRequest
 */
export interface QueryAggregatePrevoteRequest {
    /**
     * validator defines the validator address to query for.
     *
     * @generated from protobuf field: string validator_addr = 1;
     */
    validatorAddr: string;
}
/**
 * QueryAggregatePrevoteResponse is response type for the
 * Query/AggregatePrevote RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregatePrevoteResponse
 */
export interface QueryAggregatePrevoteResponse {
    /**
     * aggregate_prevote defines oracle aggregate prevote submitted by a validator
     * in the current vote period.
     *
     * @generated from protobuf field: merlion.oracle.v1.AggregateExchangeRatePrevote aggregate_prevote = 1;
     */
    aggregatePrevote?: AggregateExchangeRatePrevote;
}
/**
 * QueryAggregatePrevotesRequest is the request type for the
 * Query/AggregatePrevotes RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregatePrevotesRequest
 */
export interface QueryAggregatePrevotesRequest {
}
/**
 * QueryAggregatePrevotesResponse is response type for the
 * Query/AggregatePrevotes RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregatePrevotesResponse
 */
export interface QueryAggregatePrevotesResponse {
    /**
     * aggregate_prevotes defines all oracle aggregate prevotes submitted in the
     * current vote period.
     *
     * @generated from protobuf field: repeated merlion.oracle.v1.AggregateExchangeRatePrevote aggregate_prevotes = 1;
     */
    aggregatePrevotes: AggregateExchangeRatePrevote[];
}
/**
 * QueryAggregateVoteRequest is the request type for the Query/AggregateVote RPC
 * method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregateVoteRequest
 */
export interface QueryAggregateVoteRequest {
    /**
     * validator defines the validator address to query for.
     *
     * @generated from protobuf field: string validator_addr = 1;
     */
    validatorAddr: string;
}
/**
 * QueryAggregateVoteResponse is response type for the
 * Query/AggregateVote RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregateVoteResponse
 */
export interface QueryAggregateVoteResponse {
    /**
     * aggregate_vote defines oracle aggregate vote submitted by a validator in
     * the current vote period.
     *
     * @generated from protobuf field: merlion.oracle.v1.AggregateExchangeRateVote aggregate_vote = 1;
     */
    aggregateVote?: AggregateExchangeRateVote;
}
/**
 * QueryAggregateVotesRequest is the request type for the Query/AggregateVotes
 * RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregateVotesRequest
 */
export interface QueryAggregateVotesRequest {
}
/**
 * QueryAggregateVotesResponse is response type for the
 * Query/AggregateVotes RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryAggregateVotesResponse
 */
export interface QueryAggregateVotesResponse {
    /**
     * aggregate_votes defines all oracle aggregate votes submitted in the current
     * vote period.
     *
     * @generated from protobuf field: repeated merlion.oracle.v1.AggregateExchangeRateVote aggregate_votes = 1;
     */
    aggregateVotes: AggregateExchangeRateVote[];
}
/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from protobuf message merlion.oracle.v1.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params holds all the parameters of this module.
     *
     * @generated from protobuf field: merlion.oracle.v1.Params params = 1;
     */
    params?: Params;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryExchangeRateRequest$Type extends MessageType<QueryExchangeRateRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryExchangeRateRequest", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryExchangeRateRequest>): QueryExchangeRateRequest {
        const message = { denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryExchangeRateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryExchangeRateRequest): QueryExchangeRateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryExchangeRateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryExchangeRateRequest
 */
export const QueryExchangeRateRequest = new QueryExchangeRateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryExchangeRateResponse$Type extends MessageType<QueryExchangeRateResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryExchangeRateResponse", [
            { no: 1, name: "exchange_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ]);
    }
    create(value?: PartialMessage<QueryExchangeRateResponse>): QueryExchangeRateResponse {
        const message = { exchangeRate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryExchangeRateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryExchangeRateResponse): QueryExchangeRateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string exchange_rate */ 1:
                    message.exchangeRate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryExchangeRateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string exchange_rate = 1; */
        if (message.exchangeRate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.exchangeRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryExchangeRateResponse
 */
export const QueryExchangeRateResponse = new QueryExchangeRateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryExchangeRatesRequest$Type extends MessageType<QueryExchangeRatesRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryExchangeRatesRequest", []);
    }
    create(value?: PartialMessage<QueryExchangeRatesRequest>): QueryExchangeRatesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryExchangeRatesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryExchangeRatesRequest): QueryExchangeRatesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryExchangeRatesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryExchangeRatesRequest
 */
export const QueryExchangeRatesRequest = new QueryExchangeRatesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryExchangeRatesResponse$Type extends MessageType<QueryExchangeRatesResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryExchangeRatesResponse", [
            { no: 1, name: "exchange_rates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } }
        ]);
    }
    create(value?: PartialMessage<QueryExchangeRatesResponse>): QueryExchangeRatesResponse {
        const message = { exchangeRates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryExchangeRatesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryExchangeRatesResponse): QueryExchangeRatesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.DecCoin exchange_rates */ 1:
                    message.exchangeRates.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryExchangeRatesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.base.v1beta1.DecCoin exchange_rates = 1; */
        for (let i = 0; i < message.exchangeRates.length; i++)
            DecCoin.internalBinaryWrite(message.exchangeRates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryExchangeRatesResponse
 */
export const QueryExchangeRatesResponse = new QueryExchangeRatesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryActivesRequest$Type extends MessageType<QueryActivesRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryActivesRequest", []);
    }
    create(value?: PartialMessage<QueryActivesRequest>): QueryActivesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryActivesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryActivesRequest): QueryActivesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryActivesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryActivesRequest
 */
export const QueryActivesRequest = new QueryActivesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryActivesResponse$Type extends MessageType<QueryActivesResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryActivesResponse", [
            { no: 1, name: "actives", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryActivesResponse>): QueryActivesResponse {
        const message = { actives: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryActivesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryActivesResponse): QueryActivesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string actives */ 1:
                    message.actives.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryActivesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string actives = 1; */
        for (let i = 0; i < message.actives.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.actives[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryActivesResponse
 */
export const QueryActivesResponse = new QueryActivesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVoteTargetsRequest$Type extends MessageType<QueryVoteTargetsRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryVoteTargetsRequest", []);
    }
    create(value?: PartialMessage<QueryVoteTargetsRequest>): QueryVoteTargetsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVoteTargetsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVoteTargetsRequest): QueryVoteTargetsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryVoteTargetsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryVoteTargetsRequest
 */
export const QueryVoteTargetsRequest = new QueryVoteTargetsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVoteTargetsResponse$Type extends MessageType<QueryVoteTargetsResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryVoteTargetsResponse", [
            { no: 1, name: "vote_targets", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryVoteTargetsResponse>): QueryVoteTargetsResponse {
        const message = { voteTargets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVoteTargetsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVoteTargetsResponse): QueryVoteTargetsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string vote_targets */ 1:
                    message.voteTargets.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVoteTargetsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string vote_targets = 1; */
        for (let i = 0; i < message.voteTargets.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.voteTargets[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryVoteTargetsResponse
 */
export const QueryVoteTargetsResponse = new QueryVoteTargetsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryFeederDelegationRequest$Type extends MessageType<QueryFeederDelegationRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryFeederDelegationRequest", [
            { no: 1, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryFeederDelegationRequest>): QueryFeederDelegationRequest {
        const message = { validatorAddr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryFeederDelegationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryFeederDelegationRequest): QueryFeederDelegationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_addr */ 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryFeederDelegationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string validator_addr = 1; */
        if (message.validatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryFeederDelegationRequest
 */
export const QueryFeederDelegationRequest = new QueryFeederDelegationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryFeederDelegationResponse$Type extends MessageType<QueryFeederDelegationResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryFeederDelegationResponse", [
            { no: 1, name: "feeder_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryFeederDelegationResponse>): QueryFeederDelegationResponse {
        const message = { feederAddr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryFeederDelegationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryFeederDelegationResponse): QueryFeederDelegationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string feeder_addr */ 1:
                    message.feederAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryFeederDelegationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string feeder_addr = 1; */
        if (message.feederAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.feederAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryFeederDelegationResponse
 */
export const QueryFeederDelegationResponse = new QueryFeederDelegationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMissCounterRequest$Type extends MessageType<QueryMissCounterRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryMissCounterRequest", [
            { no: 1, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryMissCounterRequest>): QueryMissCounterRequest {
        const message = { validatorAddr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryMissCounterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryMissCounterRequest): QueryMissCounterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_addr */ 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryMissCounterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string validator_addr = 1; */
        if (message.validatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryMissCounterRequest
 */
export const QueryMissCounterRequest = new QueryMissCounterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMissCounterResponse$Type extends MessageType<QueryMissCounterResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryMissCounterResponse", [
            { no: 1, name: "miss_counter", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryMissCounterResponse>): QueryMissCounterResponse {
        const message = { missCounter: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryMissCounterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryMissCounterResponse): QueryMissCounterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 miss_counter */ 1:
                    message.missCounter = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryMissCounterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 miss_counter = 1; */
        if (message.missCounter !== "0")
            writer.tag(1, WireType.Varint).uint64(message.missCounter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryMissCounterResponse
 */
export const QueryMissCounterResponse = new QueryMissCounterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregatePrevoteRequest$Type extends MessageType<QueryAggregatePrevoteRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregatePrevoteRequest", [
            { no: 1, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryAggregatePrevoteRequest>): QueryAggregatePrevoteRequest {
        const message = { validatorAddr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregatePrevoteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregatePrevoteRequest): QueryAggregatePrevoteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_addr */ 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAggregatePrevoteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string validator_addr = 1; */
        if (message.validatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregatePrevoteRequest
 */
export const QueryAggregatePrevoteRequest = new QueryAggregatePrevoteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregatePrevoteResponse$Type extends MessageType<QueryAggregatePrevoteResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregatePrevoteResponse", [
            { no: 1, name: "aggregate_prevote", kind: "message", T: () => AggregateExchangeRatePrevote, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAggregatePrevoteResponse>): QueryAggregatePrevoteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregatePrevoteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregatePrevoteResponse): QueryAggregatePrevoteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.oracle.v1.AggregateExchangeRatePrevote aggregate_prevote */ 1:
                    message.aggregatePrevote = AggregateExchangeRatePrevote.internalBinaryRead(reader, reader.uint32(), options, message.aggregatePrevote);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAggregatePrevoteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.oracle.v1.AggregateExchangeRatePrevote aggregate_prevote = 1; */
        if (message.aggregatePrevote)
            AggregateExchangeRatePrevote.internalBinaryWrite(message.aggregatePrevote, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregatePrevoteResponse
 */
export const QueryAggregatePrevoteResponse = new QueryAggregatePrevoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregatePrevotesRequest$Type extends MessageType<QueryAggregatePrevotesRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregatePrevotesRequest", []);
    }
    create(value?: PartialMessage<QueryAggregatePrevotesRequest>): QueryAggregatePrevotesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregatePrevotesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregatePrevotesRequest): QueryAggregatePrevotesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryAggregatePrevotesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregatePrevotesRequest
 */
export const QueryAggregatePrevotesRequest = new QueryAggregatePrevotesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregatePrevotesResponse$Type extends MessageType<QueryAggregatePrevotesResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregatePrevotesResponse", [
            { no: 1, name: "aggregate_prevotes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AggregateExchangeRatePrevote, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAggregatePrevotesResponse>): QueryAggregatePrevotesResponse {
        const message = { aggregatePrevotes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregatePrevotesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregatePrevotesResponse): QueryAggregatePrevotesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated merlion.oracle.v1.AggregateExchangeRatePrevote aggregate_prevotes */ 1:
                    message.aggregatePrevotes.push(AggregateExchangeRatePrevote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAggregatePrevotesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated merlion.oracle.v1.AggregateExchangeRatePrevote aggregate_prevotes = 1; */
        for (let i = 0; i < message.aggregatePrevotes.length; i++)
            AggregateExchangeRatePrevote.internalBinaryWrite(message.aggregatePrevotes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregatePrevotesResponse
 */
export const QueryAggregatePrevotesResponse = new QueryAggregatePrevotesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregateVoteRequest$Type extends MessageType<QueryAggregateVoteRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregateVoteRequest", [
            { no: 1, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryAggregateVoteRequest>): QueryAggregateVoteRequest {
        const message = { validatorAddr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregateVoteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregateVoteRequest): QueryAggregateVoteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_addr */ 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAggregateVoteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string validator_addr = 1; */
        if (message.validatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregateVoteRequest
 */
export const QueryAggregateVoteRequest = new QueryAggregateVoteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregateVoteResponse$Type extends MessageType<QueryAggregateVoteResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregateVoteResponse", [
            { no: 1, name: "aggregate_vote", kind: "message", T: () => AggregateExchangeRateVote, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAggregateVoteResponse>): QueryAggregateVoteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregateVoteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregateVoteResponse): QueryAggregateVoteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.oracle.v1.AggregateExchangeRateVote aggregate_vote */ 1:
                    message.aggregateVote = AggregateExchangeRateVote.internalBinaryRead(reader, reader.uint32(), options, message.aggregateVote);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAggregateVoteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.oracle.v1.AggregateExchangeRateVote aggregate_vote = 1; */
        if (message.aggregateVote)
            AggregateExchangeRateVote.internalBinaryWrite(message.aggregateVote, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregateVoteResponse
 */
export const QueryAggregateVoteResponse = new QueryAggregateVoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregateVotesRequest$Type extends MessageType<QueryAggregateVotesRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregateVotesRequest", []);
    }
    create(value?: PartialMessage<QueryAggregateVotesRequest>): QueryAggregateVotesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregateVotesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregateVotesRequest): QueryAggregateVotesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryAggregateVotesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregateVotesRequest
 */
export const QueryAggregateVotesRequest = new QueryAggregateVotesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAggregateVotesResponse$Type extends MessageType<QueryAggregateVotesResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryAggregateVotesResponse", [
            { no: 1, name: "aggregate_votes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AggregateExchangeRateVote, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAggregateVotesResponse>): QueryAggregateVotesResponse {
        const message = { aggregateVotes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAggregateVotesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAggregateVotesResponse): QueryAggregateVotesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated merlion.oracle.v1.AggregateExchangeRateVote aggregate_votes */ 1:
                    message.aggregateVotes.push(AggregateExchangeRateVote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAggregateVotesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated merlion.oracle.v1.AggregateExchangeRateVote aggregate_votes = 1; */
        for (let i = 0; i < message.aggregateVotes.length; i++)
            AggregateExchangeRateVote.internalBinaryWrite(message.aggregateVotes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryAggregateVotesResponse
 */
export const QueryAggregateVotesResponse = new QueryAggregateVotesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("merlion.oracle.v1.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("merlion.oracle.v1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.oracle.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.oracle.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
/**
 * @generated ServiceType for protobuf service merlion.oracle.v1.Query
 */
export const Query = new ServiceType("merlion.oracle.v1.Query", [
    { name: "ExchangeRate", options: { "google.api.http": { get: "/merlion/oracle/v1/denoms/{denom}/exchange_rate" } }, I: QueryExchangeRateRequest, O: QueryExchangeRateResponse },
    { name: "ExchangeRates", options: { "google.api.http": { get: "/merlion/oracle/v1/denoms/exchange_rates" } }, I: QueryExchangeRatesRequest, O: QueryExchangeRatesResponse },
    { name: "Actives", options: { "google.api.http": { get: "/merlion/oracle/v1/denoms/actives" } }, I: QueryActivesRequest, O: QueryActivesResponse },
    { name: "VoteTargets", options: { "google.api.http": { get: "/merlion/oracle/v1/denoms/vote_targets" } }, I: QueryVoteTargetsRequest, O: QueryVoteTargetsResponse },
    { name: "FeederDelegation", options: { "google.api.http": { get: "/merlion/oracle/v1/validators/{validator_addr}/feeder" } }, I: QueryFeederDelegationRequest, O: QueryFeederDelegationResponse },
    { name: "MissCounter", options: { "google.api.http": { get: "/merlion/oracle/v1/validators/{validator_addr}/miss" } }, I: QueryMissCounterRequest, O: QueryMissCounterResponse },
    { name: "AggregatePrevote", options: { "google.api.http": { get: "/merlion/oracle/v1/validators/{validator_addr}/aggregate_prevote" } }, I: QueryAggregatePrevoteRequest, O: QueryAggregatePrevoteResponse },
    { name: "AggregatePrevotes", options: { "google.api.http": { get: "/merlion/oracle/v1/validators/aggregate_prevotes" } }, I: QueryAggregatePrevotesRequest, O: QueryAggregatePrevotesResponse },
    { name: "AggregateVote", options: { "google.api.http": { get: "/merlion/oracle/v1/valdiators/{validator_addr}/aggregate_vote" } }, I: QueryAggregateVoteRequest, O: QueryAggregateVoteResponse },
    { name: "AggregateVotes", options: { "google.api.http": { get: "/merlion/oracle/v1/validators/aggregate_votes" } }, I: QueryAggregateVotesRequest, O: QueryAggregateVotesResponse },
    { name: "Params", options: { "google.api.http": { get: "/merlionzone/merlion/oracle/params" } }, I: QueryParamsRequest, O: QueryParamsResponse }
]);
