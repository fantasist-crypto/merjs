// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/oracle/v1/tx.proto" (package "merlion.oracle.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * MsgAggregateExchangeRatePrevote defines a message to submit
 * aggregate exchange rate prevote.
 *
 * @generated from protobuf message merlion.oracle.v1.MsgAggregateExchangeRatePrevote
 */
export interface MsgAggregateExchangeRatePrevote {
    /**
     * @generated from protobuf field: string hash = 1;
     */
    hash: string;
    /**
     * @generated from protobuf field: string feeder = 2;
     */
    feeder: string;
    /**
     * @generated from protobuf field: string validator = 3;
     */
    validator: string;
}
/**
 * MsgAggregateExchangeRatePrevoteResponse defines the
 * MsgAggregateExchangeRatePrevote response type.
 *
 * @generated from protobuf message merlion.oracle.v1.MsgAggregateExchangeRatePrevoteResponse
 */
export interface MsgAggregateExchangeRatePrevoteResponse {
}
/**
 * MsgAggregateExchangeRateVote defines a message to submit
 * aggregate exchange rate vote.
 *
 * @generated from protobuf message merlion.oracle.v1.MsgAggregateExchangeRateVote
 */
export interface MsgAggregateExchangeRateVote {
    /**
     * @generated from protobuf field: string salt = 1;
     */
    salt: string;
    /**
     * @generated from protobuf field: string exchange_rates = 2;
     */
    exchangeRates: string;
    /**
     * @generated from protobuf field: string feeder = 3;
     */
    feeder: string;
    /**
     * @generated from protobuf field: string validator = 4;
     */
    validator: string;
}
/**
 * MsgAggregateExchangeRateVoteResponse defines the MsgAggregateExchangeRateVote
 * response type.
 *
 * @generated from protobuf message merlion.oracle.v1.MsgAggregateExchangeRateVoteResponse
 */
export interface MsgAggregateExchangeRateVoteResponse {
}
/**
 * MsgDelegateFeedConsent defines a message to
 * delegate oracle voting rights to another address.
 *
 * @generated from protobuf message merlion.oracle.v1.MsgDelegateFeedConsent
 */
export interface MsgDelegateFeedConsent {
    /**
     * @generated from protobuf field: string operator = 1;
     */
    operator: string;
    /**
     * @generated from protobuf field: string delegate = 2;
     */
    delegate: string;
}
/**
 * MsgDelegateFeedConsentResponse defines the MsgDelegateFeedConsent response
 * type.
 *
 * @generated from protobuf message merlion.oracle.v1.MsgDelegateFeedConsentResponse
 */
export interface MsgDelegateFeedConsentResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgAggregateExchangeRatePrevote$Type extends MessageType<MsgAggregateExchangeRatePrevote> {
    constructor() {
        super("merlion.oracle.v1.MsgAggregateExchangeRatePrevote", [
            { no: 1, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "feeder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "validator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgAggregateExchangeRatePrevote>): MsgAggregateExchangeRatePrevote {
        const message = { hash: "", feeder: "", validator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAggregateExchangeRatePrevote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAggregateExchangeRatePrevote): MsgAggregateExchangeRatePrevote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hash */ 1:
                    message.hash = reader.string();
                    break;
                case /* string feeder */ 2:
                    message.feeder = reader.string();
                    break;
                case /* string validator */ 3:
                    message.validator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgAggregateExchangeRatePrevote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hash = 1; */
        if (message.hash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hash);
        /* string feeder = 2; */
        if (message.feeder !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.feeder);
        /* string validator = 3; */
        if (message.validator !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.validator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.MsgAggregateExchangeRatePrevote
 */
export const MsgAggregateExchangeRatePrevote = new MsgAggregateExchangeRatePrevote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAggregateExchangeRatePrevoteResponse$Type extends MessageType<MsgAggregateExchangeRatePrevoteResponse> {
    constructor() {
        super("merlion.oracle.v1.MsgAggregateExchangeRatePrevoteResponse", []);
    }
    create(value?: PartialMessage<MsgAggregateExchangeRatePrevoteResponse>): MsgAggregateExchangeRatePrevoteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAggregateExchangeRatePrevoteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAggregateExchangeRatePrevoteResponse): MsgAggregateExchangeRatePrevoteResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgAggregateExchangeRatePrevoteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.MsgAggregateExchangeRatePrevoteResponse
 */
export const MsgAggregateExchangeRatePrevoteResponse = new MsgAggregateExchangeRatePrevoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAggregateExchangeRateVote$Type extends MessageType<MsgAggregateExchangeRateVote> {
    constructor() {
        super("merlion.oracle.v1.MsgAggregateExchangeRateVote", [
            { no: 1, name: "salt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "exchange_rates", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "feeder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "validator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgAggregateExchangeRateVote>): MsgAggregateExchangeRateVote {
        const message = { salt: "", exchangeRates: "", feeder: "", validator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAggregateExchangeRateVote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAggregateExchangeRateVote): MsgAggregateExchangeRateVote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string salt */ 1:
                    message.salt = reader.string();
                    break;
                case /* string exchange_rates */ 2:
                    message.exchangeRates = reader.string();
                    break;
                case /* string feeder */ 3:
                    message.feeder = reader.string();
                    break;
                case /* string validator */ 4:
                    message.validator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgAggregateExchangeRateVote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string salt = 1; */
        if (message.salt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.salt);
        /* string exchange_rates = 2; */
        if (message.exchangeRates !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.exchangeRates);
        /* string feeder = 3; */
        if (message.feeder !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.feeder);
        /* string validator = 4; */
        if (message.validator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.validator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.MsgAggregateExchangeRateVote
 */
export const MsgAggregateExchangeRateVote = new MsgAggregateExchangeRateVote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAggregateExchangeRateVoteResponse$Type extends MessageType<MsgAggregateExchangeRateVoteResponse> {
    constructor() {
        super("merlion.oracle.v1.MsgAggregateExchangeRateVoteResponse", []);
    }
    create(value?: PartialMessage<MsgAggregateExchangeRateVoteResponse>): MsgAggregateExchangeRateVoteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAggregateExchangeRateVoteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAggregateExchangeRateVoteResponse): MsgAggregateExchangeRateVoteResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgAggregateExchangeRateVoteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.MsgAggregateExchangeRateVoteResponse
 */
export const MsgAggregateExchangeRateVoteResponse = new MsgAggregateExchangeRateVoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDelegateFeedConsent$Type extends MessageType<MsgDelegateFeedConsent> {
    constructor() {
        super("merlion.oracle.v1.MsgDelegateFeedConsent", [
            { no: 1, name: "operator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "delegate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgDelegateFeedConsent>): MsgDelegateFeedConsent {
        const message = { operator: "", delegate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDelegateFeedConsent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDelegateFeedConsent): MsgDelegateFeedConsent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string operator */ 1:
                    message.operator = reader.string();
                    break;
                case /* string delegate */ 2:
                    message.delegate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDelegateFeedConsent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string operator = 1; */
        if (message.operator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.operator);
        /* string delegate = 2; */
        if (message.delegate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.delegate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.MsgDelegateFeedConsent
 */
export const MsgDelegateFeedConsent = new MsgDelegateFeedConsent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDelegateFeedConsentResponse$Type extends MessageType<MsgDelegateFeedConsentResponse> {
    constructor() {
        super("merlion.oracle.v1.MsgDelegateFeedConsentResponse", []);
    }
    create(value?: PartialMessage<MsgDelegateFeedConsentResponse>): MsgDelegateFeedConsentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDelegateFeedConsentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDelegateFeedConsentResponse): MsgDelegateFeedConsentResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgDelegateFeedConsentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.oracle.v1.MsgDelegateFeedConsentResponse
 */
export const MsgDelegateFeedConsentResponse = new MsgDelegateFeedConsentResponse$Type();
/**
 * @generated ServiceType for protobuf service merlion.oracle.v1.Msg
 */
export const Msg = new ServiceType("merlion.oracle.v1.Msg", [
    { name: "AggregateExchangeRatePrevote", options: { "google.api.http": { get: "/merlion/oracle/v1/tx/aggregate_exchange_rate_prevote" } }, I: MsgAggregateExchangeRatePrevote, O: MsgAggregateExchangeRatePrevoteResponse },
    { name: "AggregateExchangeRateVote", options: { "google.api.http": { get: "/merlion/oracle/v1/tx/aggregate_exchange_rate_vote" } }, I: MsgAggregateExchangeRateVote, O: MsgAggregateExchangeRateVoteResponse },
    { name: "DelegateFeedConsent", options: { "google.api.http": { get: "/merlion/oracle/v1/tx/delegate_feed_consent" } }, I: MsgDelegateFeedConsent, O: MsgDelegateFeedConsentResponse }
]);
