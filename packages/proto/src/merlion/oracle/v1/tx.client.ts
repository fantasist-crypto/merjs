// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/oracle/v1/tx.proto" (package "merlion.oracle.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import type { MsgDelegateFeedConsentResponse } from "./tx";
import type { MsgDelegateFeedConsent } from "./tx";
import type { MsgAggregateExchangeRateVoteResponse } from "./tx";
import type { MsgAggregateExchangeRateVote } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgAggregateExchangeRatePrevoteResponse } from "./tx";
import type { MsgAggregateExchangeRatePrevote } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the Msg service.
 *
 * @generated from protobuf service merlion.oracle.v1.Msg
 */
export interface IMsgClient {
    /**
     * AggregateExchangeRatePrevote submits aggregate exchange rate prevote.
     *
     * @generated from protobuf rpc: AggregateExchangeRatePrevote(merlion.oracle.v1.MsgAggregateExchangeRatePrevote) returns (merlion.oracle.v1.MsgAggregateExchangeRatePrevoteResponse);
     */
    aggregateExchangeRatePrevote(input: MsgAggregateExchangeRatePrevote, options?: RpcOptions): UnaryCall<MsgAggregateExchangeRatePrevote, MsgAggregateExchangeRatePrevoteResponse>;
    /**
     * AggregateExchangeRateVote submits aggregate exchange rate vote.
     *
     * @generated from protobuf rpc: AggregateExchangeRateVote(merlion.oracle.v1.MsgAggregateExchangeRateVote) returns (merlion.oracle.v1.MsgAggregateExchangeRateVoteResponse);
     */
    aggregateExchangeRateVote(input: MsgAggregateExchangeRateVote, options?: RpcOptions): UnaryCall<MsgAggregateExchangeRateVote, MsgAggregateExchangeRateVoteResponse>;
    /**
     * DelegateFeedConsent sets the feeder delegation.
     *
     * @generated from protobuf rpc: DelegateFeedConsent(merlion.oracle.v1.MsgDelegateFeedConsent) returns (merlion.oracle.v1.MsgDelegateFeedConsentResponse);
     */
    delegateFeedConsent(input: MsgDelegateFeedConsent, options?: RpcOptions): UnaryCall<MsgDelegateFeedConsent, MsgDelegateFeedConsentResponse>;
}
/**
 * Msg defines the Msg service.
 *
 * @generated from protobuf service merlion.oracle.v1.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * AggregateExchangeRatePrevote submits aggregate exchange rate prevote.
     *
     * @generated from protobuf rpc: AggregateExchangeRatePrevote(merlion.oracle.v1.MsgAggregateExchangeRatePrevote) returns (merlion.oracle.v1.MsgAggregateExchangeRatePrevoteResponse);
     */
    aggregateExchangeRatePrevote(input: MsgAggregateExchangeRatePrevote, options?: RpcOptions): UnaryCall<MsgAggregateExchangeRatePrevote, MsgAggregateExchangeRatePrevoteResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgAggregateExchangeRatePrevote, MsgAggregateExchangeRatePrevoteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AggregateExchangeRateVote submits aggregate exchange rate vote.
     *
     * @generated from protobuf rpc: AggregateExchangeRateVote(merlion.oracle.v1.MsgAggregateExchangeRateVote) returns (merlion.oracle.v1.MsgAggregateExchangeRateVoteResponse);
     */
    aggregateExchangeRateVote(input: MsgAggregateExchangeRateVote, options?: RpcOptions): UnaryCall<MsgAggregateExchangeRateVote, MsgAggregateExchangeRateVoteResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgAggregateExchangeRateVote, MsgAggregateExchangeRateVoteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DelegateFeedConsent sets the feeder delegation.
     *
     * @generated from protobuf rpc: DelegateFeedConsent(merlion.oracle.v1.MsgDelegateFeedConsent) returns (merlion.oracle.v1.MsgDelegateFeedConsentResponse);
     */
    delegateFeedConsent(input: MsgDelegateFeedConsent, options?: RpcOptions): UnaryCall<MsgDelegateFeedConsent, MsgDelegateFeedConsentResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgDelegateFeedConsent, MsgDelegateFeedConsentResponse>("unary", this._transport, method, opt, input);
    }
}
