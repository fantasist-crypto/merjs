// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/erc20/v1/erc20.proto" (package "merlion.erc20.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * TokenPair defines an instance that records pairing consisting of a Cosmos
 * native Coin and an ERC20 token address.
 *
 * @generated from protobuf message merlion.erc20.v1.TokenPair
 */
export interface TokenPair {
    /**
     * address of ERC20 contract token
     *
     * @generated from protobuf field: string erc20_address = 1;
     */
    erc20Address: string;
    /**
     * cosmos base denomination to be mapped to
     *
     * @generated from protobuf field: string denom = 2;
     */
    denom: string;
    /**
     * ERC20 owner address ENUM (0 invalid, 1 ModuleAccount, 2 external address)
     *
     * @generated from protobuf field: merlion.erc20.v1.Owner contract_owner = 3;
     */
    contractOwner: Owner;
}
/**
 * Owner enumerates the ownership of a ERC20 contract.
 *
 * @generated from protobuf enum merlion.erc20.v1.Owner
 */
export enum Owner {
    /**
     * OWNER_UNSPECIFIED defines an invalid/undefined owner.
     *
     * @generated from protobuf enum value: OWNER_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * OWNER_MODULE erc20 is owned by the erc20 module account.
     *
     * @generated from protobuf enum value: OWNER_MODULE = 1;
     */
    MODULE = 1,
    /**
     * EXTERNAL erc20 is owned by an external account.
     *
     * @generated from protobuf enum value: OWNER_EXTERNAL = 2;
     */
    EXTERNAL = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class TokenPair$Type extends MessageType<TokenPair> {
    constructor() {
        super("merlion.erc20.v1.TokenPair", [
            { no: 1, name: "erc20_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract_owner", kind: "enum", T: () => ["merlion.erc20.v1.Owner", Owner, "OWNER_"] }
        ], { "gogoproto.equal": true });
    }
    create(value?: PartialMessage<TokenPair>): TokenPair {
        const message = { erc20Address: "", denom: "", contractOwner: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TokenPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenPair): TokenPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string erc20_address */ 1:
                    message.erc20Address = reader.string();
                    break;
                case /* string denom */ 2:
                    message.denom = reader.string();
                    break;
                case /* merlion.erc20.v1.Owner contract_owner */ 3:
                    message.contractOwner = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string erc20_address = 1; */
        if (message.erc20Address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.erc20Address);
        /* string denom = 2; */
        if (message.denom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.denom);
        /* merlion.erc20.v1.Owner contract_owner = 3; */
        if (message.contractOwner !== 0)
            writer.tag(3, WireType.Varint).int32(message.contractOwner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.erc20.v1.TokenPair
 */
export const TokenPair = new TokenPair$Type();
