// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/erc20/v1/query.proto" (package "merlion.erc20.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { QueryTokenPairResponse } from "./query";
import type { QueryTokenPairRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryTokenPairsResponse } from "./query";
import type { QueryTokenPairsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service merlion.erc20.v1.Query
 */
export interface IQueryClient {
    /**
     * Retrieves registered token pairs
     *
     * @generated from protobuf rpc: TokenPairs(merlion.erc20.v1.QueryTokenPairsRequest) returns (merlion.erc20.v1.QueryTokenPairsResponse);
     */
    tokenPairs(input: QueryTokenPairsRequest, options?: RpcOptions): UnaryCall<QueryTokenPairsRequest, QueryTokenPairsResponse>;
    /**
     * Retrieves a registered token pair
     *
     * @generated from protobuf rpc: TokenPair(merlion.erc20.v1.QueryTokenPairRequest) returns (merlion.erc20.v1.QueryTokenPairResponse);
     */
    tokenPair(input: QueryTokenPairRequest, options?: RpcOptions): UnaryCall<QueryTokenPairRequest, QueryTokenPairResponse>;
    /**
     * Params retrieves the erc20 module params
     *
     * @generated from protobuf rpc: Params(merlion.erc20.v1.QueryParamsRequest) returns (merlion.erc20.v1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service merlion.erc20.v1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Retrieves registered token pairs
     *
     * @generated from protobuf rpc: TokenPairs(merlion.erc20.v1.QueryTokenPairsRequest) returns (merlion.erc20.v1.QueryTokenPairsResponse);
     */
    tokenPairs(input: QueryTokenPairsRequest, options?: RpcOptions): UnaryCall<QueryTokenPairsRequest, QueryTokenPairsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTokenPairsRequest, QueryTokenPairsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retrieves a registered token pair
     *
     * @generated from protobuf rpc: TokenPair(merlion.erc20.v1.QueryTokenPairRequest) returns (merlion.erc20.v1.QueryTokenPairResponse);
     */
    tokenPair(input: QueryTokenPairRequest, options?: RpcOptions): UnaryCall<QueryTokenPairRequest, QueryTokenPairResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTokenPairRequest, QueryTokenPairResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Params retrieves the erc20 module params
     *
     * @generated from protobuf rpc: Params(merlion.erc20.v1.QueryParamsRequest) returns (merlion.erc20.v1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
}
