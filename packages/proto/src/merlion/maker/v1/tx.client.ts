// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/maker/v1/tx.proto" (package "merlion.maker.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import type { MsgLiquidateCollateralResponse } from "./tx";
import type { MsgLiquidateCollateral } from "./tx";
import type { MsgRedeemCollateralResponse } from "./tx";
import type { MsgRedeemCollateral } from "./tx";
import type { MsgDepositCollateralResponse } from "./tx";
import type { MsgDepositCollateral } from "./tx";
import type { MsgBurnByCollateralResponse } from "./tx";
import type { MsgBurnByCollateral } from "./tx";
import type { MsgMintByCollateralResponse } from "./tx";
import type { MsgMintByCollateral } from "./tx";
import type { MsgSellBackingResponse } from "./tx";
import type { MsgSellBacking } from "./tx";
import type { MsgBuyBackingResponse } from "./tx";
import type { MsgBuyBacking } from "./tx";
import type { MsgBurnBySwapResponse } from "./tx";
import type { MsgBurnBySwap } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgMintBySwapResponse } from "./tx";
import type { MsgMintBySwap } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the maker Msg service.
 *
 * @generated from protobuf service merlion.maker.v1.Msg
 */
export interface IMsgClient {
    /**
     * MintBySwap mints Mer stablecoins by swapping in strong-backing assets and
     * Lion coins.
     *
     * @generated from protobuf rpc: MintBySwap(merlion.maker.v1.MsgMintBySwap) returns (merlion.maker.v1.MsgMintBySwapResponse);
     */
    mintBySwap(input: MsgMintBySwap, options?: RpcOptions): UnaryCall<MsgMintBySwap, MsgMintBySwapResponse>;
    /**
     * BurnBySwap burns Mer stablecoins by swapping out strong-backing assets and
     * Lion coins.
     *
     * @generated from protobuf rpc: BurnBySwap(merlion.maker.v1.MsgBurnBySwap) returns (merlion.maker.v1.MsgBurnBySwapResponse);
     */
    burnBySwap(input: MsgBurnBySwap, options?: RpcOptions): UnaryCall<MsgBurnBySwap, MsgBurnBySwapResponse>;
    /**
     * BuyBacking buys strong-backing assets by spending Lion coins.
     *
     * @generated from protobuf rpc: BuyBacking(merlion.maker.v1.MsgBuyBacking) returns (merlion.maker.v1.MsgBuyBackingResponse);
     */
    buyBacking(input: MsgBuyBacking, options?: RpcOptions): UnaryCall<MsgBuyBacking, MsgBuyBackingResponse>;
    /**
     * SellBacking sells strong-backing assets by earning Lion
     * coins.
     *
     * @generated from protobuf rpc: SellBacking(merlion.maker.v1.MsgSellBacking) returns (merlion.maker.v1.MsgSellBackingResponse);
     */
    sellBacking(input: MsgSellBacking, options?: RpcOptions): UnaryCall<MsgSellBacking, MsgSellBackingResponse>;
    /**
     * MintByCollateral mints Mer stablecoins by locking collateral assets and
     * spending Lion coins.
     *
     * @generated from protobuf rpc: MintByCollateral(merlion.maker.v1.MsgMintByCollateral) returns (merlion.maker.v1.MsgMintByCollateralResponse);
     */
    mintByCollateral(input: MsgMintByCollateral, options?: RpcOptions): UnaryCall<MsgMintByCollateral, MsgMintByCollateralResponse>;
    /**
     * BurnByCollateral burns Mer stablecoins by unlocking collateral assets and
     * earning Lion coins.
     *
     * @generated from protobuf rpc: BurnByCollateral(merlion.maker.v1.MsgBurnByCollateral) returns (merlion.maker.v1.MsgBurnByCollateralResponse);
     */
    burnByCollateral(input: MsgBurnByCollateral, options?: RpcOptions): UnaryCall<MsgBurnByCollateral, MsgBurnByCollateralResponse>;
    /**
     * DepositCollateral deposits collateral assets.
     *
     * @generated from protobuf rpc: DepositCollateral(merlion.maker.v1.MsgDepositCollateral) returns (merlion.maker.v1.MsgDepositCollateralResponse);
     */
    depositCollateral(input: MsgDepositCollateral, options?: RpcOptions): UnaryCall<MsgDepositCollateral, MsgDepositCollateralResponse>;
    /**
     * RedeemCollateral redeems collateral assets.
     *
     * @generated from protobuf rpc: RedeemCollateral(merlion.maker.v1.MsgRedeemCollateral) returns (merlion.maker.v1.MsgRedeemCollateralResponse);
     */
    redeemCollateral(input: MsgRedeemCollateral, options?: RpcOptions): UnaryCall<MsgRedeemCollateral, MsgRedeemCollateralResponse>;
    /**
     * LiquidateCollateral liquidates collateral assets which is
     * undercollateralized.
     *
     * @generated from protobuf rpc: LiquidateCollateral(merlion.maker.v1.MsgLiquidateCollateral) returns (merlion.maker.v1.MsgLiquidateCollateralResponse);
     */
    liquidateCollateral(input: MsgLiquidateCollateral, options?: RpcOptions): UnaryCall<MsgLiquidateCollateral, MsgLiquidateCollateralResponse>;
}
/**
 * Msg defines the maker Msg service.
 *
 * @generated from protobuf service merlion.maker.v1.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * MintBySwap mints Mer stablecoins by swapping in strong-backing assets and
     * Lion coins.
     *
     * @generated from protobuf rpc: MintBySwap(merlion.maker.v1.MsgMintBySwap) returns (merlion.maker.v1.MsgMintBySwapResponse);
     */
    mintBySwap(input: MsgMintBySwap, options?: RpcOptions): UnaryCall<MsgMintBySwap, MsgMintBySwapResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgMintBySwap, MsgMintBySwapResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BurnBySwap burns Mer stablecoins by swapping out strong-backing assets and
     * Lion coins.
     *
     * @generated from protobuf rpc: BurnBySwap(merlion.maker.v1.MsgBurnBySwap) returns (merlion.maker.v1.MsgBurnBySwapResponse);
     */
    burnBySwap(input: MsgBurnBySwap, options?: RpcOptions): UnaryCall<MsgBurnBySwap, MsgBurnBySwapResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgBurnBySwap, MsgBurnBySwapResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BuyBacking buys strong-backing assets by spending Lion coins.
     *
     * @generated from protobuf rpc: BuyBacking(merlion.maker.v1.MsgBuyBacking) returns (merlion.maker.v1.MsgBuyBackingResponse);
     */
    buyBacking(input: MsgBuyBacking, options?: RpcOptions): UnaryCall<MsgBuyBacking, MsgBuyBackingResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgBuyBacking, MsgBuyBackingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SellBacking sells strong-backing assets by earning Lion
     * coins.
     *
     * @generated from protobuf rpc: SellBacking(merlion.maker.v1.MsgSellBacking) returns (merlion.maker.v1.MsgSellBackingResponse);
     */
    sellBacking(input: MsgSellBacking, options?: RpcOptions): UnaryCall<MsgSellBacking, MsgSellBackingResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgSellBacking, MsgSellBackingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * MintByCollateral mints Mer stablecoins by locking collateral assets and
     * spending Lion coins.
     *
     * @generated from protobuf rpc: MintByCollateral(merlion.maker.v1.MsgMintByCollateral) returns (merlion.maker.v1.MsgMintByCollateralResponse);
     */
    mintByCollateral(input: MsgMintByCollateral, options?: RpcOptions): UnaryCall<MsgMintByCollateral, MsgMintByCollateralResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgMintByCollateral, MsgMintByCollateralResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BurnByCollateral burns Mer stablecoins by unlocking collateral assets and
     * earning Lion coins.
     *
     * @generated from protobuf rpc: BurnByCollateral(merlion.maker.v1.MsgBurnByCollateral) returns (merlion.maker.v1.MsgBurnByCollateralResponse);
     */
    burnByCollateral(input: MsgBurnByCollateral, options?: RpcOptions): UnaryCall<MsgBurnByCollateral, MsgBurnByCollateralResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgBurnByCollateral, MsgBurnByCollateralResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DepositCollateral deposits collateral assets.
     *
     * @generated from protobuf rpc: DepositCollateral(merlion.maker.v1.MsgDepositCollateral) returns (merlion.maker.v1.MsgDepositCollateralResponse);
     */
    depositCollateral(input: MsgDepositCollateral, options?: RpcOptions): UnaryCall<MsgDepositCollateral, MsgDepositCollateralResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgDepositCollateral, MsgDepositCollateralResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RedeemCollateral redeems collateral assets.
     *
     * @generated from protobuf rpc: RedeemCollateral(merlion.maker.v1.MsgRedeemCollateral) returns (merlion.maker.v1.MsgRedeemCollateralResponse);
     */
    redeemCollateral(input: MsgRedeemCollateral, options?: RpcOptions): UnaryCall<MsgRedeemCollateral, MsgRedeemCollateralResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgRedeemCollateral, MsgRedeemCollateralResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * LiquidateCollateral liquidates collateral assets which is
     * undercollateralized.
     *
     * @generated from protobuf rpc: LiquidateCollateral(merlion.maker.v1.MsgLiquidateCollateral) returns (merlion.maker.v1.MsgLiquidateCollateralResponse);
     */
    liquidateCollateral(input: MsgLiquidateCollateral, options?: RpcOptions): UnaryCall<MsgLiquidateCollateral, MsgLiquidateCollateralResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgLiquidateCollateral, MsgLiquidateCollateralResponse>("unary", this._transport, method, opt, input);
    }
}
