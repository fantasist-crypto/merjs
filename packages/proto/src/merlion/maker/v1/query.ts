// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/maker/v1/query.proto" (package "merlion.maker.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./genesis";
import { TotalCollateral } from "./maker";
import { TotalBacking } from "./maker";
import { AccountCollateral } from "./maker";
import { PoolCollateral } from "./maker";
import { PoolBacking } from "./maker";
import { CollateralRiskParams } from "./maker";
import { BackingRiskParams } from "./maker";
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllBackingRiskParamsRequest
 */
export interface QueryAllBackingRiskParamsRequest {
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllBackingRiskParamsResponse
 */
export interface QueryAllBackingRiskParamsResponse {
    /**
     * @generated from protobuf field: repeated merlion.maker.v1.BackingRiskParams risk_params = 1;
     */
    riskParams: BackingRiskParams[];
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllCollateralRiskParamsRequest
 */
export interface QueryAllCollateralRiskParamsRequest {
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllCollateralRiskParamsResponse
 */
export interface QueryAllCollateralRiskParamsResponse {
    /**
     * @generated from protobuf field: repeated merlion.maker.v1.CollateralRiskParams risk_params = 1;
     */
    riskParams: CollateralRiskParams[];
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllBackingPoolsRequest
 */
export interface QueryAllBackingPoolsRequest {
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllBackingPoolsResponse
 */
export interface QueryAllBackingPoolsResponse {
    /**
     * @generated from protobuf field: repeated merlion.maker.v1.PoolBacking backing_pools = 1;
     */
    backingPools: PoolBacking[];
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllCollateralPoolsRequest
 */
export interface QueryAllCollateralPoolsRequest {
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryAllCollateralPoolsResponse
 */
export interface QueryAllCollateralPoolsResponse {
    /**
     * @generated from protobuf field: repeated merlion.maker.v1.PoolCollateral collateral_pools = 1;
     */
    collateralPools: PoolCollateral[];
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryBackingPoolRequest
 */
export interface QueryBackingPoolRequest {
    /**
     * @generated from protobuf field: string backing_denom = 1;
     */
    backingDenom: string;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryBackingPoolResponse
 */
export interface QueryBackingPoolResponse {
    /**
     * @generated from protobuf field: merlion.maker.v1.PoolBacking backing_pool = 1;
     */
    backingPool?: PoolBacking;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryCollateralPoolRequest
 */
export interface QueryCollateralPoolRequest {
    /**
     * @generated from protobuf field: string collateral_denom = 1;
     */
    collateralDenom: string;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryCollateralPoolResponse
 */
export interface QueryCollateralPoolResponse {
    /**
     * @generated from protobuf field: merlion.maker.v1.PoolCollateral collateral_pool = 1;
     */
    collateralPool?: PoolCollateral;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryCollateralOfAccountRequest
 */
export interface QueryCollateralOfAccountRequest {
    /**
     * @generated from protobuf field: string account = 1;
     */
    account: string;
    /**
     * @generated from protobuf field: string collateral_denom = 2;
     */
    collateralDenom: string;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryCollateralOfAccountResponse
 */
export interface QueryCollateralOfAccountResponse {
    /**
     * @generated from protobuf field: merlion.maker.v1.AccountCollateral account_collateral = 1;
     */
    accountCollateral?: AccountCollateral;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryTotalBackingRequest
 */
export interface QueryTotalBackingRequest {
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryTotalBackingResponse
 */
export interface QueryTotalBackingResponse {
    /**
     * @generated from protobuf field: merlion.maker.v1.TotalBacking total_backing = 1;
     */
    totalBacking?: TotalBacking;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryTotalCollateralRequest
 */
export interface QueryTotalCollateralRequest {
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryTotalCollateralResponse
 */
export interface QueryTotalCollateralResponse {
    /**
     * @generated from protobuf field: merlion.maker.v1.TotalCollateral total_collateral = 1;
     */
    totalCollateral?: TotalCollateral;
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryCollateralRatioRequest
 */
export interface QueryCollateralRatioRequest {
}
/**
 * @generated from protobuf message merlion.maker.v1.QueryCollateralRatioResponse
 */
export interface QueryCollateralRatioResponse {
    /**
     * @generated from protobuf field: string collateral_ratio = 1;
     */
    collateralRatio: string;
    /**
     * @generated from protobuf field: int64 last_update_block = 2;
     */
    lastUpdateBlock: string;
}
/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from protobuf message merlion.maker.v1.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from protobuf message merlion.maker.v1.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params holds all the parameters of this module.
     *
     * @generated from protobuf field: merlion.maker.v1.Params params = 1;
     */
    params?: Params;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllBackingRiskParamsRequest$Type extends MessageType<QueryAllBackingRiskParamsRequest> {
    constructor() {
        super("merlion.maker.v1.QueryAllBackingRiskParamsRequest", []);
    }
    create(value?: PartialMessage<QueryAllBackingRiskParamsRequest>): QueryAllBackingRiskParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllBackingRiskParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllBackingRiskParamsRequest): QueryAllBackingRiskParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryAllBackingRiskParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllBackingRiskParamsRequest
 */
export const QueryAllBackingRiskParamsRequest = new QueryAllBackingRiskParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllBackingRiskParamsResponse$Type extends MessageType<QueryAllBackingRiskParamsResponse> {
    constructor() {
        super("merlion.maker.v1.QueryAllBackingRiskParamsResponse", [
            { no: 1, name: "risk_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BackingRiskParams, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAllBackingRiskParamsResponse>): QueryAllBackingRiskParamsResponse {
        const message = { riskParams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllBackingRiskParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllBackingRiskParamsResponse): QueryAllBackingRiskParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated merlion.maker.v1.BackingRiskParams risk_params */ 1:
                    message.riskParams.push(BackingRiskParams.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllBackingRiskParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated merlion.maker.v1.BackingRiskParams risk_params = 1; */
        for (let i = 0; i < message.riskParams.length; i++)
            BackingRiskParams.internalBinaryWrite(message.riskParams[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllBackingRiskParamsResponse
 */
export const QueryAllBackingRiskParamsResponse = new QueryAllBackingRiskParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllCollateralRiskParamsRequest$Type extends MessageType<QueryAllCollateralRiskParamsRequest> {
    constructor() {
        super("merlion.maker.v1.QueryAllCollateralRiskParamsRequest", []);
    }
    create(value?: PartialMessage<QueryAllCollateralRiskParamsRequest>): QueryAllCollateralRiskParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllCollateralRiskParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllCollateralRiskParamsRequest): QueryAllCollateralRiskParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryAllCollateralRiskParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllCollateralRiskParamsRequest
 */
export const QueryAllCollateralRiskParamsRequest = new QueryAllCollateralRiskParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllCollateralRiskParamsResponse$Type extends MessageType<QueryAllCollateralRiskParamsResponse> {
    constructor() {
        super("merlion.maker.v1.QueryAllCollateralRiskParamsResponse", [
            { no: 1, name: "risk_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CollateralRiskParams, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAllCollateralRiskParamsResponse>): QueryAllCollateralRiskParamsResponse {
        const message = { riskParams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllCollateralRiskParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllCollateralRiskParamsResponse): QueryAllCollateralRiskParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated merlion.maker.v1.CollateralRiskParams risk_params */ 1:
                    message.riskParams.push(CollateralRiskParams.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllCollateralRiskParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated merlion.maker.v1.CollateralRiskParams risk_params = 1; */
        for (let i = 0; i < message.riskParams.length; i++)
            CollateralRiskParams.internalBinaryWrite(message.riskParams[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllCollateralRiskParamsResponse
 */
export const QueryAllCollateralRiskParamsResponse = new QueryAllCollateralRiskParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllBackingPoolsRequest$Type extends MessageType<QueryAllBackingPoolsRequest> {
    constructor() {
        super("merlion.maker.v1.QueryAllBackingPoolsRequest", []);
    }
    create(value?: PartialMessage<QueryAllBackingPoolsRequest>): QueryAllBackingPoolsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllBackingPoolsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllBackingPoolsRequest): QueryAllBackingPoolsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryAllBackingPoolsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllBackingPoolsRequest
 */
export const QueryAllBackingPoolsRequest = new QueryAllBackingPoolsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllBackingPoolsResponse$Type extends MessageType<QueryAllBackingPoolsResponse> {
    constructor() {
        super("merlion.maker.v1.QueryAllBackingPoolsResponse", [
            { no: 1, name: "backing_pools", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PoolBacking, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAllBackingPoolsResponse>): QueryAllBackingPoolsResponse {
        const message = { backingPools: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllBackingPoolsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllBackingPoolsResponse): QueryAllBackingPoolsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated merlion.maker.v1.PoolBacking backing_pools */ 1:
                    message.backingPools.push(PoolBacking.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllBackingPoolsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated merlion.maker.v1.PoolBacking backing_pools = 1; */
        for (let i = 0; i < message.backingPools.length; i++)
            PoolBacking.internalBinaryWrite(message.backingPools[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllBackingPoolsResponse
 */
export const QueryAllBackingPoolsResponse = new QueryAllBackingPoolsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllCollateralPoolsRequest$Type extends MessageType<QueryAllCollateralPoolsRequest> {
    constructor() {
        super("merlion.maker.v1.QueryAllCollateralPoolsRequest", []);
    }
    create(value?: PartialMessage<QueryAllCollateralPoolsRequest>): QueryAllCollateralPoolsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllCollateralPoolsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllCollateralPoolsRequest): QueryAllCollateralPoolsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryAllCollateralPoolsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllCollateralPoolsRequest
 */
export const QueryAllCollateralPoolsRequest = new QueryAllCollateralPoolsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllCollateralPoolsResponse$Type extends MessageType<QueryAllCollateralPoolsResponse> {
    constructor() {
        super("merlion.maker.v1.QueryAllCollateralPoolsResponse", [
            { no: 1, name: "collateral_pools", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PoolCollateral, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryAllCollateralPoolsResponse>): QueryAllCollateralPoolsResponse {
        const message = { collateralPools: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllCollateralPoolsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllCollateralPoolsResponse): QueryAllCollateralPoolsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated merlion.maker.v1.PoolCollateral collateral_pools */ 1:
                    message.collateralPools.push(PoolCollateral.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllCollateralPoolsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated merlion.maker.v1.PoolCollateral collateral_pools = 1; */
        for (let i = 0; i < message.collateralPools.length; i++)
            PoolCollateral.internalBinaryWrite(message.collateralPools[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryAllCollateralPoolsResponse
 */
export const QueryAllCollateralPoolsResponse = new QueryAllCollateralPoolsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBackingPoolRequest$Type extends MessageType<QueryBackingPoolRequest> {
    constructor() {
        super("merlion.maker.v1.QueryBackingPoolRequest", [
            { no: 1, name: "backing_denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryBackingPoolRequest>): QueryBackingPoolRequest {
        const message = { backingDenom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBackingPoolRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBackingPoolRequest): QueryBackingPoolRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string backing_denom */ 1:
                    message.backingDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBackingPoolRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string backing_denom = 1; */
        if (message.backingDenom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.backingDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryBackingPoolRequest
 */
export const QueryBackingPoolRequest = new QueryBackingPoolRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBackingPoolResponse$Type extends MessageType<QueryBackingPoolResponse> {
    constructor() {
        super("merlion.maker.v1.QueryBackingPoolResponse", [
            { no: 1, name: "backing_pool", kind: "message", T: () => PoolBacking, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryBackingPoolResponse>): QueryBackingPoolResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBackingPoolResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBackingPoolResponse): QueryBackingPoolResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.maker.v1.PoolBacking backing_pool */ 1:
                    message.backingPool = PoolBacking.internalBinaryRead(reader, reader.uint32(), options, message.backingPool);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBackingPoolResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.maker.v1.PoolBacking backing_pool = 1; */
        if (message.backingPool)
            PoolBacking.internalBinaryWrite(message.backingPool, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryBackingPoolResponse
 */
export const QueryBackingPoolResponse = new QueryBackingPoolResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCollateralPoolRequest$Type extends MessageType<QueryCollateralPoolRequest> {
    constructor() {
        super("merlion.maker.v1.QueryCollateralPoolRequest", [
            { no: 1, name: "collateral_denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryCollateralPoolRequest>): QueryCollateralPoolRequest {
        const message = { collateralDenom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCollateralPoolRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCollateralPoolRequest): QueryCollateralPoolRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string collateral_denom */ 1:
                    message.collateralDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCollateralPoolRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string collateral_denom = 1; */
        if (message.collateralDenom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.collateralDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryCollateralPoolRequest
 */
export const QueryCollateralPoolRequest = new QueryCollateralPoolRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCollateralPoolResponse$Type extends MessageType<QueryCollateralPoolResponse> {
    constructor() {
        super("merlion.maker.v1.QueryCollateralPoolResponse", [
            { no: 1, name: "collateral_pool", kind: "message", T: () => PoolCollateral, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryCollateralPoolResponse>): QueryCollateralPoolResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCollateralPoolResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCollateralPoolResponse): QueryCollateralPoolResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.maker.v1.PoolCollateral collateral_pool */ 1:
                    message.collateralPool = PoolCollateral.internalBinaryRead(reader, reader.uint32(), options, message.collateralPool);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCollateralPoolResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.maker.v1.PoolCollateral collateral_pool = 1; */
        if (message.collateralPool)
            PoolCollateral.internalBinaryWrite(message.collateralPool, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryCollateralPoolResponse
 */
export const QueryCollateralPoolResponse = new QueryCollateralPoolResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCollateralOfAccountRequest$Type extends MessageType<QueryCollateralOfAccountRequest> {
    constructor() {
        super("merlion.maker.v1.QueryCollateralOfAccountRequest", [
            { no: 1, name: "account", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "collateral_denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryCollateralOfAccountRequest>): QueryCollateralOfAccountRequest {
        const message = { account: "", collateralDenom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCollateralOfAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCollateralOfAccountRequest): QueryCollateralOfAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account */ 1:
                    message.account = reader.string();
                    break;
                case /* string collateral_denom */ 2:
                    message.collateralDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCollateralOfAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account = 1; */
        if (message.account !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.account);
        /* string collateral_denom = 2; */
        if (message.collateralDenom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.collateralDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryCollateralOfAccountRequest
 */
export const QueryCollateralOfAccountRequest = new QueryCollateralOfAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCollateralOfAccountResponse$Type extends MessageType<QueryCollateralOfAccountResponse> {
    constructor() {
        super("merlion.maker.v1.QueryCollateralOfAccountResponse", [
            { no: 1, name: "account_collateral", kind: "message", T: () => AccountCollateral, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryCollateralOfAccountResponse>): QueryCollateralOfAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCollateralOfAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCollateralOfAccountResponse): QueryCollateralOfAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.maker.v1.AccountCollateral account_collateral */ 1:
                    message.accountCollateral = AccountCollateral.internalBinaryRead(reader, reader.uint32(), options, message.accountCollateral);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCollateralOfAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.maker.v1.AccountCollateral account_collateral = 1; */
        if (message.accountCollateral)
            AccountCollateral.internalBinaryWrite(message.accountCollateral, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryCollateralOfAccountResponse
 */
export const QueryCollateralOfAccountResponse = new QueryCollateralOfAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalBackingRequest$Type extends MessageType<QueryTotalBackingRequest> {
    constructor() {
        super("merlion.maker.v1.QueryTotalBackingRequest", []);
    }
    create(value?: PartialMessage<QueryTotalBackingRequest>): QueryTotalBackingRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalBackingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalBackingRequest): QueryTotalBackingRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryTotalBackingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryTotalBackingRequest
 */
export const QueryTotalBackingRequest = new QueryTotalBackingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalBackingResponse$Type extends MessageType<QueryTotalBackingResponse> {
    constructor() {
        super("merlion.maker.v1.QueryTotalBackingResponse", [
            { no: 1, name: "total_backing", kind: "message", T: () => TotalBacking, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryTotalBackingResponse>): QueryTotalBackingResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalBackingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalBackingResponse): QueryTotalBackingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.maker.v1.TotalBacking total_backing */ 1:
                    message.totalBacking = TotalBacking.internalBinaryRead(reader, reader.uint32(), options, message.totalBacking);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTotalBackingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.maker.v1.TotalBacking total_backing = 1; */
        if (message.totalBacking)
            TotalBacking.internalBinaryWrite(message.totalBacking, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryTotalBackingResponse
 */
export const QueryTotalBackingResponse = new QueryTotalBackingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalCollateralRequest$Type extends MessageType<QueryTotalCollateralRequest> {
    constructor() {
        super("merlion.maker.v1.QueryTotalCollateralRequest", []);
    }
    create(value?: PartialMessage<QueryTotalCollateralRequest>): QueryTotalCollateralRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalCollateralRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalCollateralRequest): QueryTotalCollateralRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryTotalCollateralRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryTotalCollateralRequest
 */
export const QueryTotalCollateralRequest = new QueryTotalCollateralRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalCollateralResponse$Type extends MessageType<QueryTotalCollateralResponse> {
    constructor() {
        super("merlion.maker.v1.QueryTotalCollateralResponse", [
            { no: 1, name: "total_collateral", kind: "message", T: () => TotalCollateral, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryTotalCollateralResponse>): QueryTotalCollateralResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalCollateralResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalCollateralResponse): QueryTotalCollateralResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.maker.v1.TotalCollateral total_collateral */ 1:
                    message.totalCollateral = TotalCollateral.internalBinaryRead(reader, reader.uint32(), options, message.totalCollateral);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTotalCollateralResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.maker.v1.TotalCollateral total_collateral = 1; */
        if (message.totalCollateral)
            TotalCollateral.internalBinaryWrite(message.totalCollateral, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryTotalCollateralResponse
 */
export const QueryTotalCollateralResponse = new QueryTotalCollateralResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCollateralRatioRequest$Type extends MessageType<QueryCollateralRatioRequest> {
    constructor() {
        super("merlion.maker.v1.QueryCollateralRatioRequest", []);
    }
    create(value?: PartialMessage<QueryCollateralRatioRequest>): QueryCollateralRatioRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCollateralRatioRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCollateralRatioRequest): QueryCollateralRatioRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryCollateralRatioRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryCollateralRatioRequest
 */
export const QueryCollateralRatioRequest = new QueryCollateralRatioRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCollateralRatioResponse$Type extends MessageType<QueryCollateralRatioResponse> {
    constructor() {
        super("merlion.maker.v1.QueryCollateralRatioResponse", [
            { no: 1, name: "collateral_ratio", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } },
            { no: 2, name: "last_update_block", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryCollateralRatioResponse>): QueryCollateralRatioResponse {
        const message = { collateralRatio: "", lastUpdateBlock: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCollateralRatioResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCollateralRatioResponse): QueryCollateralRatioResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string collateral_ratio */ 1:
                    message.collateralRatio = reader.string();
                    break;
                case /* int64 last_update_block */ 2:
                    message.lastUpdateBlock = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCollateralRatioResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string collateral_ratio = 1; */
        if (message.collateralRatio !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.collateralRatio);
        /* int64 last_update_block = 2; */
        if (message.lastUpdateBlock !== "0")
            writer.tag(2, WireType.Varint).int64(message.lastUpdateBlock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryCollateralRatioResponse
 */
export const QueryCollateralRatioResponse = new QueryCollateralRatioResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("merlion.maker.v1.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("merlion.maker.v1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* merlion.maker.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* merlion.maker.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.maker.v1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
/**
 * @generated ServiceType for protobuf service merlion.maker.v1.Query
 */
export const Query = new ServiceType("merlion.maker.v1.Query", [
    { name: "AllBackingRiskParams", options: { "google.api.http": { get: "/merlion/maker/v1/all_backing_risk_params" } }, I: QueryAllBackingRiskParamsRequest, O: QueryAllBackingRiskParamsResponse },
    { name: "AllCollateralRiskParams", options: { "google.api.http": { get: "/merlion/maker/v1/all_collateral_risk_params" } }, I: QueryAllCollateralRiskParamsRequest, O: QueryAllCollateralRiskParamsResponse },
    { name: "AllBackingPools", options: { "google.api.http": { get: "/merlion/maker/v1/all_backing_pools" } }, I: QueryAllBackingPoolsRequest, O: QueryAllBackingPoolsResponse },
    { name: "AllCollateralPools", options: { "google.api.http": { get: "/merlion/maker/v1/all_collateral_pools" } }, I: QueryAllCollateralPoolsRequest, O: QueryAllCollateralPoolsResponse },
    { name: "BackingPool", options: { "google.api.http": { get: "/merlion/maker/v1/backing_pool" } }, I: QueryBackingPoolRequest, O: QueryBackingPoolResponse },
    { name: "CollateralPool", options: { "google.api.http": { get: "/merlion/maker/v1/collateral_pool" } }, I: QueryCollateralPoolRequest, O: QueryCollateralPoolResponse },
    { name: "CollateralOfAccount", options: { "google.api.http": { get: "/merlion/maker/v1/collateral_account" } }, I: QueryCollateralOfAccountRequest, O: QueryCollateralOfAccountResponse },
    { name: "TotalBacking", options: { "google.api.http": { get: "/merlion/maker/v1/total_backing" } }, I: QueryTotalBackingRequest, O: QueryTotalBackingResponse },
    { name: "TotalCollateral", options: { "google.api.http": { get: "/merlion/maker/v1/total_collateral" } }, I: QueryTotalCollateralRequest, O: QueryTotalCollateralResponse },
    { name: "CollateralRatio", options: { "google.api.http": { get: "/merlion/maker/v1/collateral_ratio" } }, I: QueryCollateralRatioRequest, O: QueryCollateralRatioResponse },
    { name: "Params", options: { "google.api.http": { get: "/merlion/maker/v1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse }
]);
