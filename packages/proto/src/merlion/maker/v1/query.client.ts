// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/maker/v1/query.proto" (package "merlion.maker.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { EstimateBurnByCollateralInResponse } from "./query";
import type { EstimateBurnByCollateralInRequest } from "./query";
import type { EstimateMintByCollateralInResponse } from "./query";
import type { EstimateMintByCollateralInRequest } from "./query";
import type { EstimateSellBackingOutResponse } from "./query";
import type { EstimateSellBackingOutRequest } from "./query";
import type { EstimateBuyBackingOutResponse } from "./query";
import type { EstimateBuyBackingOutRequest } from "./query";
import type { EstimateBurnBySwapOutResponse } from "./query";
import type { EstimateBurnBySwapOutRequest } from "./query";
import type { EstimateMintBySwapOutResponse } from "./query";
import type { EstimateMintBySwapOutRequest } from "./query";
import type { EstimateMintBySwapInResponse } from "./query";
import type { EstimateMintBySwapInRequest } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { QueryBackingRatioResponse } from "./query";
import type { QueryBackingRatioRequest } from "./query";
import type { QueryTotalCollateralResponse } from "./query";
import type { QueryTotalCollateralRequest } from "./query";
import type { QueryTotalBackingResponse } from "./query";
import type { QueryTotalBackingRequest } from "./query";
import type { QueryCollateralOfAccountResponse } from "./query";
import type { QueryCollateralOfAccountRequest } from "./query";
import type { QueryCollateralPoolResponse } from "./query";
import type { QueryCollateralPoolRequest } from "./query";
import type { QueryBackingPoolResponse } from "./query";
import type { QueryBackingPoolRequest } from "./query";
import type { QueryAllCollateralPoolsResponse } from "./query";
import type { QueryAllCollateralPoolsRequest } from "./query";
import type { QueryAllBackingPoolsResponse } from "./query";
import type { QueryAllBackingPoolsRequest } from "./query";
import type { QueryAllCollateralRiskParamsResponse } from "./query";
import type { QueryAllCollateralRiskParamsRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryAllBackingRiskParamsResponse } from "./query";
import type { QueryAllBackingRiskParamsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the maker gRPC querier service.
 *
 * @generated from protobuf service merlion.maker.v1.Query
 */
export interface IQueryClient {
    /**
     * AllBackingRiskParams queries risk params of all the backing pools.
     *
     * @generated from protobuf rpc: AllBackingRiskParams(merlion.maker.v1.QueryAllBackingRiskParamsRequest) returns (merlion.maker.v1.QueryAllBackingRiskParamsResponse);
     */
    allBackingRiskParams(input: QueryAllBackingRiskParamsRequest, options?: RpcOptions): UnaryCall<QueryAllBackingRiskParamsRequest, QueryAllBackingRiskParamsResponse>;
    /**
     * AllCollateralRiskParams queries risk params of all the collateral pools.
     *
     * @generated from protobuf rpc: AllCollateralRiskParams(merlion.maker.v1.QueryAllCollateralRiskParamsRequest) returns (merlion.maker.v1.QueryAllCollateralRiskParamsResponse);
     */
    allCollateralRiskParams(input: QueryAllCollateralRiskParamsRequest, options?: RpcOptions): UnaryCall<QueryAllCollateralRiskParamsRequest, QueryAllCollateralRiskParamsResponse>;
    /**
     * AllBackingPools queries all the backing pools.
     *
     * @generated from protobuf rpc: AllBackingPools(merlion.maker.v1.QueryAllBackingPoolsRequest) returns (merlion.maker.v1.QueryAllBackingPoolsResponse);
     */
    allBackingPools(input: QueryAllBackingPoolsRequest, options?: RpcOptions): UnaryCall<QueryAllBackingPoolsRequest, QueryAllBackingPoolsResponse>;
    /**
     * AllCollateralPools queries all the collateral pools.
     *
     * @generated from protobuf rpc: AllCollateralPools(merlion.maker.v1.QueryAllCollateralPoolsRequest) returns (merlion.maker.v1.QueryAllCollateralPoolsResponse);
     */
    allCollateralPools(input: QueryAllCollateralPoolsRequest, options?: RpcOptions): UnaryCall<QueryAllCollateralPoolsRequest, QueryAllCollateralPoolsResponse>;
    /**
     * BackingPool queries a backing pool.
     *
     * @generated from protobuf rpc: BackingPool(merlion.maker.v1.QueryBackingPoolRequest) returns (merlion.maker.v1.QueryBackingPoolResponse);
     */
    backingPool(input: QueryBackingPoolRequest, options?: RpcOptions): UnaryCall<QueryBackingPoolRequest, QueryBackingPoolResponse>;
    /**
     * CollateralPool queries a collateral pool.
     *
     * @generated from protobuf rpc: CollateralPool(merlion.maker.v1.QueryCollateralPoolRequest) returns (merlion.maker.v1.QueryCollateralPoolResponse);
     */
    collateralPool(input: QueryCollateralPoolRequest, options?: RpcOptions): UnaryCall<QueryCollateralPoolRequest, QueryCollateralPoolResponse>;
    /**
     * CollateralOfAccount queries the collateral of an account.
     *
     * @generated from protobuf rpc: CollateralOfAccount(merlion.maker.v1.QueryCollateralOfAccountRequest) returns (merlion.maker.v1.QueryCollateralOfAccountResponse);
     */
    collateralOfAccount(input: QueryCollateralOfAccountRequest, options?: RpcOptions): UnaryCall<QueryCollateralOfAccountRequest, QueryCollateralOfAccountResponse>;
    /**
     * TotalBacking queries the total backing.
     *
     * @generated from protobuf rpc: TotalBacking(merlion.maker.v1.QueryTotalBackingRequest) returns (merlion.maker.v1.QueryTotalBackingResponse);
     */
    totalBacking(input: QueryTotalBackingRequest, options?: RpcOptions): UnaryCall<QueryTotalBackingRequest, QueryTotalBackingResponse>;
    /**
     * TotalCollateral queries the total collateral.
     *
     * @generated from protobuf rpc: TotalCollateral(merlion.maker.v1.QueryTotalCollateralRequest) returns (merlion.maker.v1.QueryTotalCollateralResponse);
     */
    totalCollateral(input: QueryTotalCollateralRequest, options?: RpcOptions): UnaryCall<QueryTotalCollateralRequest, QueryTotalCollateralResponse>;
    /**
     * BackingRatio queries the backing ratio.
     *
     * @generated from protobuf rpc: BackingRatio(merlion.maker.v1.QueryBackingRatioRequest) returns (merlion.maker.v1.QueryBackingRatioResponse);
     */
    backingRatio(input: QueryBackingRatioRequest, options?: RpcOptions): UnaryCall<QueryBackingRatioRequest, QueryBackingRatioResponse>;
    /**
     * Parameters queries the parameters of the module.
     *
     * @generated from protobuf rpc: Params(merlion.maker.v1.QueryParamsRequest) returns (merlion.maker.v1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * EstimateMintBySwapIn estimates input of minting by swap.
     *
     * @generated from protobuf rpc: EstimateMintBySwapIn(merlion.maker.v1.EstimateMintBySwapInRequest) returns (merlion.maker.v1.EstimateMintBySwapInResponse);
     */
    estimateMintBySwapIn(input: EstimateMintBySwapInRequest, options?: RpcOptions): UnaryCall<EstimateMintBySwapInRequest, EstimateMintBySwapInResponse>;
    /**
     * EstimateMintBySwapOut estimates output of minting by swap.
     *
     * @generated from protobuf rpc: EstimateMintBySwapOut(merlion.maker.v1.EstimateMintBySwapOutRequest) returns (merlion.maker.v1.EstimateMintBySwapOutResponse);
     */
    estimateMintBySwapOut(input: EstimateMintBySwapOutRequest, options?: RpcOptions): UnaryCall<EstimateMintBySwapOutRequest, EstimateMintBySwapOutResponse>;
    /**
     * EstimateBurnBySwapOut estimates output of burning by swap.
     *
     * @generated from protobuf rpc: EstimateBurnBySwapOut(merlion.maker.v1.EstimateBurnBySwapOutRequest) returns (merlion.maker.v1.EstimateBurnBySwapOutResponse);
     */
    estimateBurnBySwapOut(input: EstimateBurnBySwapOutRequest, options?: RpcOptions): UnaryCall<EstimateBurnBySwapOutRequest, EstimateBurnBySwapOutResponse>;
    /**
     * EstimateBuyBackingOut estimates output of buying backing assets.
     *
     * @generated from protobuf rpc: EstimateBuyBackingOut(merlion.maker.v1.EstimateBuyBackingOutRequest) returns (merlion.maker.v1.EstimateBuyBackingOutResponse);
     */
    estimateBuyBackingOut(input: EstimateBuyBackingOutRequest, options?: RpcOptions): UnaryCall<EstimateBuyBackingOutRequest, EstimateBuyBackingOutResponse>;
    /**
     * EstimateSellBackingOut estimates output of selling backing assets.
     *
     * @generated from protobuf rpc: EstimateSellBackingOut(merlion.maker.v1.EstimateSellBackingOutRequest) returns (merlion.maker.v1.EstimateSellBackingOutResponse);
     */
    estimateSellBackingOut(input: EstimateSellBackingOutRequest, options?: RpcOptions): UnaryCall<EstimateSellBackingOutRequest, EstimateSellBackingOutResponse>;
    /**
     * EstimateMintByCollateralIn estimates input of minting by collateral.
     *
     * @generated from protobuf rpc: EstimateMintByCollateralIn(merlion.maker.v1.EstimateMintByCollateralInRequest) returns (merlion.maker.v1.EstimateMintByCollateralInResponse);
     */
    estimateMintByCollateralIn(input: EstimateMintByCollateralInRequest, options?: RpcOptions): UnaryCall<EstimateMintByCollateralInRequest, EstimateMintByCollateralInResponse>;
    /**
     * EstimateBurnByCollateralIn estimates input of burning by collateral.
     *
     * @generated from protobuf rpc: EstimateBurnByCollateralIn(merlion.maker.v1.EstimateBurnByCollateralInRequest) returns (merlion.maker.v1.EstimateBurnByCollateralInResponse);
     */
    estimateBurnByCollateralIn(input: EstimateBurnByCollateralInRequest, options?: RpcOptions): UnaryCall<EstimateBurnByCollateralInRequest, EstimateBurnByCollateralInResponse>;
}
/**
 * Query defines the maker gRPC querier service.
 *
 * @generated from protobuf service merlion.maker.v1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * AllBackingRiskParams queries risk params of all the backing pools.
     *
     * @generated from protobuf rpc: AllBackingRiskParams(merlion.maker.v1.QueryAllBackingRiskParamsRequest) returns (merlion.maker.v1.QueryAllBackingRiskParamsResponse);
     */
    allBackingRiskParams(input: QueryAllBackingRiskParamsRequest, options?: RpcOptions): UnaryCall<QueryAllBackingRiskParamsRequest, QueryAllBackingRiskParamsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllBackingRiskParamsRequest, QueryAllBackingRiskParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AllCollateralRiskParams queries risk params of all the collateral pools.
     *
     * @generated from protobuf rpc: AllCollateralRiskParams(merlion.maker.v1.QueryAllCollateralRiskParamsRequest) returns (merlion.maker.v1.QueryAllCollateralRiskParamsResponse);
     */
    allCollateralRiskParams(input: QueryAllCollateralRiskParamsRequest, options?: RpcOptions): UnaryCall<QueryAllCollateralRiskParamsRequest, QueryAllCollateralRiskParamsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllCollateralRiskParamsRequest, QueryAllCollateralRiskParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AllBackingPools queries all the backing pools.
     *
     * @generated from protobuf rpc: AllBackingPools(merlion.maker.v1.QueryAllBackingPoolsRequest) returns (merlion.maker.v1.QueryAllBackingPoolsResponse);
     */
    allBackingPools(input: QueryAllBackingPoolsRequest, options?: RpcOptions): UnaryCall<QueryAllBackingPoolsRequest, QueryAllBackingPoolsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllBackingPoolsRequest, QueryAllBackingPoolsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AllCollateralPools queries all the collateral pools.
     *
     * @generated from protobuf rpc: AllCollateralPools(merlion.maker.v1.QueryAllCollateralPoolsRequest) returns (merlion.maker.v1.QueryAllCollateralPoolsResponse);
     */
    allCollateralPools(input: QueryAllCollateralPoolsRequest, options?: RpcOptions): UnaryCall<QueryAllCollateralPoolsRequest, QueryAllCollateralPoolsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllCollateralPoolsRequest, QueryAllCollateralPoolsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BackingPool queries a backing pool.
     *
     * @generated from protobuf rpc: BackingPool(merlion.maker.v1.QueryBackingPoolRequest) returns (merlion.maker.v1.QueryBackingPoolResponse);
     */
    backingPool(input: QueryBackingPoolRequest, options?: RpcOptions): UnaryCall<QueryBackingPoolRequest, QueryBackingPoolResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryBackingPoolRequest, QueryBackingPoolResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CollateralPool queries a collateral pool.
     *
     * @generated from protobuf rpc: CollateralPool(merlion.maker.v1.QueryCollateralPoolRequest) returns (merlion.maker.v1.QueryCollateralPoolResponse);
     */
    collateralPool(input: QueryCollateralPoolRequest, options?: RpcOptions): UnaryCall<QueryCollateralPoolRequest, QueryCollateralPoolResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryCollateralPoolRequest, QueryCollateralPoolResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CollateralOfAccount queries the collateral of an account.
     *
     * @generated from protobuf rpc: CollateralOfAccount(merlion.maker.v1.QueryCollateralOfAccountRequest) returns (merlion.maker.v1.QueryCollateralOfAccountResponse);
     */
    collateralOfAccount(input: QueryCollateralOfAccountRequest, options?: RpcOptions): UnaryCall<QueryCollateralOfAccountRequest, QueryCollateralOfAccountResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryCollateralOfAccountRequest, QueryCollateralOfAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * TotalBacking queries the total backing.
     *
     * @generated from protobuf rpc: TotalBacking(merlion.maker.v1.QueryTotalBackingRequest) returns (merlion.maker.v1.QueryTotalBackingResponse);
     */
    totalBacking(input: QueryTotalBackingRequest, options?: RpcOptions): UnaryCall<QueryTotalBackingRequest, QueryTotalBackingResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTotalBackingRequest, QueryTotalBackingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * TotalCollateral queries the total collateral.
     *
     * @generated from protobuf rpc: TotalCollateral(merlion.maker.v1.QueryTotalCollateralRequest) returns (merlion.maker.v1.QueryTotalCollateralResponse);
     */
    totalCollateral(input: QueryTotalCollateralRequest, options?: RpcOptions): UnaryCall<QueryTotalCollateralRequest, QueryTotalCollateralResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTotalCollateralRequest, QueryTotalCollateralResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BackingRatio queries the backing ratio.
     *
     * @generated from protobuf rpc: BackingRatio(merlion.maker.v1.QueryBackingRatioRequest) returns (merlion.maker.v1.QueryBackingRatioResponse);
     */
    backingRatio(input: QueryBackingRatioRequest, options?: RpcOptions): UnaryCall<QueryBackingRatioRequest, QueryBackingRatioResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryBackingRatioRequest, QueryBackingRatioResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Parameters queries the parameters of the module.
     *
     * @generated from protobuf rpc: Params(merlion.maker.v1.QueryParamsRequest) returns (merlion.maker.v1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EstimateMintBySwapIn estimates input of minting by swap.
     *
     * @generated from protobuf rpc: EstimateMintBySwapIn(merlion.maker.v1.EstimateMintBySwapInRequest) returns (merlion.maker.v1.EstimateMintBySwapInResponse);
     */
    estimateMintBySwapIn(input: EstimateMintBySwapInRequest, options?: RpcOptions): UnaryCall<EstimateMintBySwapInRequest, EstimateMintBySwapInResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateMintBySwapInRequest, EstimateMintBySwapInResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EstimateMintBySwapOut estimates output of minting by swap.
     *
     * @generated from protobuf rpc: EstimateMintBySwapOut(merlion.maker.v1.EstimateMintBySwapOutRequest) returns (merlion.maker.v1.EstimateMintBySwapOutResponse);
     */
    estimateMintBySwapOut(input: EstimateMintBySwapOutRequest, options?: RpcOptions): UnaryCall<EstimateMintBySwapOutRequest, EstimateMintBySwapOutResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateMintBySwapOutRequest, EstimateMintBySwapOutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EstimateBurnBySwapOut estimates output of burning by swap.
     *
     * @generated from protobuf rpc: EstimateBurnBySwapOut(merlion.maker.v1.EstimateBurnBySwapOutRequest) returns (merlion.maker.v1.EstimateBurnBySwapOutResponse);
     */
    estimateBurnBySwapOut(input: EstimateBurnBySwapOutRequest, options?: RpcOptions): UnaryCall<EstimateBurnBySwapOutRequest, EstimateBurnBySwapOutResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateBurnBySwapOutRequest, EstimateBurnBySwapOutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EstimateBuyBackingOut estimates output of buying backing assets.
     *
     * @generated from protobuf rpc: EstimateBuyBackingOut(merlion.maker.v1.EstimateBuyBackingOutRequest) returns (merlion.maker.v1.EstimateBuyBackingOutResponse);
     */
    estimateBuyBackingOut(input: EstimateBuyBackingOutRequest, options?: RpcOptions): UnaryCall<EstimateBuyBackingOutRequest, EstimateBuyBackingOutResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateBuyBackingOutRequest, EstimateBuyBackingOutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EstimateSellBackingOut estimates output of selling backing assets.
     *
     * @generated from protobuf rpc: EstimateSellBackingOut(merlion.maker.v1.EstimateSellBackingOutRequest) returns (merlion.maker.v1.EstimateSellBackingOutResponse);
     */
    estimateSellBackingOut(input: EstimateSellBackingOutRequest, options?: RpcOptions): UnaryCall<EstimateSellBackingOutRequest, EstimateSellBackingOutResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateSellBackingOutRequest, EstimateSellBackingOutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EstimateMintByCollateralIn estimates input of minting by collateral.
     *
     * @generated from protobuf rpc: EstimateMintByCollateralIn(merlion.maker.v1.EstimateMintByCollateralInRequest) returns (merlion.maker.v1.EstimateMintByCollateralInResponse);
     */
    estimateMintByCollateralIn(input: EstimateMintByCollateralInRequest, options?: RpcOptions): UnaryCall<EstimateMintByCollateralInRequest, EstimateMintByCollateralInResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateMintByCollateralInRequest, EstimateMintByCollateralInResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EstimateBurnByCollateralIn estimates input of burning by collateral.
     *
     * @generated from protobuf rpc: EstimateBurnByCollateralIn(merlion.maker.v1.EstimateBurnByCollateralInRequest) returns (merlion.maker.v1.EstimateBurnByCollateralInResponse);
     */
    estimateBurnByCollateralIn(input: EstimateBurnByCollateralInRequest, options?: RpcOptions): UnaryCall<EstimateBurnByCollateralInRequest, EstimateBurnByCollateralInResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateBurnByCollateralInRequest, EstimateBurnByCollateralInResponse>("unary", this._transport, method, opt, input);
    }
}
