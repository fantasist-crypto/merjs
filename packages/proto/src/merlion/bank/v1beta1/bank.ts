// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "merlion/bank/v1beta1/bank.proto" (package "merlion.bank.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank";
/**
 * SetDenomMetaDataProposal is a gov Content type to register a DenomMetaData
 *
 * @generated from protobuf message merlion.bank.v1beta1.SetDenomMetadataProposal
 */
export interface SetDenomMetadataProposal {
    /**
     * title of the proposal
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * proposal description
     *
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * token pair of Cosmos native denom and ERC20 token address
     *
     * @generated from protobuf field: cosmos.bank.v1beta1.Metadata metadata = 3;
     */
    metadata?: Metadata;
}
// @generated message type with reflection information, may provide speed optimized methods
class SetDenomMetadataProposal$Type extends MessageType<SetDenomMetadataProposal> {
    constructor() {
        super("merlion.bank.v1beta1.SetDenomMetadataProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "metadata", kind: "message", T: () => Metadata, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.equal": false });
    }
    create(value?: PartialMessage<SetDenomMetadataProposal>): SetDenomMetadataProposal {
        const message = { title: "", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetDenomMetadataProposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetDenomMetadataProposal): SetDenomMetadataProposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* cosmos.bank.v1beta1.Metadata metadata */ 3:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetDenomMetadataProposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* cosmos.bank.v1beta1.Metadata metadata = 3; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message merlion.bank.v1beta1.SetDenomMetadataProposal
 */
export const SetDenomMetadataProposal = new SetDenomMetadataProposal$Type();
