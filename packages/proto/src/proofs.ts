// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "proofs.proto" (package "ics23", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * *
 * ExistenceProof takes a key and a value and a set of steps to perform on it.
 * The result of peforming all these steps will provide a "root hash", which can
 * be compared to the value in a header.
 *
 * Since it is computationally infeasible to produce a hash collission for any of the used
 * cryptographic hash functions, if someone can provide a series of operations to transform
 * a given key and value into a root hash that matches some trusted root, these key and values
 * must be in the referenced merkle tree.
 *
 * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
 * which should be controlled by a spec. Eg. with lengthOp as NONE,
 * prefix = FOO, key = BAR, value = CHOICE
 * and
 * prefix = F, key = OOBAR, value = CHOICE
 * would produce the same value.
 *
 * With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
 * in the ProofSpec is valuable to prevent this mutability. And why all trees should
 * length-prefix the data before hashing it.
 *
 * @generated from protobuf message ics23.ExistenceProof
 */
export interface ExistenceProof {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
    /**
     * @generated from protobuf field: ics23.LeafOp leaf = 3;
     */
    leaf?: LeafOp;
    /**
     * @generated from protobuf field: repeated ics23.InnerOp path = 4;
     */
    path: InnerOp[];
}
/**
 *
 * NonExistenceProof takes a proof of two neighbors, one left of the desired key,
 * one right of the desired key. If both proofs are valid AND they are neighbors,
 * then there is no valid proof for the given key.
 *
 * @generated from protobuf message ics23.NonExistenceProof
 */
export interface NonExistenceProof {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array; // TODO: remove this as unnecessary??? we prove a range
    /**
     * @generated from protobuf field: ics23.ExistenceProof left = 2;
     */
    left?: ExistenceProof;
    /**
     * @generated from protobuf field: ics23.ExistenceProof right = 3;
     */
    right?: ExistenceProof;
}
/**
 *
 * CommitmentProof is either an ExistenceProof or a NonExistenceProof, or a Batch of such messages
 *
 * @generated from protobuf message ics23.CommitmentProof
 */
export interface CommitmentProof {
    /**
     * @generated from protobuf oneof: proof
     */
    proof: {
        oneofKind: "exist";
        /**
         * @generated from protobuf field: ics23.ExistenceProof exist = 1;
         */
        exist: ExistenceProof;
    } | {
        oneofKind: "nonexist";
        /**
         * @generated from protobuf field: ics23.NonExistenceProof nonexist = 2;
         */
        nonexist: NonExistenceProof;
    } | {
        oneofKind: "batch";
        /**
         * @generated from protobuf field: ics23.BatchProof batch = 3;
         */
        batch: BatchProof;
    } | {
        oneofKind: "compressed";
        /**
         * @generated from protobuf field: ics23.CompressedBatchProof compressed = 4;
         */
        compressed: CompressedBatchProof;
    } | {
        oneofKind: undefined;
    };
}
/**
 * *
 * LeafOp represents the raw key-value data we wish to prove, and
 * must be flexible to represent the internal transformation from
 * the original key-value pairs into the basis hash, for many existing
 * merkle trees.
 *
 * key and value are passed in. So that the signature of this operation is:
 * leafOp(key, value) -> output
 *
 * To process this, first prehash the keys and values if needed (ANY means no hash in this case):
 * hkey = prehashKey(key)
 * hvalue = prehashValue(value)
 *
 * Then combine the bytes, and hash it
 * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
 *
 * @generated from protobuf message ics23.LeafOp
 */
export interface LeafOp {
    /**
     * @generated from protobuf field: ics23.HashOp hash = 1;
     */
    hash: HashOp;
    /**
     * @generated from protobuf field: ics23.HashOp prehash_key = 2;
     */
    prehashKey: HashOp;
    /**
     * @generated from protobuf field: ics23.HashOp prehash_value = 3;
     */
    prehashValue: HashOp;
    /**
     * @generated from protobuf field: ics23.LengthOp length = 4;
     */
    length: LengthOp;
    /**
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     *
     * @generated from protobuf field: bytes prefix = 5;
     */
    prefix: Uint8Array;
}
/**
 * *
 * InnerOp represents a merkle-proof step that is not a leaf.
 * It represents concatenating two children and hashing them to provide the next result.
 *
 * The result of the previous step is passed in, so the signature of this op is:
 * innerOp(child) -> output
 *
 * The result of applying InnerOp should be:
 * output = op.hash(op.prefix || child || op.suffix)
 *
 * where the || operator is concatenation of binary data,
 * and child is the result of hashing all the tree below this step.
 *
 * Any special data, like prepending child with the length, or prepending the entire operation with
 * some value to differentiate from leaf nodes, should be included in prefix and suffix.
 * If either of prefix or suffix is empty, we just treat it as an empty string
 *
 * @generated from protobuf message ics23.InnerOp
 */
export interface InnerOp {
    /**
     * @generated from protobuf field: ics23.HashOp hash = 1;
     */
    hash: HashOp;
    /**
     * @generated from protobuf field: bytes prefix = 2;
     */
    prefix: Uint8Array;
    /**
     * @generated from protobuf field: bytes suffix = 3;
     */
    suffix: Uint8Array;
}
/**
 * *
 * ProofSpec defines what the expected parameters are for a given proof type.
 * This can be stored in the client and used to validate any incoming proofs.
 *
 * verify(ProofSpec, Proof) -> Proof | Error
 *
 * As demonstrated in tests, if we don't fix the algorithm used to calculate the
 * LeafHash for a given tree, there are many possible key-value pairs that can
 * generate a given hash (by interpretting the preimage differently).
 * We need this for proper security, requires client knows a priori what
 * tree format server uses. But not in code, rather a configuration object.
 *
 * @generated from protobuf message ics23.ProofSpec
 */
export interface ProofSpec {
    /**
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     *
     * @generated from protobuf field: ics23.LeafOp leaf_spec = 1;
     */
    leafSpec?: LeafOp;
    /**
     * @generated from protobuf field: ics23.InnerSpec inner_spec = 2;
     */
    innerSpec?: InnerSpec;
    /**
     * max_depth (if > 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
     *
     * @generated from protobuf field: int32 max_depth = 3;
     */
    maxDepth: number;
    /**
     * min_depth (if > 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
     *
     * @generated from protobuf field: int32 min_depth = 4;
     */
    minDepth: number;
}
/**
 *
 * InnerSpec contains all store-specific structure info to determine if two proofs from a
 * given store are neighbors.
 *
 * This enables:
 *
 * isLeftMost(spec: InnerSpec, op: InnerOp)
 * isRightMost(spec: InnerSpec, op: InnerOp)
 * isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
 *
 * @generated from protobuf message ics23.InnerSpec
 */
export interface InnerSpec {
    /**
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     *
     * @generated from protobuf field: repeated int32 child_order = 1;
     */
    childOrder: number[];
    /**
     * @generated from protobuf field: int32 child_size = 2;
     */
    childSize: number;
    /**
     * @generated from protobuf field: int32 min_prefix_length = 3;
     */
    minPrefixLength: number;
    /**
     * @generated from protobuf field: int32 max_prefix_length = 4;
     */
    maxPrefixLength: number;
    /**
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     *
     * @generated from protobuf field: bytes empty_child = 5;
     */
    emptyChild: Uint8Array;
    /**
     * hash is the algorithm that must be used for each InnerOp
     *
     * @generated from protobuf field: ics23.HashOp hash = 6;
     */
    hash: HashOp;
}
/**
 *
 * BatchProof is a group of multiple proof types than can be compressed
 *
 * @generated from protobuf message ics23.BatchProof
 */
export interface BatchProof {
    /**
     * @generated from protobuf field: repeated ics23.BatchEntry entries = 1;
     */
    entries: BatchEntry[];
}
/**
 * Use BatchEntry not CommitmentProof, to avoid recursion
 *
 * @generated from protobuf message ics23.BatchEntry
 */
export interface BatchEntry {
    /**
     * @generated from protobuf oneof: proof
     */
    proof: {
        oneofKind: "exist";
        /**
         * @generated from protobuf field: ics23.ExistenceProof exist = 1;
         */
        exist: ExistenceProof;
    } | {
        oneofKind: "nonexist";
        /**
         * @generated from protobuf field: ics23.NonExistenceProof nonexist = 2;
         */
        nonexist: NonExistenceProof;
    } | {
        oneofKind: undefined;
    };
}
// ***** all items here are compressed forms ******

/**
 * @generated from protobuf message ics23.CompressedBatchProof
 */
export interface CompressedBatchProof {
    /**
     * @generated from protobuf field: repeated ics23.CompressedBatchEntry entries = 1;
     */
    entries: CompressedBatchEntry[];
    /**
     * @generated from protobuf field: repeated ics23.InnerOp lookup_inners = 2;
     */
    lookupInners: InnerOp[];
}
/**
 * Use BatchEntry not CommitmentProof, to avoid recursion
 *
 * @generated from protobuf message ics23.CompressedBatchEntry
 */
export interface CompressedBatchEntry {
    /**
     * @generated from protobuf oneof: proof
     */
    proof: {
        oneofKind: "exist";
        /**
         * @generated from protobuf field: ics23.CompressedExistenceProof exist = 1;
         */
        exist: CompressedExistenceProof;
    } | {
        oneofKind: "nonexist";
        /**
         * @generated from protobuf field: ics23.CompressedNonExistenceProof nonexist = 2;
         */
        nonexist: CompressedNonExistenceProof;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ics23.CompressedExistenceProof
 */
export interface CompressedExistenceProof {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
    /**
     * @generated from protobuf field: ics23.LeafOp leaf = 3;
     */
    leaf?: LeafOp;
    /**
     * these are indexes into the lookup_inners table in CompressedBatchProof
     *
     * @generated from protobuf field: repeated int32 path = 4;
     */
    path: number[];
}
/**
 * @generated from protobuf message ics23.CompressedNonExistenceProof
 */
export interface CompressedNonExistenceProof {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array; // TODO: remove this as unnecessary??? we prove a range
    /**
     * @generated from protobuf field: ics23.CompressedExistenceProof left = 2;
     */
    left?: CompressedExistenceProof;
    /**
     * @generated from protobuf field: ics23.CompressedExistenceProof right = 3;
     */
    right?: CompressedExistenceProof;
}
/**
 * @generated from protobuf enum ics23.HashOp
 */
export enum HashOp {
    /**
     * NO_HASH is the default if no data passed. Note this is an illegal argument some places.
     *
     * @generated from protobuf enum value: NO_HASH = 0;
     */
    NO_HASH = 0,
    /**
     * @generated from protobuf enum value: SHA256 = 1;
     */
    SHA256 = 1,
    /**
     * @generated from protobuf enum value: SHA512 = 2;
     */
    SHA512 = 2,
    /**
     * @generated from protobuf enum value: KECCAK = 3;
     */
    KECCAK = 3,
    /**
     * @generated from protobuf enum value: RIPEMD160 = 4;
     */
    RIPEMD160 = 4,
    /**
     * ripemd160(sha256(x))
     *
     * @generated from protobuf enum value: BITCOIN = 5;
     */
    BITCOIN = 5
}
/**
 * *
 * LengthOp defines how to process the key and value of the LeafOp
 * to include length information. After encoding the length with the given
 * algorithm, the length will be prepended to the key and value bytes.
 * (Each one with it's own encoded length)
 *
 * @generated from protobuf enum ics23.LengthOp
 */
export enum LengthOp {
    /**
     * NO_PREFIX don't include any length info
     *
     * @generated from protobuf enum value: NO_PREFIX = 0;
     */
    NO_PREFIX = 0,
    /**
     * VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
     *
     * @generated from protobuf enum value: VAR_PROTO = 1;
     */
    VAR_PROTO = 1,
    /**
     * VAR_RLP uses rlp int encoding of the length
     *
     * @generated from protobuf enum value: VAR_RLP = 2;
     */
    VAR_RLP = 2,
    /**
     * FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
     *
     * @generated from protobuf enum value: FIXED32_BIG = 3;
     */
    FIXED32_BIG = 3,
    /**
     * FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
     *
     * @generated from protobuf enum value: FIXED32_LITTLE = 4;
     */
    FIXED32_LITTLE = 4,
    /**
     * FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
     *
     * @generated from protobuf enum value: FIXED64_BIG = 5;
     */
    FIXED64_BIG = 5,
    /**
     * FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
     *
     * @generated from protobuf enum value: FIXED64_LITTLE = 6;
     */
    FIXED64_LITTLE = 6,
    /**
     * REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
     *
     * @generated from protobuf enum value: REQUIRE_32_BYTES = 7;
     */
    REQUIRE_32_BYTES = 7,
    /**
     * REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
     *
     * @generated from protobuf enum value: REQUIRE_64_BYTES = 8;
     */
    REQUIRE_64_BYTES = 8
}
// @generated message type with reflection information, may provide speed optimized methods
class ExistenceProof$Type extends MessageType<ExistenceProof> {
    constructor() {
        super("ics23.ExistenceProof", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "leaf", kind: "message", T: () => LeafOp },
            { no: 4, name: "path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InnerOp }
        ]);
    }
    create(value?: PartialMessage<ExistenceProof>): ExistenceProof {
        const message = { key: new Uint8Array(0), value: new Uint8Array(0), path: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExistenceProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExistenceProof): ExistenceProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                case /* ics23.LeafOp leaf */ 3:
                    message.leaf = LeafOp.internalBinaryRead(reader, reader.uint32(), options, message.leaf);
                    break;
                case /* repeated ics23.InnerOp path */ 4:
                    message.path.push(InnerOp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExistenceProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        /* ics23.LeafOp leaf = 3; */
        if (message.leaf)
            LeafOp.internalBinaryWrite(message.leaf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated ics23.InnerOp path = 4; */
        for (let i = 0; i < message.path.length; i++)
            InnerOp.internalBinaryWrite(message.path[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.ExistenceProof
 */
export const ExistenceProof = new ExistenceProof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NonExistenceProof$Type extends MessageType<NonExistenceProof> {
    constructor() {
        super("ics23.NonExistenceProof", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "left", kind: "message", T: () => ExistenceProof },
            { no: 3, name: "right", kind: "message", T: () => ExistenceProof }
        ]);
    }
    create(value?: PartialMessage<NonExistenceProof>): NonExistenceProof {
        const message = { key: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NonExistenceProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NonExistenceProof): NonExistenceProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* ics23.ExistenceProof left */ 2:
                    message.left = ExistenceProof.internalBinaryRead(reader, reader.uint32(), options, message.left);
                    break;
                case /* ics23.ExistenceProof right */ 3:
                    message.right = ExistenceProof.internalBinaryRead(reader, reader.uint32(), options, message.right);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NonExistenceProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* ics23.ExistenceProof left = 2; */
        if (message.left)
            ExistenceProof.internalBinaryWrite(message.left, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ics23.ExistenceProof right = 3; */
        if (message.right)
            ExistenceProof.internalBinaryWrite(message.right, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.NonExistenceProof
 */
export const NonExistenceProof = new NonExistenceProof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommitmentProof$Type extends MessageType<CommitmentProof> {
    constructor() {
        super("ics23.CommitmentProof", [
            { no: 1, name: "exist", kind: "message", oneof: "proof", T: () => ExistenceProof },
            { no: 2, name: "nonexist", kind: "message", oneof: "proof", T: () => NonExistenceProof },
            { no: 3, name: "batch", kind: "message", oneof: "proof", T: () => BatchProof },
            { no: 4, name: "compressed", kind: "message", oneof: "proof", T: () => CompressedBatchProof }
        ]);
    }
    create(value?: PartialMessage<CommitmentProof>): CommitmentProof {
        const message = { proof: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommitmentProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommitmentProof): CommitmentProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ics23.ExistenceProof exist */ 1:
                    message.proof = {
                        oneofKind: "exist",
                        exist: ExistenceProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).exist)
                    };
                    break;
                case /* ics23.NonExistenceProof nonexist */ 2:
                    message.proof = {
                        oneofKind: "nonexist",
                        nonexist: NonExistenceProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).nonexist)
                    };
                    break;
                case /* ics23.BatchProof batch */ 3:
                    message.proof = {
                        oneofKind: "batch",
                        batch: BatchProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).batch)
                    };
                    break;
                case /* ics23.CompressedBatchProof compressed */ 4:
                    message.proof = {
                        oneofKind: "compressed",
                        compressed: CompressedBatchProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).compressed)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommitmentProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ics23.ExistenceProof exist = 1; */
        if (message.proof.oneofKind === "exist")
            ExistenceProof.internalBinaryWrite(message.proof.exist, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ics23.NonExistenceProof nonexist = 2; */
        if (message.proof.oneofKind === "nonexist")
            NonExistenceProof.internalBinaryWrite(message.proof.nonexist, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ics23.BatchProof batch = 3; */
        if (message.proof.oneofKind === "batch")
            BatchProof.internalBinaryWrite(message.proof.batch, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ics23.CompressedBatchProof compressed = 4; */
        if (message.proof.oneofKind === "compressed")
            CompressedBatchProof.internalBinaryWrite(message.proof.compressed, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.CommitmentProof
 */
export const CommitmentProof = new CommitmentProof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeafOp$Type extends MessageType<LeafOp> {
    constructor() {
        super("ics23.LeafOp", [
            { no: 1, name: "hash", kind: "enum", T: () => ["ics23.HashOp", HashOp] },
            { no: 2, name: "prehash_key", kind: "enum", T: () => ["ics23.HashOp", HashOp] },
            { no: 3, name: "prehash_value", kind: "enum", T: () => ["ics23.HashOp", HashOp] },
            { no: 4, name: "length", kind: "enum", T: () => ["ics23.LengthOp", LengthOp] },
            { no: 5, name: "prefix", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LeafOp>): LeafOp {
        const message = { hash: 0, prehashKey: 0, prehashValue: 0, length: 0, prefix: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeafOp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeafOp): LeafOp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ics23.HashOp hash */ 1:
                    message.hash = reader.int32();
                    break;
                case /* ics23.HashOp prehash_key */ 2:
                    message.prehashKey = reader.int32();
                    break;
                case /* ics23.HashOp prehash_value */ 3:
                    message.prehashValue = reader.int32();
                    break;
                case /* ics23.LengthOp length */ 4:
                    message.length = reader.int32();
                    break;
                case /* bytes prefix */ 5:
                    message.prefix = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeafOp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ics23.HashOp hash = 1; */
        if (message.hash !== 0)
            writer.tag(1, WireType.Varint).int32(message.hash);
        /* ics23.HashOp prehash_key = 2; */
        if (message.prehashKey !== 0)
            writer.tag(2, WireType.Varint).int32(message.prehashKey);
        /* ics23.HashOp prehash_value = 3; */
        if (message.prehashValue !== 0)
            writer.tag(3, WireType.Varint).int32(message.prehashValue);
        /* ics23.LengthOp length = 4; */
        if (message.length !== 0)
            writer.tag(4, WireType.Varint).int32(message.length);
        /* bytes prefix = 5; */
        if (message.prefix.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.prefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.LeafOp
 */
export const LeafOp = new LeafOp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InnerOp$Type extends MessageType<InnerOp> {
    constructor() {
        super("ics23.InnerOp", [
            { no: 1, name: "hash", kind: "enum", T: () => ["ics23.HashOp", HashOp] },
            { no: 2, name: "prefix", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "suffix", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<InnerOp>): InnerOp {
        const message = { hash: 0, prefix: new Uint8Array(0), suffix: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InnerOp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InnerOp): InnerOp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ics23.HashOp hash */ 1:
                    message.hash = reader.int32();
                    break;
                case /* bytes prefix */ 2:
                    message.prefix = reader.bytes();
                    break;
                case /* bytes suffix */ 3:
                    message.suffix = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InnerOp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ics23.HashOp hash = 1; */
        if (message.hash !== 0)
            writer.tag(1, WireType.Varint).int32(message.hash);
        /* bytes prefix = 2; */
        if (message.prefix.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.prefix);
        /* bytes suffix = 3; */
        if (message.suffix.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.suffix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.InnerOp
 */
export const InnerOp = new InnerOp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProofSpec$Type extends MessageType<ProofSpec> {
    constructor() {
        super("ics23.ProofSpec", [
            { no: 1, name: "leaf_spec", kind: "message", T: () => LeafOp },
            { no: 2, name: "inner_spec", kind: "message", T: () => InnerSpec },
            { no: 3, name: "max_depth", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "min_depth", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProofSpec>): ProofSpec {
        const message = { maxDepth: 0, minDepth: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProofSpec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProofSpec): ProofSpec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ics23.LeafOp leaf_spec */ 1:
                    message.leafSpec = LeafOp.internalBinaryRead(reader, reader.uint32(), options, message.leafSpec);
                    break;
                case /* ics23.InnerSpec inner_spec */ 2:
                    message.innerSpec = InnerSpec.internalBinaryRead(reader, reader.uint32(), options, message.innerSpec);
                    break;
                case /* int32 max_depth */ 3:
                    message.maxDepth = reader.int32();
                    break;
                case /* int32 min_depth */ 4:
                    message.minDepth = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProofSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ics23.LeafOp leaf_spec = 1; */
        if (message.leafSpec)
            LeafOp.internalBinaryWrite(message.leafSpec, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ics23.InnerSpec inner_spec = 2; */
        if (message.innerSpec)
            InnerSpec.internalBinaryWrite(message.innerSpec, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 max_depth = 3; */
        if (message.maxDepth !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxDepth);
        /* int32 min_depth = 4; */
        if (message.minDepth !== 0)
            writer.tag(4, WireType.Varint).int32(message.minDepth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.ProofSpec
 */
export const ProofSpec = new ProofSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InnerSpec$Type extends MessageType<InnerSpec> {
    constructor() {
        super("ics23.InnerSpec", [
            { no: 1, name: "child_order", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "child_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "min_prefix_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "max_prefix_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "empty_child", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "hash", kind: "enum", T: () => ["ics23.HashOp", HashOp] }
        ]);
    }
    create(value?: PartialMessage<InnerSpec>): InnerSpec {
        const message = { childOrder: [], childSize: 0, minPrefixLength: 0, maxPrefixLength: 0, emptyChild: new Uint8Array(0), hash: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InnerSpec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InnerSpec): InnerSpec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 child_order */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.childOrder.push(reader.int32());
                    else
                        message.childOrder.push(reader.int32());
                    break;
                case /* int32 child_size */ 2:
                    message.childSize = reader.int32();
                    break;
                case /* int32 min_prefix_length */ 3:
                    message.minPrefixLength = reader.int32();
                    break;
                case /* int32 max_prefix_length */ 4:
                    message.maxPrefixLength = reader.int32();
                    break;
                case /* bytes empty_child */ 5:
                    message.emptyChild = reader.bytes();
                    break;
                case /* ics23.HashOp hash */ 6:
                    message.hash = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InnerSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 child_order = 1; */
        if (message.childOrder.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.childOrder.length; i++)
                writer.int32(message.childOrder[i]);
            writer.join();
        }
        /* int32 child_size = 2; */
        if (message.childSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.childSize);
        /* int32 min_prefix_length = 3; */
        if (message.minPrefixLength !== 0)
            writer.tag(3, WireType.Varint).int32(message.minPrefixLength);
        /* int32 max_prefix_length = 4; */
        if (message.maxPrefixLength !== 0)
            writer.tag(4, WireType.Varint).int32(message.maxPrefixLength);
        /* bytes empty_child = 5; */
        if (message.emptyChild.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.emptyChild);
        /* ics23.HashOp hash = 6; */
        if (message.hash !== 0)
            writer.tag(6, WireType.Varint).int32(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.InnerSpec
 */
export const InnerSpec = new InnerSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchProof$Type extends MessageType<BatchProof> {
    constructor() {
        super("ics23.BatchProof", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BatchEntry }
        ]);
    }
    create(value?: PartialMessage<BatchProof>): BatchProof {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchProof): BatchProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ics23.BatchEntry entries */ 1:
                    message.entries.push(BatchEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ics23.BatchEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            BatchEntry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.BatchProof
 */
export const BatchProof = new BatchProof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchEntry$Type extends MessageType<BatchEntry> {
    constructor() {
        super("ics23.BatchEntry", [
            { no: 1, name: "exist", kind: "message", oneof: "proof", T: () => ExistenceProof },
            { no: 2, name: "nonexist", kind: "message", oneof: "proof", T: () => NonExistenceProof }
        ]);
    }
    create(value?: PartialMessage<BatchEntry>): BatchEntry {
        const message = { proof: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BatchEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchEntry): BatchEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ics23.ExistenceProof exist */ 1:
                    message.proof = {
                        oneofKind: "exist",
                        exist: ExistenceProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).exist)
                    };
                    break;
                case /* ics23.NonExistenceProof nonexist */ 2:
                    message.proof = {
                        oneofKind: "nonexist",
                        nonexist: NonExistenceProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).nonexist)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ics23.ExistenceProof exist = 1; */
        if (message.proof.oneofKind === "exist")
            ExistenceProof.internalBinaryWrite(message.proof.exist, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ics23.NonExistenceProof nonexist = 2; */
        if (message.proof.oneofKind === "nonexist")
            NonExistenceProof.internalBinaryWrite(message.proof.nonexist, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.BatchEntry
 */
export const BatchEntry = new BatchEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompressedBatchProof$Type extends MessageType<CompressedBatchProof> {
    constructor() {
        super("ics23.CompressedBatchProof", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CompressedBatchEntry },
            { no: 2, name: "lookup_inners", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InnerOp }
        ]);
    }
    create(value?: PartialMessage<CompressedBatchProof>): CompressedBatchProof {
        const message = { entries: [], lookupInners: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompressedBatchProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompressedBatchProof): CompressedBatchProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ics23.CompressedBatchEntry entries */ 1:
                    message.entries.push(CompressedBatchEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ics23.InnerOp lookup_inners */ 2:
                    message.lookupInners.push(InnerOp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompressedBatchProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ics23.CompressedBatchEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            CompressedBatchEntry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ics23.InnerOp lookup_inners = 2; */
        for (let i = 0; i < message.lookupInners.length; i++)
            InnerOp.internalBinaryWrite(message.lookupInners[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.CompressedBatchProof
 */
export const CompressedBatchProof = new CompressedBatchProof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompressedBatchEntry$Type extends MessageType<CompressedBatchEntry> {
    constructor() {
        super("ics23.CompressedBatchEntry", [
            { no: 1, name: "exist", kind: "message", oneof: "proof", T: () => CompressedExistenceProof },
            { no: 2, name: "nonexist", kind: "message", oneof: "proof", T: () => CompressedNonExistenceProof }
        ]);
    }
    create(value?: PartialMessage<CompressedBatchEntry>): CompressedBatchEntry {
        const message = { proof: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompressedBatchEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompressedBatchEntry): CompressedBatchEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ics23.CompressedExistenceProof exist */ 1:
                    message.proof = {
                        oneofKind: "exist",
                        exist: CompressedExistenceProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).exist)
                    };
                    break;
                case /* ics23.CompressedNonExistenceProof nonexist */ 2:
                    message.proof = {
                        oneofKind: "nonexist",
                        nonexist: CompressedNonExistenceProof.internalBinaryRead(reader, reader.uint32(), options, (message.proof as any).nonexist)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompressedBatchEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ics23.CompressedExistenceProof exist = 1; */
        if (message.proof.oneofKind === "exist")
            CompressedExistenceProof.internalBinaryWrite(message.proof.exist, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ics23.CompressedNonExistenceProof nonexist = 2; */
        if (message.proof.oneofKind === "nonexist")
            CompressedNonExistenceProof.internalBinaryWrite(message.proof.nonexist, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.CompressedBatchEntry
 */
export const CompressedBatchEntry = new CompressedBatchEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompressedExistenceProof$Type extends MessageType<CompressedExistenceProof> {
    constructor() {
        super("ics23.CompressedExistenceProof", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "leaf", kind: "message", T: () => LeafOp },
            { no: 4, name: "path", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CompressedExistenceProof>): CompressedExistenceProof {
        const message = { key: new Uint8Array(0), value: new Uint8Array(0), path: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompressedExistenceProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompressedExistenceProof): CompressedExistenceProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                case /* ics23.LeafOp leaf */ 3:
                    message.leaf = LeafOp.internalBinaryRead(reader, reader.uint32(), options, message.leaf);
                    break;
                case /* repeated int32 path */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.path.push(reader.int32());
                    else
                        message.path.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompressedExistenceProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        /* ics23.LeafOp leaf = 3; */
        if (message.leaf)
            LeafOp.internalBinaryWrite(message.leaf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 path = 4; */
        if (message.path.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.path.length; i++)
                writer.int32(message.path[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.CompressedExistenceProof
 */
export const CompressedExistenceProof = new CompressedExistenceProof$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompressedNonExistenceProof$Type extends MessageType<CompressedNonExistenceProof> {
    constructor() {
        super("ics23.CompressedNonExistenceProof", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "left", kind: "message", T: () => CompressedExistenceProof },
            { no: 3, name: "right", kind: "message", T: () => CompressedExistenceProof }
        ]);
    }
    create(value?: PartialMessage<CompressedNonExistenceProof>): CompressedNonExistenceProof {
        const message = { key: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompressedNonExistenceProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompressedNonExistenceProof): CompressedNonExistenceProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* ics23.CompressedExistenceProof left */ 2:
                    message.left = CompressedExistenceProof.internalBinaryRead(reader, reader.uint32(), options, message.left);
                    break;
                case /* ics23.CompressedExistenceProof right */ 3:
                    message.right = CompressedExistenceProof.internalBinaryRead(reader, reader.uint32(), options, message.right);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompressedNonExistenceProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* ics23.CompressedExistenceProof left = 2; */
        if (message.left)
            CompressedExistenceProof.internalBinaryWrite(message.left, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ics23.CompressedExistenceProof right = 3; */
        if (message.right)
            CompressedExistenceProof.internalBinaryWrite(message.right, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ics23.CompressedNonExistenceProof
 */
export const CompressedNonExistenceProof = new CompressedNonExistenceProof$Type();
