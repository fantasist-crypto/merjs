// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "tendermint/p2p/types.proto" (package "tendermint.p2p", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tendermint.p2p.NetAddress
 */
export interface NetAddress {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string ip = 2;
     */
    ip: string;
    /**
     * @generated from protobuf field: uint32 port = 3;
     */
    port: number;
}
/**
 * @generated from protobuf message tendermint.p2p.ProtocolVersion
 */
export interface ProtocolVersion {
    /**
     * @generated from protobuf field: uint64 p2p = 1 [json_name = "p2p"];
     */
    p2P: string;
    /**
     * @generated from protobuf field: uint64 block = 2;
     */
    block: string;
    /**
     * @generated from protobuf field: uint64 app = 3;
     */
    app: string;
}
/**
 * @generated from protobuf message tendermint.p2p.DefaultNodeInfo
 */
export interface DefaultNodeInfo {
    /**
     * @generated from protobuf field: tendermint.p2p.ProtocolVersion protocol_version = 1;
     */
    protocolVersion?: ProtocolVersion;
    /**
     * @generated from protobuf field: string default_node_id = 2;
     */
    defaultNodeId: string;
    /**
     * @generated from protobuf field: string listen_addr = 3;
     */
    listenAddr: string;
    /**
     * @generated from protobuf field: string network = 4;
     */
    network: string;
    /**
     * @generated from protobuf field: string version = 5;
     */
    version: string;
    /**
     * @generated from protobuf field: bytes channels = 6;
     */
    channels: Uint8Array;
    /**
     * @generated from protobuf field: string moniker = 7;
     */
    moniker: string;
    /**
     * @generated from protobuf field: tendermint.p2p.DefaultNodeInfoOther other = 8;
     */
    other?: DefaultNodeInfoOther;
}
/**
 * @generated from protobuf message tendermint.p2p.DefaultNodeInfoOther
 */
export interface DefaultNodeInfoOther {
    /**
     * @generated from protobuf field: string tx_index = 1;
     */
    txIndex: string;
    /**
     * @generated from protobuf field: string rpc_address = 2;
     */
    rpcAddress: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class NetAddress$Type extends MessageType<NetAddress> {
    constructor() {
        super("tendermint.p2p.NetAddress", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } },
            { no: 2, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "IP" } },
            { no: 3, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<NetAddress>): NetAddress {
        const message = { id: "", ip: "", port: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NetAddress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NetAddress): NetAddress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string ip */ 2:
                    message.ip = reader.string();
                    break;
                case /* uint32 port */ 3:
                    message.port = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NetAddress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string ip = 2; */
        if (message.ip !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ip);
        /* uint32 port = 3; */
        if (message.port !== 0)
            writer.tag(3, WireType.Varint).uint32(message.port);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.p2p.NetAddress
 */
export const NetAddress = new NetAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProtocolVersion$Type extends MessageType<ProtocolVersion> {
    constructor() {
        super("tendermint.p2p.ProtocolVersion", [
            { no: 1, name: "p2p", kind: "scalar", jsonName: "p2p", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "P2P" } },
            { no: 2, name: "block", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "app", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<ProtocolVersion>): ProtocolVersion {
        const message = { p2P: "0", block: "0", app: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProtocolVersion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtocolVersion): ProtocolVersion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 p2p = 1 [json_name = "p2p"];*/ 1:
                    message.p2P = reader.uint64().toString();
                    break;
                case /* uint64 block */ 2:
                    message.block = reader.uint64().toString();
                    break;
                case /* uint64 app */ 3:
                    message.app = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProtocolVersion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 p2p = 1 [json_name = "p2p"]; */
        if (message.p2P !== "0")
            writer.tag(1, WireType.Varint).uint64(message.p2P);
        /* uint64 block = 2; */
        if (message.block !== "0")
            writer.tag(2, WireType.Varint).uint64(message.block);
        /* uint64 app = 3; */
        if (message.app !== "0")
            writer.tag(3, WireType.Varint).uint64(message.app);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.p2p.ProtocolVersion
 */
export const ProtocolVersion = new ProtocolVersion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefaultNodeInfo$Type extends MessageType<DefaultNodeInfo> {
    constructor() {
        super("tendermint.p2p.DefaultNodeInfo", [
            { no: 1, name: "protocol_version", kind: "message", T: () => ProtocolVersion, options: { "gogoproto.nullable": false } },
            { no: 2, name: "default_node_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "DefaultNodeID" } },
            { no: 3, name: "listen_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "network", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "channels", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "moniker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "other", kind: "message", T: () => DefaultNodeInfoOther, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<DefaultNodeInfo>): DefaultNodeInfo {
        const message = { defaultNodeId: "", listenAddr: "", network: "", version: "", channels: new Uint8Array(0), moniker: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DefaultNodeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefaultNodeInfo): DefaultNodeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.p2p.ProtocolVersion protocol_version */ 1:
                    message.protocolVersion = ProtocolVersion.internalBinaryRead(reader, reader.uint32(), options, message.protocolVersion);
                    break;
                case /* string default_node_id */ 2:
                    message.defaultNodeId = reader.string();
                    break;
                case /* string listen_addr */ 3:
                    message.listenAddr = reader.string();
                    break;
                case /* string network */ 4:
                    message.network = reader.string();
                    break;
                case /* string version */ 5:
                    message.version = reader.string();
                    break;
                case /* bytes channels */ 6:
                    message.channels = reader.bytes();
                    break;
                case /* string moniker */ 7:
                    message.moniker = reader.string();
                    break;
                case /* tendermint.p2p.DefaultNodeInfoOther other */ 8:
                    message.other = DefaultNodeInfoOther.internalBinaryRead(reader, reader.uint32(), options, message.other);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefaultNodeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.p2p.ProtocolVersion protocol_version = 1; */
        if (message.protocolVersion)
            ProtocolVersion.internalBinaryWrite(message.protocolVersion, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string default_node_id = 2; */
        if (message.defaultNodeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultNodeId);
        /* string listen_addr = 3; */
        if (message.listenAddr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.listenAddr);
        /* string network = 4; */
        if (message.network !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.network);
        /* string version = 5; */
        if (message.version !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.version);
        /* bytes channels = 6; */
        if (message.channels.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.channels);
        /* string moniker = 7; */
        if (message.moniker !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.moniker);
        /* tendermint.p2p.DefaultNodeInfoOther other = 8; */
        if (message.other)
            DefaultNodeInfoOther.internalBinaryWrite(message.other, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.p2p.DefaultNodeInfo
 */
export const DefaultNodeInfo = new DefaultNodeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DefaultNodeInfoOther$Type extends MessageType<DefaultNodeInfoOther> {
    constructor() {
        super("tendermint.p2p.DefaultNodeInfoOther", [
            { no: 1, name: "tx_index", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rpc_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "RPCAddress" } }
        ]);
    }
    create(value?: PartialMessage<DefaultNodeInfoOther>): DefaultNodeInfoOther {
        const message = { txIndex: "", rpcAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DefaultNodeInfoOther>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DefaultNodeInfoOther): DefaultNodeInfoOther {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tx_index */ 1:
                    message.txIndex = reader.string();
                    break;
                case /* string rpc_address */ 2:
                    message.rpcAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DefaultNodeInfoOther, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tx_index = 1; */
        if (message.txIndex !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.txIndex);
        /* string rpc_address = 2; */
        if (message.rpcAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rpcAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.p2p.DefaultNodeInfoOther
 */
export const DefaultNodeInfoOther = new DefaultNodeInfoOther$Type();
