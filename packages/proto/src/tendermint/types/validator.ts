// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "tendermint/types/validator.proto" (package "tendermint.types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PublicKey } from "../crypto/keys";
/**
 * @generated from protobuf message tendermint.types.ValidatorSet
 */
export interface ValidatorSet {
    /**
     * @generated from protobuf field: repeated tendermint.types.Validator validators = 1;
     */
    validators: Validator[];
    /**
     * @generated from protobuf field: tendermint.types.Validator proposer = 2;
     */
    proposer?: Validator;
    /**
     * @generated from protobuf field: int64 total_voting_power = 3;
     */
    totalVotingPower: string;
}
/**
 * @generated from protobuf message tendermint.types.Validator
 */
export interface Validator {
    /**
     * @generated from protobuf field: bytes address = 1;
     */
    address: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.crypto.PublicKey pub_key = 2;
     */
    pubKey?: PublicKey;
    /**
     * @generated from protobuf field: int64 voting_power = 3;
     */
    votingPower: string;
    /**
     * @generated from protobuf field: int64 proposer_priority = 4;
     */
    proposerPriority: string;
}
/**
 * @generated from protobuf message tendermint.types.SimpleValidator
 */
export interface SimpleValidator {
    /**
     * @generated from protobuf field: tendermint.crypto.PublicKey pub_key = 1;
     */
    pubKey?: PublicKey;
    /**
     * @generated from protobuf field: int64 voting_power = 2;
     */
    votingPower: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorSet$Type extends MessageType<ValidatorSet> {
    constructor() {
        super("tendermint.types.ValidatorSet", [
            { no: 1, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator },
            { no: 2, name: "proposer", kind: "message", T: () => Validator },
            { no: 3, name: "total_voting_power", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<ValidatorSet>): ValidatorSet {
        const message = { validators: [], totalVotingPower: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidatorSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorSet): ValidatorSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tendermint.types.Validator validators */ 1:
                    message.validators.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* tendermint.types.Validator proposer */ 2:
                    message.proposer = Validator.internalBinaryRead(reader, reader.uint32(), options, message.proposer);
                    break;
                case /* int64 total_voting_power */ 3:
                    message.totalVotingPower = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidatorSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tendermint.types.Validator validators = 1; */
        for (let i = 0; i < message.validators.length; i++)
            Validator.internalBinaryWrite(message.validators[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.Validator proposer = 2; */
        if (message.proposer)
            Validator.internalBinaryWrite(message.proposer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_voting_power = 3; */
        if (message.totalVotingPower !== "0")
            writer.tag(3, WireType.Varint).int64(message.totalVotingPower);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.ValidatorSet
 */
export const ValidatorSet = new ValidatorSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Validator$Type extends MessageType<Validator> {
    constructor() {
        super("tendermint.types.Validator", [
            { no: 1, name: "address", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "pub_key", kind: "message", T: () => PublicKey, options: { "gogoproto.nullable": false } },
            { no: 3, name: "voting_power", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "proposer_priority", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<Validator>): Validator {
        const message = { address: new Uint8Array(0), votingPower: "0", proposerPriority: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Validator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Validator): Validator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes address */ 1:
                    message.address = reader.bytes();
                    break;
                case /* tendermint.crypto.PublicKey pub_key */ 2:
                    message.pubKey = PublicKey.internalBinaryRead(reader, reader.uint32(), options, message.pubKey);
                    break;
                case /* int64 voting_power */ 3:
                    message.votingPower = reader.int64().toString();
                    break;
                case /* int64 proposer_priority */ 4:
                    message.proposerPriority = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Validator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes address = 1; */
        if (message.address.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.address);
        /* tendermint.crypto.PublicKey pub_key = 2; */
        if (message.pubKey)
            PublicKey.internalBinaryWrite(message.pubKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 voting_power = 3; */
        if (message.votingPower !== "0")
            writer.tag(3, WireType.Varint).int64(message.votingPower);
        /* int64 proposer_priority = 4; */
        if (message.proposerPriority !== "0")
            writer.tag(4, WireType.Varint).int64(message.proposerPriority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.Validator
 */
export const Validator = new Validator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimpleValidator$Type extends MessageType<SimpleValidator> {
    constructor() {
        super("tendermint.types.SimpleValidator", [
            { no: 1, name: "pub_key", kind: "message", T: () => PublicKey },
            { no: 2, name: "voting_power", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<SimpleValidator>): SimpleValidator {
        const message = { votingPower: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimpleValidator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleValidator): SimpleValidator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.crypto.PublicKey pub_key */ 1:
                    message.pubKey = PublicKey.internalBinaryRead(reader, reader.uint32(), options, message.pubKey);
                    break;
                case /* int64 voting_power */ 2:
                    message.votingPower = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimpleValidator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.crypto.PublicKey pub_key = 1; */
        if (message.pubKey)
            PublicKey.internalBinaryWrite(message.pubKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 voting_power = 2; */
        if (message.votingPower !== "0")
            writer.tag(2, WireType.Varint).int64(message.votingPower);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.SimpleValidator
 */
export const SimpleValidator = new SimpleValidator$Type();
