// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "tendermint/types/types.proto" (package "tendermint.types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ValidatorSet } from "./validator";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Consensus } from "../version/types";
import { Proof } from "../crypto/proof";
/**
 * PartsetHeader
 *
 * @generated from protobuf message tendermint.types.PartSetHeader
 */
export interface PartSetHeader {
    /**
     * @generated from protobuf field: uint32 total = 1;
     */
    total: number;
    /**
     * @generated from protobuf field: bytes hash = 2;
     */
    hash: Uint8Array;
}
/**
 * @generated from protobuf message tendermint.types.Part
 */
export interface Part {
    /**
     * @generated from protobuf field: uint32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: bytes bytes = 2;
     */
    bytes: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.crypto.Proof proof = 3;
     */
    proof?: Proof;
}
/**
 * BlockID
 *
 * @generated from protobuf message tendermint.types.BlockID
 */
export interface BlockID {
    /**
     * @generated from protobuf field: bytes hash = 1;
     */
    hash: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.types.PartSetHeader part_set_header = 2;
     */
    partSetHeader?: PartSetHeader;
}
// --------------------------------

/**
 * Header defines the structure of a Tendermint block header.
 *
 * @generated from protobuf message tendermint.types.Header
 */
export interface Header {
    /**
     * basic block info
     *
     * @generated from protobuf field: tendermint.version.Consensus version = 1;
     */
    version?: Consensus;
    /**
     * @generated from protobuf field: string chain_id = 2;
     */
    chainId: string;
    /**
     * @generated from protobuf field: int64 height = 3;
     */
    height: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp time = 4;
     */
    time?: Timestamp;
    /**
     * prev block info
     *
     * @generated from protobuf field: tendermint.types.BlockID last_block_id = 5;
     */
    lastBlockId?: BlockID;
    /**
     * hashes of block data
     *
     * @generated from protobuf field: bytes last_commit_hash = 6;
     */
    lastCommitHash: Uint8Array; // commit from validators from the last block
    /**
     * @generated from protobuf field: bytes data_hash = 7;
     */
    dataHash: Uint8Array; // transactions
    /**
     * hashes from the app output from the prev block
     *
     * @generated from protobuf field: bytes validators_hash = 8;
     */
    validatorsHash: Uint8Array; // validators for the current block
    /**
     * @generated from protobuf field: bytes next_validators_hash = 9;
     */
    nextValidatorsHash: Uint8Array; // validators for the next block
    /**
     * @generated from protobuf field: bytes consensus_hash = 10;
     */
    consensusHash: Uint8Array; // consensus params for current block
    /**
     * @generated from protobuf field: bytes app_hash = 11;
     */
    appHash: Uint8Array; // state after txs from the previous block
    /**
     * @generated from protobuf field: bytes last_results_hash = 12;
     */
    lastResultsHash: Uint8Array; // root hash of all results from the txs from the previous block
    /**
     * consensus info
     *
     * @generated from protobuf field: bytes evidence_hash = 13;
     */
    evidenceHash: Uint8Array; // evidence included in the block
    /**
     * @generated from protobuf field: bytes proposer_address = 14;
     */
    proposerAddress: Uint8Array; // original proposer of the block
}
/**
 * Data contains the set of transactions included in the block
 *
 * @generated from protobuf message tendermint.types.Data
 */
export interface Data {
    /**
     * Txs that will be applied by state @ block.Height+1.
     * NOTE: not all txs here are valid.  We're just agreeing on the order first.
     * This means that block.AppHash does not include these txs.
     *
     * @generated from protobuf field: repeated bytes txs = 1;
     */
    txs: Uint8Array[];
}
/**
 * Vote represents a prevote, precommit, or commit vote from validators for
 * consensus.
 *
 * @generated from protobuf message tendermint.types.Vote
 */
export interface Vote {
    /**
     * @generated from protobuf field: tendermint.types.SignedMsgType type = 1;
     */
    type: SignedMsgType;
    /**
     * @generated from protobuf field: int64 height = 2;
     */
    height: string;
    /**
     * @generated from protobuf field: int32 round = 3;
     */
    round: number;
    /**
     * @generated from protobuf field: tendermint.types.BlockID block_id = 4;
     */
    blockId?: BlockID; // zero if vote is nil.
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: bytes validator_address = 6;
     */
    validatorAddress: Uint8Array;
    /**
     * @generated from protobuf field: int32 validator_index = 7;
     */
    validatorIndex: number;
    /**
     * @generated from protobuf field: bytes signature = 8;
     */
    signature: Uint8Array;
}
/**
 * Commit contains the evidence that a block was committed by a set of
 * validators.
 *
 * @generated from protobuf message tendermint.types.Commit
 */
export interface Commit {
    /**
     * @generated from protobuf field: int64 height = 1;
     */
    height: string;
    /**
     * @generated from protobuf field: int32 round = 2;
     */
    round: number;
    /**
     * @generated from protobuf field: tendermint.types.BlockID block_id = 3;
     */
    blockId?: BlockID;
    /**
     * @generated from protobuf field: repeated tendermint.types.CommitSig signatures = 4;
     */
    signatures: CommitSig[];
}
/**
 * CommitSig is a part of the Vote included in a Commit.
 *
 * @generated from protobuf message tendermint.types.CommitSig
 */
export interface CommitSig {
    /**
     * @generated from protobuf field: tendermint.types.BlockIDFlag block_id_flag = 1;
     */
    blockIdFlag: BlockIDFlag;
    /**
     * @generated from protobuf field: bytes validator_address = 2;
     */
    validatorAddress: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 3;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: bytes signature = 4;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message tendermint.types.Proposal
 */
export interface Proposal {
    /**
     * @generated from protobuf field: tendermint.types.SignedMsgType type = 1;
     */
    type: SignedMsgType;
    /**
     * @generated from protobuf field: int64 height = 2;
     */
    height: string;
    /**
     * @generated from protobuf field: int32 round = 3;
     */
    round: number;
    /**
     * @generated from protobuf field: int32 pol_round = 4;
     */
    polRound: number;
    /**
     * @generated from protobuf field: tendermint.types.BlockID block_id = 5;
     */
    blockId?: BlockID;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 6;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: bytes signature = 7;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message tendermint.types.SignedHeader
 */
export interface SignedHeader {
    /**
     * @generated from protobuf field: tendermint.types.Header header = 1;
     */
    header?: Header;
    /**
     * @generated from protobuf field: tendermint.types.Commit commit = 2;
     */
    commit?: Commit;
}
/**
 * @generated from protobuf message tendermint.types.LightBlock
 */
export interface LightBlock {
    /**
     * @generated from protobuf field: tendermint.types.SignedHeader signed_header = 1;
     */
    signedHeader?: SignedHeader;
    /**
     * @generated from protobuf field: tendermint.types.ValidatorSet validator_set = 2;
     */
    validatorSet?: ValidatorSet;
}
/**
 * @generated from protobuf message tendermint.types.BlockMeta
 */
export interface BlockMeta {
    /**
     * @generated from protobuf field: tendermint.types.BlockID block_id = 1;
     */
    blockId?: BlockID;
    /**
     * @generated from protobuf field: int64 block_size = 2;
     */
    blockSize: string;
    /**
     * @generated from protobuf field: tendermint.types.Header header = 3;
     */
    header?: Header;
    /**
     * @generated from protobuf field: int64 num_txs = 4;
     */
    numTxs: string;
}
/**
 * TxProof represents a Merkle proof of the presence of a transaction in the
 * Merkle tree.
 *
 * @generated from protobuf message tendermint.types.TxProof
 */
export interface TxProof {
    /**
     * @generated from protobuf field: bytes root_hash = 1;
     */
    rootHash: Uint8Array;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.crypto.Proof proof = 3;
     */
    proof?: Proof;
}
/**
 * BlockIdFlag indicates which BlcokID the signature is for
 *
 * @generated from protobuf enum tendermint.types.BlockIDFlag
 */
export enum BlockIDFlag {
    /**
     * @generated from protobuf enum value: BLOCK_ID_FLAG_UNKNOWN = 0;
     */
    BLOCK_ID_FLAG_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: BLOCK_ID_FLAG_ABSENT = 1;
     */
    BLOCK_ID_FLAG_ABSENT = 1,
    /**
     * @generated from protobuf enum value: BLOCK_ID_FLAG_COMMIT = 2;
     */
    BLOCK_ID_FLAG_COMMIT = 2,
    /**
     * @generated from protobuf enum value: BLOCK_ID_FLAG_NIL = 3;
     */
    BLOCK_ID_FLAG_NIL = 3
}
/**
 * SignedMsgType is a type of signed message in the consensus.
 *
 * @generated from protobuf enum tendermint.types.SignedMsgType
 */
export enum SignedMsgType {
    /**
     * @generated from protobuf enum value: SIGNED_MSG_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Votes
     *
     * @generated from protobuf enum value: SIGNED_MSG_TYPE_PREVOTE = 1;
     */
    PREVOTE = 1,
    /**
     * @generated from protobuf enum value: SIGNED_MSG_TYPE_PRECOMMIT = 2;
     */
    PRECOMMIT = 2,
    /**
     * Proposals
     *
     * @generated from protobuf enum value: SIGNED_MSG_TYPE_PROPOSAL = 32;
     */
    PROPOSAL = 32
}
// @generated message type with reflection information, may provide speed optimized methods
class PartSetHeader$Type extends MessageType<PartSetHeader> {
    constructor() {
        super("tendermint.types.PartSetHeader", [
            { no: 1, name: "total", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PartSetHeader>): PartSetHeader {
        const message = { total: 0, hash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PartSetHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartSetHeader): PartSetHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 total */ 1:
                    message.total = reader.uint32();
                    break;
                case /* bytes hash */ 2:
                    message.hash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PartSetHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).uint32(message.total);
        /* bytes hash = 2; */
        if (message.hash.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.PartSetHeader
 */
export const PartSetHeader = new PartSetHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Part$Type extends MessageType<Part> {
    constructor() {
        super("tendermint.types.Part", [
            { no: 1, name: "index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof", kind: "message", T: () => Proof, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<Part>): Part {
        const message = { index: 0, bytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Part>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Part): Part {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 index */ 1:
                    message.index = reader.uint32();
                    break;
                case /* bytes bytes */ 2:
                    message.bytes = reader.bytes();
                    break;
                case /* tendermint.crypto.Proof proof */ 3:
                    message.proof = Proof.internalBinaryRead(reader, reader.uint32(), options, message.proof);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Part, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).uint32(message.index);
        /* bytes bytes = 2; */
        if (message.bytes.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.bytes);
        /* tendermint.crypto.Proof proof = 3; */
        if (message.proof)
            Proof.internalBinaryWrite(message.proof, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.Part
 */
export const Part = new Part$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockID$Type extends MessageType<BlockID> {
    constructor() {
        super("tendermint.types.BlockID", [
            { no: 1, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "part_set_header", kind: "message", T: () => PartSetHeader, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<BlockID>): BlockID {
        const message = { hash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockID): BlockID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes hash */ 1:
                    message.hash = reader.bytes();
                    break;
                case /* tendermint.types.PartSetHeader part_set_header */ 2:
                    message.partSetHeader = PartSetHeader.internalBinaryRead(reader, reader.uint32(), options, message.partSetHeader);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes hash = 1; */
        if (message.hash.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.hash);
        /* tendermint.types.PartSetHeader part_set_header = 2; */
        if (message.partSetHeader)
            PartSetHeader.internalBinaryWrite(message.partSetHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.BlockID
 */
export const BlockID = new BlockID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Header$Type extends MessageType<Header> {
    constructor() {
        super("tendermint.types.Header", [
            { no: 1, name: "version", kind: "message", T: () => Consensus, options: { "gogoproto.nullable": false } },
            { no: 2, name: "chain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ChainID" } },
            { no: 3, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } },
            { no: 5, name: "last_block_id", kind: "message", T: () => BlockID, options: { "gogoproto.nullable": false } },
            { no: 6, name: "last_commit_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "data_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "validators_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "next_validators_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 10, name: "consensus_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 11, name: "app_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 12, name: "last_results_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 13, name: "evidence_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 14, name: "proposer_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Header>): Header {
        const message = { chainId: "", height: "0", lastCommitHash: new Uint8Array(0), dataHash: new Uint8Array(0), validatorsHash: new Uint8Array(0), nextValidatorsHash: new Uint8Array(0), consensusHash: new Uint8Array(0), appHash: new Uint8Array(0), lastResultsHash: new Uint8Array(0), evidenceHash: new Uint8Array(0), proposerAddress: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.version.Consensus version */ 1:
                    message.version = Consensus.internalBinaryRead(reader, reader.uint32(), options, message.version);
                    break;
                case /* string chain_id */ 2:
                    message.chainId = reader.string();
                    break;
                case /* int64 height */ 3:
                    message.height = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp time */ 4:
                    message.time = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                case /* tendermint.types.BlockID last_block_id */ 5:
                    message.lastBlockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.lastBlockId);
                    break;
                case /* bytes last_commit_hash */ 6:
                    message.lastCommitHash = reader.bytes();
                    break;
                case /* bytes data_hash */ 7:
                    message.dataHash = reader.bytes();
                    break;
                case /* bytes validators_hash */ 8:
                    message.validatorsHash = reader.bytes();
                    break;
                case /* bytes next_validators_hash */ 9:
                    message.nextValidatorsHash = reader.bytes();
                    break;
                case /* bytes consensus_hash */ 10:
                    message.consensusHash = reader.bytes();
                    break;
                case /* bytes app_hash */ 11:
                    message.appHash = reader.bytes();
                    break;
                case /* bytes last_results_hash */ 12:
                    message.lastResultsHash = reader.bytes();
                    break;
                case /* bytes evidence_hash */ 13:
                    message.evidenceHash = reader.bytes();
                    break;
                case /* bytes proposer_address */ 14:
                    message.proposerAddress = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.version.Consensus version = 1; */
        if (message.version)
            Consensus.internalBinaryWrite(message.version, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string chain_id = 2; */
        if (message.chainId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chainId);
        /* int64 height = 3; */
        if (message.height !== "0")
            writer.tag(3, WireType.Varint).int64(message.height);
        /* google.protobuf.Timestamp time = 4; */
        if (message.time)
            Timestamp.internalBinaryWrite(message.time, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.BlockID last_block_id = 5; */
        if (message.lastBlockId)
            BlockID.internalBinaryWrite(message.lastBlockId, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bytes last_commit_hash = 6; */
        if (message.lastCommitHash.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.lastCommitHash);
        /* bytes data_hash = 7; */
        if (message.dataHash.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.dataHash);
        /* bytes validators_hash = 8; */
        if (message.validatorsHash.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.validatorsHash);
        /* bytes next_validators_hash = 9; */
        if (message.nextValidatorsHash.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.nextValidatorsHash);
        /* bytes consensus_hash = 10; */
        if (message.consensusHash.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.consensusHash);
        /* bytes app_hash = 11; */
        if (message.appHash.length)
            writer.tag(11, WireType.LengthDelimited).bytes(message.appHash);
        /* bytes last_results_hash = 12; */
        if (message.lastResultsHash.length)
            writer.tag(12, WireType.LengthDelimited).bytes(message.lastResultsHash);
        /* bytes evidence_hash = 13; */
        if (message.evidenceHash.length)
            writer.tag(13, WireType.LengthDelimited).bytes(message.evidenceHash);
        /* bytes proposer_address = 14; */
        if (message.proposerAddress.length)
            writer.tag(14, WireType.LengthDelimited).bytes(message.proposerAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.Header
 */
export const Header = new Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Data$Type extends MessageType<Data> {
    constructor() {
        super("tendermint.types.Data", [
            { no: 1, name: "txs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Data>): Data {
        const message = { txs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Data): Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes txs */ 1:
                    message.txs.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes txs = 1; */
        for (let i = 0; i < message.txs.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.Data
 */
export const Data = new Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vote$Type extends MessageType<Vote> {
    constructor() {
        super("tendermint.types.Vote", [
            { no: 1, name: "type", kind: "enum", T: () => ["tendermint.types.SignedMsgType", SignedMsgType, "SIGNED_MSG_TYPE_"] },
            { no: 2, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "block_id", kind: "message", T: () => BlockID, options: { "gogoproto.nullable": false, "gogoproto.customname": "BlockID" } },
            { no: 5, name: "timestamp", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } },
            { no: 6, name: "validator_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "validator_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Vote>): Vote {
        const message = { type: 0, height: "0", round: 0, validatorAddress: new Uint8Array(0), validatorIndex: 0, signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Vote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Vote): Vote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.SignedMsgType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 height */ 2:
                    message.height = reader.int64().toString();
                    break;
                case /* int32 round */ 3:
                    message.round = reader.int32();
                    break;
                case /* tendermint.types.BlockID block_id */ 4:
                    message.blockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.blockId);
                    break;
                case /* google.protobuf.Timestamp timestamp */ 5:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* bytes validator_address */ 6:
                    message.validatorAddress = reader.bytes();
                    break;
                case /* int32 validator_index */ 7:
                    message.validatorIndex = reader.int32();
                    break;
                case /* bytes signature */ 8:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Vote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.types.SignedMsgType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 height = 2; */
        if (message.height !== "0")
            writer.tag(2, WireType.Varint).int64(message.height);
        /* int32 round = 3; */
        if (message.round !== 0)
            writer.tag(3, WireType.Varint).int32(message.round);
        /* tendermint.types.BlockID block_id = 4; */
        if (message.blockId)
            BlockID.internalBinaryWrite(message.blockId, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp timestamp = 5; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bytes validator_address = 6; */
        if (message.validatorAddress.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.validatorAddress);
        /* int32 validator_index = 7; */
        if (message.validatorIndex !== 0)
            writer.tag(7, WireType.Varint).int32(message.validatorIndex);
        /* bytes signature = 8; */
        if (message.signature.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.Vote
 */
export const Vote = new Vote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Commit$Type extends MessageType<Commit> {
    constructor() {
        super("tendermint.types.Commit", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "block_id", kind: "message", T: () => BlockID, options: { "gogoproto.nullable": false, "gogoproto.customname": "BlockID" } },
            { no: 4, name: "signatures", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommitSig, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<Commit>): Commit {
        const message = { height: "0", round: 0, signatures: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Commit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Commit): Commit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toString();
                    break;
                case /* int32 round */ 2:
                    message.round = reader.int32();
                    break;
                case /* tendermint.types.BlockID block_id */ 3:
                    message.blockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.blockId);
                    break;
                case /* repeated tendermint.types.CommitSig signatures */ 4:
                    message.signatures.push(CommitSig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Commit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 height = 1; */
        if (message.height !== "0")
            writer.tag(1, WireType.Varint).int64(message.height);
        /* int32 round = 2; */
        if (message.round !== 0)
            writer.tag(2, WireType.Varint).int32(message.round);
        /* tendermint.types.BlockID block_id = 3; */
        if (message.blockId)
            BlockID.internalBinaryWrite(message.blockId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated tendermint.types.CommitSig signatures = 4; */
        for (let i = 0; i < message.signatures.length; i++)
            CommitSig.internalBinaryWrite(message.signatures[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.Commit
 */
export const Commit = new Commit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommitSig$Type extends MessageType<CommitSig> {
    constructor() {
        super("tendermint.types.CommitSig", [
            { no: 1, name: "block_id_flag", kind: "enum", T: () => ["tendermint.types.BlockIDFlag", BlockIDFlag] },
            { no: 2, name: "validator_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "timestamp", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } },
            { no: 4, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CommitSig>): CommitSig {
        const message = { blockIdFlag: 0, validatorAddress: new Uint8Array(0), signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommitSig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommitSig): CommitSig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.BlockIDFlag block_id_flag */ 1:
                    message.blockIdFlag = reader.int32();
                    break;
                case /* bytes validator_address */ 2:
                    message.validatorAddress = reader.bytes();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 3:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* bytes signature */ 4:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommitSig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.types.BlockIDFlag block_id_flag = 1; */
        if (message.blockIdFlag !== 0)
            writer.tag(1, WireType.Varint).int32(message.blockIdFlag);
        /* bytes validator_address = 2; */
        if (message.validatorAddress.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.validatorAddress);
        /* google.protobuf.Timestamp timestamp = 3; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes signature = 4; */
        if (message.signature.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.CommitSig
 */
export const CommitSig = new CommitSig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Proposal$Type extends MessageType<Proposal> {
    constructor() {
        super("tendermint.types.Proposal", [
            { no: 1, name: "type", kind: "enum", T: () => ["tendermint.types.SignedMsgType", SignedMsgType, "SIGNED_MSG_TYPE_"] },
            { no: 2, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "pol_round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "block_id", kind: "message", T: () => BlockID, options: { "gogoproto.nullable": false, "gogoproto.customname": "BlockID" } },
            { no: 6, name: "timestamp", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } },
            { no: 7, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Proposal>): Proposal {
        const message = { type: 0, height: "0", round: 0, polRound: 0, signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Proposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Proposal): Proposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.SignedMsgType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 height */ 2:
                    message.height = reader.int64().toString();
                    break;
                case /* int32 round */ 3:
                    message.round = reader.int32();
                    break;
                case /* int32 pol_round */ 4:
                    message.polRound = reader.int32();
                    break;
                case /* tendermint.types.BlockID block_id */ 5:
                    message.blockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.blockId);
                    break;
                case /* google.protobuf.Timestamp timestamp */ 6:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* bytes signature */ 7:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Proposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.types.SignedMsgType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 height = 2; */
        if (message.height !== "0")
            writer.tag(2, WireType.Varint).int64(message.height);
        /* int32 round = 3; */
        if (message.round !== 0)
            writer.tag(3, WireType.Varint).int32(message.round);
        /* int32 pol_round = 4; */
        if (message.polRound !== 0)
            writer.tag(4, WireType.Varint).int32(message.polRound);
        /* tendermint.types.BlockID block_id = 5; */
        if (message.blockId)
            BlockID.internalBinaryWrite(message.blockId, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp timestamp = 6; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bytes signature = 7; */
        if (message.signature.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.Proposal
 */
export const Proposal = new Proposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedHeader$Type extends MessageType<SignedHeader> {
    constructor() {
        super("tendermint.types.SignedHeader", [
            { no: 1, name: "header", kind: "message", T: () => Header },
            { no: 2, name: "commit", kind: "message", T: () => Commit }
        ]);
    }
    create(value?: PartialMessage<SignedHeader>): SignedHeader {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignedHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedHeader): SignedHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.Header header */ 1:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* tendermint.types.Commit commit */ 2:
                    message.commit = Commit.internalBinaryRead(reader, reader.uint32(), options, message.commit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.types.Header header = 1; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.Commit commit = 2; */
        if (message.commit)
            Commit.internalBinaryWrite(message.commit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.SignedHeader
 */
export const SignedHeader = new SignedHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LightBlock$Type extends MessageType<LightBlock> {
    constructor() {
        super("tendermint.types.LightBlock", [
            { no: 1, name: "signed_header", kind: "message", T: () => SignedHeader },
            { no: 2, name: "validator_set", kind: "message", T: () => ValidatorSet }
        ]);
    }
    create(value?: PartialMessage<LightBlock>): LightBlock {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LightBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LightBlock): LightBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.SignedHeader signed_header */ 1:
                    message.signedHeader = SignedHeader.internalBinaryRead(reader, reader.uint32(), options, message.signedHeader);
                    break;
                case /* tendermint.types.ValidatorSet validator_set */ 2:
                    message.validatorSet = ValidatorSet.internalBinaryRead(reader, reader.uint32(), options, message.validatorSet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LightBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.types.SignedHeader signed_header = 1; */
        if (message.signedHeader)
            SignedHeader.internalBinaryWrite(message.signedHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.ValidatorSet validator_set = 2; */
        if (message.validatorSet)
            ValidatorSet.internalBinaryWrite(message.validatorSet, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.LightBlock
 */
export const LightBlock = new LightBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockMeta$Type extends MessageType<BlockMeta> {
    constructor() {
        super("tendermint.types.BlockMeta", [
            { no: 1, name: "block_id", kind: "message", T: () => BlockID, options: { "gogoproto.nullable": false, "gogoproto.customname": "BlockID" } },
            { no: 2, name: "block_size", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "header", kind: "message", T: () => Header, options: { "gogoproto.nullable": false } },
            { no: 4, name: "num_txs", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<BlockMeta>): BlockMeta {
        const message = { blockSize: "0", numTxs: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockMeta): BlockMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.BlockID block_id */ 1:
                    message.blockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.blockId);
                    break;
                case /* int64 block_size */ 2:
                    message.blockSize = reader.int64().toString();
                    break;
                case /* tendermint.types.Header header */ 3:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* int64 num_txs */ 4:
                    message.numTxs = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.types.BlockID block_id = 1; */
        if (message.blockId)
            BlockID.internalBinaryWrite(message.blockId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 block_size = 2; */
        if (message.blockSize !== "0")
            writer.tag(2, WireType.Varint).int64(message.blockSize);
        /* tendermint.types.Header header = 3; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 num_txs = 4; */
        if (message.numTxs !== "0")
            writer.tag(4, WireType.Varint).int64(message.numTxs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.BlockMeta
 */
export const BlockMeta = new BlockMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxProof$Type extends MessageType<TxProof> {
    constructor() {
        super("tendermint.types.TxProof", [
            { no: 1, name: "root_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof", kind: "message", T: () => Proof }
        ]);
    }
    create(value?: PartialMessage<TxProof>): TxProof {
        const message = { rootHash: new Uint8Array(0), data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TxProof>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxProof): TxProof {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes root_hash */ 1:
                    message.rootHash = reader.bytes();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                case /* tendermint.crypto.Proof proof */ 3:
                    message.proof = Proof.internalBinaryRead(reader, reader.uint32(), options, message.proof);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes root_hash = 1; */
        if (message.rootHash.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.rootHash);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        /* tendermint.crypto.Proof proof = 3; */
        if (message.proof)
            Proof.internalBinaryWrite(message.proof, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.types.TxProof
 */
export const TxProof = new TxProof$Type();
