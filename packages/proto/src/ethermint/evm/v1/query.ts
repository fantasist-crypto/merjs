// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ethermint/evm/v1/query.proto" (package "ethermint.evm.v1", syntax proto3)
// tslint:disable
import { MsgEthereumTxResponse } from "./tx";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { TraceConfig } from "./evm";
import { MsgEthereumTx } from "./tx";
import { Params } from "./evm";
import { PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Log } from "./evm";
import { PageRequest } from "../../../cosmos/base/query/v1beta1/pagination";
/**
 * QueryAccountRequest is the request type for the Query/Account RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryAccountRequest
 */
export interface QueryAccountRequest {
    /**
     * address is the ethereum hex address to query the account for.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryAccountResponse
 */
export interface QueryAccountResponse {
    /**
     * balance is the balance of the EVM denomination.
     *
     * @generated from protobuf field: string balance = 1;
     */
    balance: string;
    /**
     * code hash is the hex-formatted code bytes from the EOA.
     *
     * @generated from protobuf field: string code_hash = 2;
     */
    codeHash: string;
    /**
     * nonce is the account's sequence number.
     *
     * @generated from protobuf field: uint64 nonce = 3;
     */
    nonce: string;
}
/**
 * QueryCosmosAccountRequest is the request type for the Query/CosmosAccount RPC
 * method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryCosmosAccountRequest
 */
export interface QueryCosmosAccountRequest {
    /**
     * address is the ethereum hex address to query the account for.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * QueryCosmosAccountResponse is the response type for the Query/CosmosAccount
 * RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryCosmosAccountResponse
 */
export interface QueryCosmosAccountResponse {
    /**
     * cosmos_address is the cosmos address of the account.
     *
     * @generated from protobuf field: string cosmos_address = 1;
     */
    cosmosAddress: string;
    /**
     * sequence is the account's sequence number.
     *
     * @generated from protobuf field: uint64 sequence = 2;
     */
    sequence: string;
    /**
     * account_number is the account numbert
     *
     * @generated from protobuf field: uint64 account_number = 3;
     */
    accountNumber: string;
}
/**
 * QueryValidatorAccountRequest is the request type for the
 * Query/ValidatorAccount RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryValidatorAccountRequest
 */
export interface QueryValidatorAccountRequest {
    /**
     * cons_address is the validator cons address to query the account for.
     *
     * @generated from protobuf field: string cons_address = 1;
     */
    consAddress: string;
}
/**
 * QueryValidatorAccountResponse is the response type for the
 * Query/ValidatorAccount RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryValidatorAccountResponse
 */
export interface QueryValidatorAccountResponse {
    /**
     * account_address is the cosmos address of the account in bech32 format.
     *
     * @generated from protobuf field: string account_address = 1;
     */
    accountAddress: string;
    /**
     * sequence is the account's sequence number.
     *
     * @generated from protobuf field: uint64 sequence = 2;
     */
    sequence: string;
    /**
     * account_number is the account number
     *
     * @generated from protobuf field: uint64 account_number = 3;
     */
    accountNumber: string;
}
/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryBalanceRequest
 */
export interface QueryBalanceRequest {
    /**
     * address is the ethereum hex address to query the balance for.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryBalanceResponse
 */
export interface QueryBalanceResponse {
    /**
     * balance is the balance of the EVM denomination.
     *
     * @generated from protobuf field: string balance = 1;
     */
    balance: string;
}
/**
 * QueryStorageRequest is the request type for the Query/Storage RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryStorageRequest
 */
export interface QueryStorageRequest {
    /**
     * / address is the ethereum hex address to query the storage state for.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * key defines the key of the storage state
     *
     * @generated from protobuf field: string key = 2;
     */
    key: string;
}
/**
 * QueryStorageResponse is the response type for the Query/Storage RPC
 * method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryStorageResponse
 */
export interface QueryStorageResponse {
    /**
     * key defines the storage state value hash associated with the given key.
     *
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * QueryCodeRequest is the request type for the Query/Code RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryCodeRequest
 */
export interface QueryCodeRequest {
    /**
     * address is the ethereum hex address to query the code for.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * QueryCodeResponse is the response type for the Query/Code RPC
 * method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryCodeResponse
 */
export interface QueryCodeResponse {
    /**
     * code represents the code bytes from an ethereum address.
     *
     * @generated from protobuf field: bytes code = 1;
     */
    code: Uint8Array;
}
/**
 * QueryTxLogsRequest is the request type for the Query/TxLogs RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryTxLogsRequest
 */
export interface QueryTxLogsRequest {
    /**
     * hash is the ethereum transaction hex hash to query the logs for.
     *
     * @generated from protobuf field: string hash = 1;
     */
    hash: string;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryTxLogs is the response type for the Query/TxLogs RPC method.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryTxLogsResponse
 */
export interface QueryTxLogsResponse {
    /**
     * logs represents the ethereum logs generated from the given transaction.
     *
     * @generated from protobuf field: repeated ethermint.evm.v1.Log logs = 1;
     */
    logs: Log[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryParamsRequest defines the request type for querying x/evm parameters.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse defines the response type for querying x/evm parameters.
 *
 * @generated from protobuf message ethermint.evm.v1.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params define the evm module parameters.
     *
     * @generated from protobuf field: ethermint.evm.v1.Params params = 1;
     */
    params?: Params;
}
/**
 * EthCallRequest defines EthCall request
 *
 * @generated from protobuf message ethermint.evm.v1.EthCallRequest
 */
export interface EthCallRequest {
    /**
     * same json format as the json rpc api.
     *
     * @generated from protobuf field: bytes args = 1;
     */
    args: Uint8Array;
    /**
     * the default gas cap to be used
     *
     * @generated from protobuf field: uint64 gas_cap = 2;
     */
    gasCap: string;
}
/**
 * EstimateGasResponse defines EstimateGas response
 *
 * @generated from protobuf message ethermint.evm.v1.EstimateGasResponse
 */
export interface EstimateGasResponse {
    /**
     * the estimated gas
     *
     * @generated from protobuf field: uint64 gas = 1;
     */
    gas: string;
}
/**
 * QueryTraceTxRequest defines TraceTx request
 *
 * @generated from protobuf message ethermint.evm.v1.QueryTraceTxRequest
 */
export interface QueryTraceTxRequest {
    /**
     * msgEthereumTx for the requested transaction
     *
     * @generated from protobuf field: ethermint.evm.v1.MsgEthereumTx msg = 1;
     */
    msg?: MsgEthereumTx;
    /**
     * transaction index
     *
     * @generated from protobuf field: uint64 tx_index = 2;
     */
    txIndex: string;
    /**
     * TraceConfig holds extra parameters to trace functions.
     *
     * @generated from protobuf field: ethermint.evm.v1.TraceConfig trace_config = 3;
     */
    traceConfig?: TraceConfig;
    /**
     * the predecessor transactions included in the same block
     * need to be replayed first to get correct context for tracing.
     *
     * @generated from protobuf field: repeated ethermint.evm.v1.MsgEthereumTx predecessors = 4;
     */
    predecessors: MsgEthereumTx[];
    /**
     * block number of requested transaction
     *
     * @generated from protobuf field: int64 block_number = 5;
     */
    blockNumber: string;
    /**
     * block hex hash of requested transaction
     *
     * @generated from protobuf field: string block_hash = 6;
     */
    blockHash: string;
    /**
     * block time of requested transaction
     *
     * @generated from protobuf field: google.protobuf.Timestamp block_time = 7;
     */
    blockTime?: Timestamp;
}
/**
 * QueryTraceTxResponse defines TraceTx response
 *
 * @generated from protobuf message ethermint.evm.v1.QueryTraceTxResponse
 */
export interface QueryTraceTxResponse {
    /**
     * response serialized in bytes
     *
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * QueryTraceBlockRequest defines TraceTx request
 *
 * @generated from protobuf message ethermint.evm.v1.QueryTraceBlockRequest
 */
export interface QueryTraceBlockRequest {
    /**
     * txs messages in the block
     *
     * @generated from protobuf field: repeated ethermint.evm.v1.MsgEthereumTx txs = 1;
     */
    txs: MsgEthereumTx[];
    /**
     * TraceConfig holds extra parameters to trace functions.
     *
     * @generated from protobuf field: ethermint.evm.v1.TraceConfig trace_config = 3;
     */
    traceConfig?: TraceConfig;
    /**
     * block number
     *
     * @generated from protobuf field: int64 block_number = 5;
     */
    blockNumber: string;
    /**
     * block hex hash
     *
     * @generated from protobuf field: string block_hash = 6;
     */
    blockHash: string;
    /**
     * block time
     *
     * @generated from protobuf field: google.protobuf.Timestamp block_time = 7;
     */
    blockTime?: Timestamp;
}
/**
 * QueryTraceBlockResponse defines TraceBlock response
 *
 * @generated from protobuf message ethermint.evm.v1.QueryTraceBlockResponse
 */
export interface QueryTraceBlockResponse {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryAccountRequest$Type extends MessageType<QueryAccountRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryAccountRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryAccountRequest>): QueryAccountRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAccountRequest): QueryAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryAccountRequest
 */
export const QueryAccountRequest = new QueryAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAccountResponse$Type extends MessageType<QueryAccountResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryAccountResponse", [
            { no: 1, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryAccountResponse>): QueryAccountResponse {
        const message = { balance: "", codeHash: "", nonce: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAccountResponse): QueryAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string balance */ 1:
                    message.balance = reader.string();
                    break;
                case /* string code_hash */ 2:
                    message.codeHash = reader.string();
                    break;
                case /* uint64 nonce */ 3:
                    message.nonce = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string balance = 1; */
        if (message.balance !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.balance);
        /* string code_hash = 2; */
        if (message.codeHash !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.codeHash);
        /* uint64 nonce = 3; */
        if (message.nonce !== "0")
            writer.tag(3, WireType.Varint).uint64(message.nonce);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryAccountResponse
 */
export const QueryAccountResponse = new QueryAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCosmosAccountRequest$Type extends MessageType<QueryCosmosAccountRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryCosmosAccountRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryCosmosAccountRequest>): QueryCosmosAccountRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCosmosAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCosmosAccountRequest): QueryCosmosAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCosmosAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryCosmosAccountRequest
 */
export const QueryCosmosAccountRequest = new QueryCosmosAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCosmosAccountResponse$Type extends MessageType<QueryCosmosAccountResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryCosmosAccountResponse", [
            { no: 1, name: "cosmos_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "account_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryCosmosAccountResponse>): QueryCosmosAccountResponse {
        const message = { cosmosAddress: "", sequence: "0", accountNumber: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCosmosAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCosmosAccountResponse): QueryCosmosAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cosmos_address */ 1:
                    message.cosmosAddress = reader.string();
                    break;
                case /* uint64 sequence */ 2:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* uint64 account_number */ 3:
                    message.accountNumber = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCosmosAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cosmos_address = 1; */
        if (message.cosmosAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cosmosAddress);
        /* uint64 sequence = 2; */
        if (message.sequence !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sequence);
        /* uint64 account_number = 3; */
        if (message.accountNumber !== "0")
            writer.tag(3, WireType.Varint).uint64(message.accountNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryCosmosAccountResponse
 */
export const QueryCosmosAccountResponse = new QueryCosmosAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorAccountRequest$Type extends MessageType<QueryValidatorAccountRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryValidatorAccountRequest", [
            { no: 1, name: "cons_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryValidatorAccountRequest>): QueryValidatorAccountRequest {
        const message = { consAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryValidatorAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryValidatorAccountRequest): QueryValidatorAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cons_address */ 1:
                    message.consAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryValidatorAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cons_address = 1; */
        if (message.consAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.consAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryValidatorAccountRequest
 */
export const QueryValidatorAccountRequest = new QueryValidatorAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorAccountResponse$Type extends MessageType<QueryValidatorAccountResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryValidatorAccountResponse", [
            { no: 1, name: "account_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "account_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryValidatorAccountResponse>): QueryValidatorAccountResponse {
        const message = { accountAddress: "", sequence: "0", accountNumber: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryValidatorAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryValidatorAccountResponse): QueryValidatorAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_address */ 1:
                    message.accountAddress = reader.string();
                    break;
                case /* uint64 sequence */ 2:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* uint64 account_number */ 3:
                    message.accountNumber = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryValidatorAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_address = 1; */
        if (message.accountAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountAddress);
        /* uint64 sequence = 2; */
        if (message.sequence !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sequence);
        /* uint64 account_number = 3; */
        if (message.accountNumber !== "0")
            writer.tag(3, WireType.Varint).uint64(message.accountNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryValidatorAccountResponse
 */
export const QueryValidatorAccountResponse = new QueryValidatorAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBalanceRequest$Type extends MessageType<QueryBalanceRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryBalanceRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryBalanceRequest>): QueryBalanceRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBalanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBalanceRequest): QueryBalanceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBalanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryBalanceRequest
 */
export const QueryBalanceRequest = new QueryBalanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBalanceResponse$Type extends MessageType<QueryBalanceResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryBalanceResponse", [
            { no: 1, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryBalanceResponse>): QueryBalanceResponse {
        const message = { balance: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBalanceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBalanceResponse): QueryBalanceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string balance */ 1:
                    message.balance = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBalanceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string balance = 1; */
        if (message.balance !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.balance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryBalanceResponse
 */
export const QueryBalanceResponse = new QueryBalanceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryStorageRequest$Type extends MessageType<QueryStorageRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryStorageRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryStorageRequest>): QueryStorageRequest {
        const message = { address: "", key: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryStorageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryStorageRequest): QueryStorageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryStorageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryStorageRequest
 */
export const QueryStorageRequest = new QueryStorageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryStorageResponse$Type extends MessageType<QueryStorageResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryStorageResponse", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryStorageResponse>): QueryStorageResponse {
        const message = { value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryStorageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryStorageResponse): QueryStorageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryStorageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryStorageResponse
 */
export const QueryStorageResponse = new QueryStorageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCodeRequest$Type extends MessageType<QueryCodeRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryCodeRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryCodeRequest>): QueryCodeRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCodeRequest): QueryCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryCodeRequest
 */
export const QueryCodeRequest = new QueryCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCodeResponse$Type extends MessageType<QueryCodeResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryCodeResponse", [
            { no: 1, name: "code", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<QueryCodeResponse>): QueryCodeResponse {
        const message = { code: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCodeResponse): QueryCodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes code */ 1:
                    message.code = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes code = 1; */
        if (message.code.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryCodeResponse
 */
export const QueryCodeResponse = new QueryCodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTxLogsRequest$Type extends MessageType<QueryTxLogsRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryTxLogsRequest", [
            { no: 1, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryTxLogsRequest>): QueryTxLogsRequest {
        const message = { hash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTxLogsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTxLogsRequest): QueryTxLogsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hash */ 1:
                    message.hash = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTxLogsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hash = 1; */
        if (message.hash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hash);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryTxLogsRequest
 */
export const QueryTxLogsRequest = new QueryTxLogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTxLogsResponse$Type extends MessageType<QueryTxLogsResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryTxLogsResponse", [
            { no: 1, name: "logs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Log },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryTxLogsResponse>): QueryTxLogsResponse {
        const message = { logs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTxLogsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTxLogsResponse): QueryTxLogsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ethermint.evm.v1.Log logs */ 1:
                    message.logs.push(Log.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTxLogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ethermint.evm.v1.Log logs = 1; */
        for (let i = 0; i < message.logs.length; i++)
            Log.internalBinaryWrite(message.logs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryTxLogsResponse
 */
export const QueryTxLogsResponse = new QueryTxLogsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ethermint.evm.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ethermint.evm.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EthCallRequest$Type extends MessageType<EthCallRequest> {
    constructor() {
        super("ethermint.evm.v1.EthCallRequest", [
            { no: 1, name: "args", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "gas_cap", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<EthCallRequest>): EthCallRequest {
        const message = { args: new Uint8Array(0), gasCap: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EthCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EthCallRequest): EthCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes args */ 1:
                    message.args = reader.bytes();
                    break;
                case /* uint64 gas_cap */ 2:
                    message.gasCap = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EthCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes args = 1; */
        if (message.args.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.args);
        /* uint64 gas_cap = 2; */
        if (message.gasCap !== "0")
            writer.tag(2, WireType.Varint).uint64(message.gasCap);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.EthCallRequest
 */
export const EthCallRequest = new EthCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EstimateGasResponse$Type extends MessageType<EstimateGasResponse> {
    constructor() {
        super("ethermint.evm.v1.EstimateGasResponse", [
            { no: 1, name: "gas", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<EstimateGasResponse>): EstimateGasResponse {
        const message = { gas: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EstimateGasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EstimateGasResponse): EstimateGasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 gas */ 1:
                    message.gas = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EstimateGasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 gas = 1; */
        if (message.gas !== "0")
            writer.tag(1, WireType.Varint).uint64(message.gas);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.EstimateGasResponse
 */
export const EstimateGasResponse = new EstimateGasResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTraceTxRequest$Type extends MessageType<QueryTraceTxRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryTraceTxRequest", [
            { no: 1, name: "msg", kind: "message", T: () => MsgEthereumTx },
            { no: 2, name: "tx_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "trace_config", kind: "message", T: () => TraceConfig },
            { no: 4, name: "predecessors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MsgEthereumTx },
            { no: 5, name: "block_number", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 6, name: "block_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "block_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } }
        ]);
    }
    create(value?: PartialMessage<QueryTraceTxRequest>): QueryTraceTxRequest {
        const message = { txIndex: "0", predecessors: [], blockNumber: "0", blockHash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTraceTxRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTraceTxRequest): QueryTraceTxRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ethermint.evm.v1.MsgEthereumTx msg */ 1:
                    message.msg = MsgEthereumTx.internalBinaryRead(reader, reader.uint32(), options, message.msg);
                    break;
                case /* uint64 tx_index */ 2:
                    message.txIndex = reader.uint64().toString();
                    break;
                case /* ethermint.evm.v1.TraceConfig trace_config */ 3:
                    message.traceConfig = TraceConfig.internalBinaryRead(reader, reader.uint32(), options, message.traceConfig);
                    break;
                case /* repeated ethermint.evm.v1.MsgEthereumTx predecessors */ 4:
                    message.predecessors.push(MsgEthereumTx.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 block_number */ 5:
                    message.blockNumber = reader.int64().toString();
                    break;
                case /* string block_hash */ 6:
                    message.blockHash = reader.string();
                    break;
                case /* google.protobuf.Timestamp block_time */ 7:
                    message.blockTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.blockTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTraceTxRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ethermint.evm.v1.MsgEthereumTx msg = 1; */
        if (message.msg)
            MsgEthereumTx.internalBinaryWrite(message.msg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 tx_index = 2; */
        if (message.txIndex !== "0")
            writer.tag(2, WireType.Varint).uint64(message.txIndex);
        /* ethermint.evm.v1.TraceConfig trace_config = 3; */
        if (message.traceConfig)
            TraceConfig.internalBinaryWrite(message.traceConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated ethermint.evm.v1.MsgEthereumTx predecessors = 4; */
        for (let i = 0; i < message.predecessors.length; i++)
            MsgEthereumTx.internalBinaryWrite(message.predecessors[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 block_number = 5; */
        if (message.blockNumber !== "0")
            writer.tag(5, WireType.Varint).int64(message.blockNumber);
        /* string block_hash = 6; */
        if (message.blockHash !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.blockHash);
        /* google.protobuf.Timestamp block_time = 7; */
        if (message.blockTime)
            Timestamp.internalBinaryWrite(message.blockTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryTraceTxRequest
 */
export const QueryTraceTxRequest = new QueryTraceTxRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTraceTxResponse$Type extends MessageType<QueryTraceTxResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryTraceTxResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<QueryTraceTxResponse>): QueryTraceTxResponse {
        const message = { data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTraceTxResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTraceTxResponse): QueryTraceTxResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTraceTxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryTraceTxResponse
 */
export const QueryTraceTxResponse = new QueryTraceTxResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTraceBlockRequest$Type extends MessageType<QueryTraceBlockRequest> {
    constructor() {
        super("ethermint.evm.v1.QueryTraceBlockRequest", [
            { no: 1, name: "txs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MsgEthereumTx },
            { no: 3, name: "trace_config", kind: "message", T: () => TraceConfig },
            { no: 5, name: "block_number", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 6, name: "block_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "block_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } }
        ]);
    }
    create(value?: PartialMessage<QueryTraceBlockRequest>): QueryTraceBlockRequest {
        const message = { txs: [], blockNumber: "0", blockHash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTraceBlockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTraceBlockRequest): QueryTraceBlockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ethermint.evm.v1.MsgEthereumTx txs */ 1:
                    message.txs.push(MsgEthereumTx.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ethermint.evm.v1.TraceConfig trace_config */ 3:
                    message.traceConfig = TraceConfig.internalBinaryRead(reader, reader.uint32(), options, message.traceConfig);
                    break;
                case /* int64 block_number */ 5:
                    message.blockNumber = reader.int64().toString();
                    break;
                case /* string block_hash */ 6:
                    message.blockHash = reader.string();
                    break;
                case /* google.protobuf.Timestamp block_time */ 7:
                    message.blockTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.blockTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTraceBlockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ethermint.evm.v1.MsgEthereumTx txs = 1; */
        for (let i = 0; i < message.txs.length; i++)
            MsgEthereumTx.internalBinaryWrite(message.txs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ethermint.evm.v1.TraceConfig trace_config = 3; */
        if (message.traceConfig)
            TraceConfig.internalBinaryWrite(message.traceConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 block_number = 5; */
        if (message.blockNumber !== "0")
            writer.tag(5, WireType.Varint).int64(message.blockNumber);
        /* string block_hash = 6; */
        if (message.blockHash !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.blockHash);
        /* google.protobuf.Timestamp block_time = 7; */
        if (message.blockTime)
            Timestamp.internalBinaryWrite(message.blockTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryTraceBlockRequest
 */
export const QueryTraceBlockRequest = new QueryTraceBlockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTraceBlockResponse$Type extends MessageType<QueryTraceBlockResponse> {
    constructor() {
        super("ethermint.evm.v1.QueryTraceBlockResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<QueryTraceBlockResponse>): QueryTraceBlockResponse {
        const message = { data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTraceBlockResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTraceBlockResponse): QueryTraceBlockResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTraceBlockResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.evm.v1.QueryTraceBlockResponse
 */
export const QueryTraceBlockResponse = new QueryTraceBlockResponse$Type();
/**
 * @generated ServiceType for protobuf service ethermint.evm.v1.Query
 */
export const Query = new ServiceType("ethermint.evm.v1.Query", [
    { name: "Account", options: { "google.api.http": { get: "/ethermint/evm/v1/account/{address}" } }, I: QueryAccountRequest, O: QueryAccountResponse },
    { name: "CosmosAccount", options: { "google.api.http": { get: "/ethermint/evm/v1/cosmos_account/{address}" } }, I: QueryCosmosAccountRequest, O: QueryCosmosAccountResponse },
    { name: "ValidatorAccount", options: { "google.api.http": { get: "/ethermint/evm/v1/validator_account/{cons_address}" } }, I: QueryValidatorAccountRequest, O: QueryValidatorAccountResponse },
    { name: "Balance", options: { "google.api.http": { get: "/ethermint/evm/v1/balances/{address}" } }, I: QueryBalanceRequest, O: QueryBalanceResponse },
    { name: "Storage", options: { "google.api.http": { get: "/ethermint/evm/v1/storage/{address}/{key}" } }, I: QueryStorageRequest, O: QueryStorageResponse },
    { name: "Code", options: { "google.api.http": { get: "/ethermint/evm/v1/codes/{address}" } }, I: QueryCodeRequest, O: QueryCodeResponse },
    { name: "Params", options: { "google.api.http": { get: "/ethermint/evm/v1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "EthCall", options: { "google.api.http": { get: "/ethermint/evm/v1/eth_call" } }, I: EthCallRequest, O: MsgEthereumTxResponse },
    { name: "EstimateGas", options: { "google.api.http": { get: "/ethermint/evm/v1/estimate_gas" } }, I: EthCallRequest, O: EstimateGasResponse },
    { name: "TraceTx", options: { "google.api.http": { get: "/ethermint/evm/v1/trace_tx" } }, I: QueryTraceTxRequest, O: QueryTraceTxResponse },
    { name: "TraceBlock", options: { "google.api.http": { get: "/ethermint/evm/v1/trace_block" } }, I: QueryTraceBlockRequest, O: QueryTraceBlockResponse }
]);
