// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ethermint/feemarket/v1/query.proto" (package "ethermint.feemarket.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./feemarket";
/**
 * QueryParamsRequest defines the request type for querying x/evm parameters.
 *
 * @generated from protobuf message ethermint.feemarket.v1.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse defines the response type for querying x/evm parameters.
 *
 * @generated from protobuf message ethermint.feemarket.v1.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params define the evm module parameters.
     *
     * @generated from protobuf field: ethermint.feemarket.v1.Params params = 1;
     */
    params?: Params;
}
/**
 * QueryBaseFeeRequest defines the request type for querying the EIP1559 base
 * fee.
 *
 * @generated from protobuf message ethermint.feemarket.v1.QueryBaseFeeRequest
 */
export interface QueryBaseFeeRequest {
}
/**
 * BaseFeeResponse returns the EIP1559 base fee.
 *
 * @generated from protobuf message ethermint.feemarket.v1.QueryBaseFeeResponse
 */
export interface QueryBaseFeeResponse {
    /**
     * @generated from protobuf field: string base_fee = 1;
     */
    baseFee: string;
}
/**
 * QueryBlockGasRequest defines the request type for querying the EIP1559 base
 * fee.
 *
 * @generated from protobuf message ethermint.feemarket.v1.QueryBlockGasRequest
 */
export interface QueryBlockGasRequest {
}
/**
 * QueryBlockGasResponse returns block gas used for a given height.
 *
 * @generated from protobuf message ethermint.feemarket.v1.QueryBlockGasResponse
 */
export interface QueryBlockGasResponse {
    /**
     * @generated from protobuf field: int64 gas = 1;
     */
    gas: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("ethermint.feemarket.v1.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.feemarket.v1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("ethermint.feemarket.v1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ethermint.feemarket.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ethermint.feemarket.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.feemarket.v1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBaseFeeRequest$Type extends MessageType<QueryBaseFeeRequest> {
    constructor() {
        super("ethermint.feemarket.v1.QueryBaseFeeRequest", []);
    }
    create(value?: PartialMessage<QueryBaseFeeRequest>): QueryBaseFeeRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBaseFeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBaseFeeRequest): QueryBaseFeeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryBaseFeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.feemarket.v1.QueryBaseFeeRequest
 */
export const QueryBaseFeeRequest = new QueryBaseFeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBaseFeeResponse$Type extends MessageType<QueryBaseFeeResponse> {
    constructor() {
        super("ethermint.feemarket.v1.QueryBaseFeeResponse", [
            { no: 1, name: "base_fee", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value?: PartialMessage<QueryBaseFeeResponse>): QueryBaseFeeResponse {
        const message = { baseFee: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBaseFeeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBaseFeeResponse): QueryBaseFeeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_fee */ 1:
                    message.baseFee = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBaseFeeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string base_fee = 1; */
        if (message.baseFee !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseFee);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.feemarket.v1.QueryBaseFeeResponse
 */
export const QueryBaseFeeResponse = new QueryBaseFeeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBlockGasRequest$Type extends MessageType<QueryBlockGasRequest> {
    constructor() {
        super("ethermint.feemarket.v1.QueryBlockGasRequest", []);
    }
    create(value?: PartialMessage<QueryBlockGasRequest>): QueryBlockGasRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBlockGasRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBlockGasRequest): QueryBlockGasRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryBlockGasRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.feemarket.v1.QueryBlockGasRequest
 */
export const QueryBlockGasRequest = new QueryBlockGasRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBlockGasResponse$Type extends MessageType<QueryBlockGasResponse> {
    constructor() {
        super("ethermint.feemarket.v1.QueryBlockGasResponse", [
            { no: 1, name: "gas", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryBlockGasResponse>): QueryBlockGasResponse {
        const message = { gas: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBlockGasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBlockGasResponse): QueryBlockGasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 gas */ 1:
                    message.gas = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBlockGasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 gas = 1; */
        if (message.gas !== "0")
            writer.tag(1, WireType.Varint).int64(message.gas);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ethermint.feemarket.v1.QueryBlockGasResponse
 */
export const QueryBlockGasResponse = new QueryBlockGasResponse$Type();
/**
 * @generated ServiceType for protobuf service ethermint.feemarket.v1.Query
 */
export const Query = new ServiceType("ethermint.feemarket.v1.Query", [
    { name: "Params", options: { "google.api.http": { get: "/feemarket/evm/v1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "BaseFee", options: { "google.api.http": { get: "/feemarket/evm/v1/base_fee" } }, I: QueryBaseFeeRequest, O: QueryBaseFeeResponse },
    { name: "BlockGas", options: { "google.api.http": { get: "/feemarket/evm/v1/block_gas" } }, I: QueryBlockGasRequest, O: QueryBlockGasResponse }
]);
