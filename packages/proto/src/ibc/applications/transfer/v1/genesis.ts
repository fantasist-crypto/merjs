// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/applications/transfer/v1/genesis.proto" (package "ibc.applications.transfer.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./transfer";
import { DenomTrace } from "./transfer";
/**
 * GenesisState defines the ibc-transfer genesis state
 *
 * @generated from protobuf message ibc.applications.transfer.v1.GenesisState
 */
export interface GenesisState {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: repeated ibc.applications.transfer.v1.DenomTrace denom_traces = 2;
     */
    denomTraces: DenomTrace[];
    /**
     * @generated from protobuf field: ibc.applications.transfer.v1.Params params = 3;
     */
    params?: Params;
}
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
    constructor() {
        super("ibc.applications.transfer.v1.GenesisState", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "denom_traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DenomTrace, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"denom_traces\"", "gogoproto.castrepeated": "Traces" } },
            { no: 3, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<GenesisState>): GenesisState {
        const message = { portId: "", denomTraces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* repeated ibc.applications.transfer.v1.DenomTrace denom_traces */ 2:
                    message.denomTraces.push(DenomTrace.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ibc.applications.transfer.v1.Params params */ 3:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* repeated ibc.applications.transfer.v1.DenomTrace denom_traces = 2; */
        for (let i = 0; i < message.denomTraces.length; i++)
            DenomTrace.internalBinaryWrite(message.denomTraces[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ibc.applications.transfer.v1.Params params = 3; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
