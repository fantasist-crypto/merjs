// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/applications/transfer/v1/query.proto" (package "ibc.applications.transfer.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./transfer";
import { PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { PageRequest } from "../../../../cosmos/base/query/v1beta1/pagination";
import { DenomTrace } from "./transfer";
/**
 * QueryDenomTraceRequest is the request type for the Query/DenomTrace RPC
 * method
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryDenomTraceRequest
 */
export interface QueryDenomTraceRequest {
    /**
     * hash (in hex format) of the denomination trace information.
     *
     * @generated from protobuf field: string hash = 1;
     */
    hash: string;
}
/**
 * QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
 * method.
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryDenomTraceResponse
 */
export interface QueryDenomTraceResponse {
    /**
     * denom_trace returns the requested denomination trace information.
     *
     * @generated from protobuf field: ibc.applications.transfer.v1.DenomTrace denom_trace = 1;
     */
    denomTrace?: DenomTrace;
}
/**
 * QueryConnectionsRequest is the request type for the Query/DenomTraces RPC
 * method
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryDenomTracesRequest
 */
export interface QueryDenomTracesRequest {
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
 * method.
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryDenomTracesResponse
 */
export interface QueryDenomTracesResponse {
    /**
     * denom_traces returns all denominations trace information.
     *
     * @generated from protobuf field: repeated ibc.applications.transfer.v1.DenomTrace denom_traces = 1;
     */
    denomTraces: DenomTrace[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params defines the parameters of the module.
     *
     * @generated from protobuf field: ibc.applications.transfer.v1.Params params = 1;
     */
    params?: Params;
}
/**
 * QueryDenomHashRequest is the request type for the Query/DenomHash RPC
 * method
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryDenomHashRequest
 */
export interface QueryDenomHashRequest {
    /**
     * The denomination trace ([port_id]/[channel_id])+/[denom]
     *
     * @generated from protobuf field: string trace = 1;
     */
    trace: string;
}
/**
 * QueryDenomHashResponse is the response type for the Query/DenomHash RPC
 * method.
 *
 * @generated from protobuf message ibc.applications.transfer.v1.QueryDenomHashResponse
 */
export interface QueryDenomHashResponse {
    /**
     * hash (in hex format) of the denomination trace information.
     *
     * @generated from protobuf field: string hash = 1;
     */
    hash: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomTraceRequest$Type extends MessageType<QueryDenomTraceRequest> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryDenomTraceRequest", [
            { no: 1, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryDenomTraceRequest>): QueryDenomTraceRequest {
        const message = { hash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomTraceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomTraceRequest): QueryDenomTraceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hash */ 1:
                    message.hash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomTraceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hash = 1; */
        if (message.hash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryDenomTraceRequest
 */
export const QueryDenomTraceRequest = new QueryDenomTraceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomTraceResponse$Type extends MessageType<QueryDenomTraceResponse> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryDenomTraceResponse", [
            { no: 1, name: "denom_trace", kind: "message", T: () => DenomTrace }
        ]);
    }
    create(value?: PartialMessage<QueryDenomTraceResponse>): QueryDenomTraceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomTraceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomTraceResponse): QueryDenomTraceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.applications.transfer.v1.DenomTrace denom_trace */ 1:
                    message.denomTrace = DenomTrace.internalBinaryRead(reader, reader.uint32(), options, message.denomTrace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomTraceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.applications.transfer.v1.DenomTrace denom_trace = 1; */
        if (message.denomTrace)
            DenomTrace.internalBinaryWrite(message.denomTrace, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryDenomTraceResponse
 */
export const QueryDenomTraceResponse = new QueryDenomTraceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomTracesRequest$Type extends MessageType<QueryDenomTracesRequest> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryDenomTracesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryDenomTracesRequest>): QueryDenomTracesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomTracesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomTracesRequest): QueryDenomTracesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomTracesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryDenomTracesRequest
 */
export const QueryDenomTracesRequest = new QueryDenomTracesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomTracesResponse$Type extends MessageType<QueryDenomTracesResponse> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryDenomTracesResponse", [
            { no: 1, name: "denom_traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DenomTrace, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "Traces" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryDenomTracesResponse>): QueryDenomTracesResponse {
        const message = { denomTraces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomTracesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomTracesResponse): QueryDenomTracesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.applications.transfer.v1.DenomTrace denom_traces */ 1:
                    message.denomTraces.push(DenomTrace.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomTracesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ibc.applications.transfer.v1.DenomTrace denom_traces = 1; */
        for (let i = 0; i < message.denomTraces.length; i++)
            DenomTrace.internalBinaryWrite(message.denomTraces[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryDenomTracesResponse
 */
export const QueryDenomTracesResponse = new QueryDenomTracesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.applications.transfer.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.applications.transfer.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomHashRequest$Type extends MessageType<QueryDenomHashRequest> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryDenomHashRequest", [
            { no: 1, name: "trace", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryDenomHashRequest>): QueryDenomHashRequest {
        const message = { trace: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomHashRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomHashRequest): QueryDenomHashRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string trace */ 1:
                    message.trace = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomHashRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string trace = 1; */
        if (message.trace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.trace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryDenomHashRequest
 */
export const QueryDenomHashRequest = new QueryDenomHashRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomHashResponse$Type extends MessageType<QueryDenomHashResponse> {
    constructor() {
        super("ibc.applications.transfer.v1.QueryDenomHashResponse", [
            { no: 1, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryDenomHashResponse>): QueryDenomHashResponse {
        const message = { hash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomHashResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomHashResponse): QueryDenomHashResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hash */ 1:
                    message.hash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomHashResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hash = 1; */
        if (message.hash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.QueryDenomHashResponse
 */
export const QueryDenomHashResponse = new QueryDenomHashResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.applications.transfer.v1.Query
 */
export const Query = new ServiceType("ibc.applications.transfer.v1.Query", [
    { name: "DenomTrace", options: { "google.api.http": { get: "/ibc/apps/transfer/v1/denom_traces/{hash}" } }, I: QueryDenomTraceRequest, O: QueryDenomTraceResponse },
    { name: "DenomTraces", options: { "google.api.http": { get: "/ibc/apps/transfer/v1/denom_traces" } }, I: QueryDenomTracesRequest, O: QueryDenomTracesResponse },
    { name: "Params", options: { "google.api.http": { get: "/ibc/apps/transfer/v1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "DenomHash", options: { "google.api.http": { get: "/ibc/apps/transfer/v1/denom_hashes/{trace}" } }, I: QueryDenomHashRequest, O: QueryDenomHashResponse }
]);
