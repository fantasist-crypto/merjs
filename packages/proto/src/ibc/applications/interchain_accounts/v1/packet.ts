// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/applications/interchain_accounts/v1/packet.proto" (package "ibc.applications.interchain_accounts.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
/**
 * InterchainAccountPacketData is comprised of a raw transaction, type of transaction and optional memo field.
 *
 * @generated from protobuf message ibc.applications.interchain_accounts.v1.InterchainAccountPacketData
 */
export interface InterchainAccountPacketData {
    /**
     * @generated from protobuf field: ibc.applications.interchain_accounts.v1.Type type = 1;
     */
    type: Type;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: string memo = 3;
     */
    memo: string;
}
/**
 * CosmosTx contains a list of sdk.Msg's. It should be used when sending transactions to an SDK host chain.
 *
 * @generated from protobuf message ibc.applications.interchain_accounts.v1.CosmosTx
 */
export interface CosmosTx {
    /**
     * @generated from protobuf field: repeated google.protobuf.Any messages = 1;
     */
    messages: Any[];
}
/**
 * Type defines a classification of message issued from a controller chain to its associated interchain accounts
 * host
 *
 * @generated from protobuf enum ibc.applications.interchain_accounts.v1.Type
 */
export enum Type {
    /**
     * Default zero value enumeration
     *
     * @generated from protobuf enum value: TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Execute a transaction on an interchain accounts host chain
     *
     * @generated from protobuf enum value: TYPE_EXECUTE_TX = 1;
     */
    EXECUTE_TX = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class InterchainAccountPacketData$Type extends MessageType<InterchainAccountPacketData> {
    constructor() {
        super("ibc.applications.interchain_accounts.v1.InterchainAccountPacketData", [
            { no: 1, name: "type", kind: "enum", T: () => ["ibc.applications.interchain_accounts.v1.Type", Type, "TYPE_"] },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "memo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InterchainAccountPacketData>): InterchainAccountPacketData {
        const message = { type: 0, data: new Uint8Array(0), memo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InterchainAccountPacketData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InterchainAccountPacketData): InterchainAccountPacketData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.applications.interchain_accounts.v1.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                case /* string memo */ 3:
                    message.memo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InterchainAccountPacketData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.applications.interchain_accounts.v1.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        /* string memo = 3; */
        if (message.memo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.memo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.interchain_accounts.v1.InterchainAccountPacketData
 */
export const InterchainAccountPacketData = new InterchainAccountPacketData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CosmosTx$Type extends MessageType<CosmosTx> {
    constructor() {
        super("ibc.applications.interchain_accounts.v1.CosmosTx", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any }
        ]);
    }
    create(value?: PartialMessage<CosmosTx>): CosmosTx {
        const message = { messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CosmosTx>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CosmosTx): CosmosTx {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Any messages */ 1:
                    message.messages.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CosmosTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Any messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Any.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.interchain_accounts.v1.CosmosTx
 */
export const CosmosTx = new CosmosTx$Type();
