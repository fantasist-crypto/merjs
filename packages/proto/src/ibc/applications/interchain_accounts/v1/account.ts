// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/applications/interchain_accounts/v1/account.proto" (package "ibc.applications.interchain_accounts.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BaseAccount } from "../../../../cosmos/auth/v1beta1/auth";
/**
 * An InterchainAccount is defined as a BaseAccount & the address of the account owner on the controller chain
 *
 * @generated from protobuf message ibc.applications.interchain_accounts.v1.InterchainAccount
 */
export interface InterchainAccount {
    /**
     * @generated from protobuf field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
     */
    baseAccount?: BaseAccount;
    /**
     * @generated from protobuf field: string account_owner = 2;
     */
    accountOwner: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class InterchainAccount$Type extends MessageType<InterchainAccount> {
    constructor() {
        super("ibc.applications.interchain_accounts.v1.InterchainAccount", [
            { no: 1, name: "base_account", kind: "message", T: () => BaseAccount, options: { "gogoproto.embed": true, "gogoproto.moretags": "yaml:\"base_account\"" } },
            { no: 2, name: "account_owner", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"account_owner\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "cosmos_proto.implements_interface": "InterchainAccountI" });
    }
    create(value?: PartialMessage<InterchainAccount>): InterchainAccount {
        const message = { accountOwner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InterchainAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InterchainAccount): InterchainAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.auth.v1beta1.BaseAccount base_account */ 1:
                    message.baseAccount = BaseAccount.internalBinaryRead(reader, reader.uint32(), options, message.baseAccount);
                    break;
                case /* string account_owner */ 2:
                    message.accountOwner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InterchainAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.auth.v1beta1.BaseAccount base_account = 1; */
        if (message.baseAccount)
            BaseAccount.internalBinaryWrite(message.baseAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string account_owner = 2; */
        if (message.accountOwner !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accountOwner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.interchain_accounts.v1.InterchainAccount
 */
export const InterchainAccount = new InterchainAccount$Type();
