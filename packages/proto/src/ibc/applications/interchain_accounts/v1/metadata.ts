// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/applications/interchain_accounts/v1/metadata.proto" (package "ibc.applications.interchain_accounts.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Metadata defines a set of protocol specific data encoded into the ICS27 channel version bytestring
 * See ICS004: https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#Versioning
 *
 * @generated from protobuf message ibc.applications.interchain_accounts.v1.Metadata
 */
export interface Metadata {
    /**
     * version defines the ICS27 protocol version
     *
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * controller_connection_id is the connection identifier associated with the controller chain
     *
     * @generated from protobuf field: string controller_connection_id = 2;
     */
    controllerConnectionId: string;
    /**
     * host_connection_id is the connection identifier associated with the host chain
     *
     * @generated from protobuf field: string host_connection_id = 3;
     */
    hostConnectionId: string;
    /**
     * address defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step
     * NOTE: the address field is empty on the OnChanOpenInit handshake step
     *
     * @generated from protobuf field: string address = 4;
     */
    address: string;
    /**
     * encoding defines the supported codec format
     *
     * @generated from protobuf field: string encoding = 5;
     */
    encoding: string;
    /**
     * tx_type defines the type of transactions the interchain account can execute
     *
     * @generated from protobuf field: string tx_type = 6;
     */
    txType: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("ibc.applications.interchain_accounts.v1.Metadata", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "controller_connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"controller_connection_id\"" } },
            { no: 3, name: "host_connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"host_connection_id\"" } },
            { no: 4, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "encoding", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "tx_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = { version: "", controllerConnectionId: "", hostConnectionId: "", address: "", encoding: "", txType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string controller_connection_id */ 2:
                    message.controllerConnectionId = reader.string();
                    break;
                case /* string host_connection_id */ 3:
                    message.hostConnectionId = reader.string();
                    break;
                case /* string address */ 4:
                    message.address = reader.string();
                    break;
                case /* string encoding */ 5:
                    message.encoding = reader.string();
                    break;
                case /* string tx_type */ 6:
                    message.txType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string controller_connection_id = 2; */
        if (message.controllerConnectionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.controllerConnectionId);
        /* string host_connection_id = 3; */
        if (message.hostConnectionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.hostConnectionId);
        /* string address = 4; */
        if (message.address !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.address);
        /* string encoding = 5; */
        if (message.encoding !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.encoding);
        /* string tx_type = 6; */
        if (message.txType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.txType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.interchain_accounts.v1.Metadata
 */
export const Metadata = new Metadata$Type();
