// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/lightclients/localhost/v1/localhost.proto" (package "ibc.lightclients.localhost.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Height } from "../../../core/client/v1/client";
/**
 * ClientState defines a loopback (localhost) client. It requires (read-only)
 * access to keys outside the client prefix.
 *
 * @generated from protobuf message ibc.lightclients.localhost.v1.ClientState
 */
export interface ClientState {
    /**
     * self chain ID
     *
     * @generated from protobuf field: string chain_id = 1;
     */
    chainId: string;
    /**
     * self latest block height
     *
     * @generated from protobuf field: ibc.core.client.v1.Height height = 2;
     */
    height?: Height;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientState$Type extends MessageType<ClientState> {
    constructor() {
        super("ibc.lightclients.localhost.v1.ClientState", [
            { no: 1, name: "chain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"chain_id\"" } },
            { no: 2, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<ClientState>): ClientState {
        const message = { chainId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientState): ClientState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain_id */ 1:
                    message.chainId = reader.string();
                    break;
                case /* ibc.core.client.v1.Height height */ 2:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chain_id = 1; */
        if (message.chainId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chainId);
        /* ibc.core.client.v1.Height height = 2; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.localhost.v1.ClientState
 */
export const ClientState = new ClientState$Type();
