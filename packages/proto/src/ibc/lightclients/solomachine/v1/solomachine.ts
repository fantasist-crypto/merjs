// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/lightclients/solomachine/v1/solomachine.proto" (package "ibc.lightclients.solomachine.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Channel } from "../../../core/channel/v1/channel";
import { ConnectionEnd } from "../../../core/connection/v1/connection";
import { Any } from "../../../../google/protobuf/any";
/**
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.ClientState
 */
export interface ClientState {
    /**
     * latest sequence of the client state
     *
     * @generated from protobuf field: uint64 sequence = 1;
     */
    sequence: string;
    /**
     * frozen sequence of the solo machine
     *
     * @generated from protobuf field: uint64 frozen_sequence = 2;
     */
    frozenSequence: string;
    /**
     * @generated from protobuf field: ibc.lightclients.solomachine.v1.ConsensusState consensus_state = 3;
     */
    consensusState?: ConsensusState;
    /**
     * when set to true, will allow governance to update a solo machine client.
     * The client will be unfrozen if it is frozen.
     *
     * @generated from protobuf field: bool allow_update_after_proposal = 4;
     */
    allowUpdateAfterProposal: boolean;
}
/**
 * ConsensusState defines a solo machine consensus state. The sequence of a
 * consensus state is contained in the "height" key used in storing the
 * consensus state.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.ConsensusState
 */
export interface ConsensusState {
    /**
     * public key of the solo machine
     *
     * @generated from protobuf field: google.protobuf.Any public_key = 1;
     */
    publicKey?: Any;
    /**
     * diversifier allows the same public key to be re-used across different solo
     * machine clients (potentially on different chains) without being considered
     * misbehaviour.
     *
     * @generated from protobuf field: string diversifier = 2;
     */
    diversifier: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 3;
     */
    timestamp: string;
}
/**
 * Header defines a solo machine consensus header
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.Header
 */
export interface Header {
    /**
     * sequence to update solo machine public key at
     *
     * @generated from protobuf field: uint64 sequence = 1;
     */
    sequence: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 2;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: bytes signature = 3;
     */
    signature: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Any new_public_key = 4;
     */
    newPublicKey?: Any;
    /**
     * @generated from protobuf field: string new_diversifier = 5;
     */
    newDiversifier: string;
}
/**
 * Misbehaviour defines misbehaviour for a solo machine which consists
 * of a sequence and two signatures over different messages at that sequence.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.Misbehaviour
 */
export interface Misbehaviour {
    /**
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
    /**
     * @generated from protobuf field: uint64 sequence = 2;
     */
    sequence: string;
    /**
     * @generated from protobuf field: ibc.lightclients.solomachine.v1.SignatureAndData signature_one = 3;
     */
    signatureOne?: SignatureAndData;
    /**
     * @generated from protobuf field: ibc.lightclients.solomachine.v1.SignatureAndData signature_two = 4;
     */
    signatureTwo?: SignatureAndData;
}
/**
 * SignatureAndData contains a signature and the data signed over to create that
 * signature.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.SignatureAndData
 */
export interface SignatureAndData {
    /**
     * @generated from protobuf field: bytes signature = 1;
     */
    signature: Uint8Array;
    /**
     * @generated from protobuf field: ibc.lightclients.solomachine.v1.DataType data_type = 2;
     */
    dataType: DataType;
    /**
     * @generated from protobuf field: bytes data = 3;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: uint64 timestamp = 4;
     */
    timestamp: string;
}
/**
 * TimestampedSignatureData contains the signature data and the timestamp of the
 * signature.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.TimestampedSignatureData
 */
export interface TimestampedSignatureData {
    /**
     * @generated from protobuf field: bytes signature_data = 1;
     */
    signatureData: Uint8Array;
    /**
     * @generated from protobuf field: uint64 timestamp = 2;
     */
    timestamp: string;
}
/**
 * SignBytes defines the signed bytes used for signature verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.SignBytes
 */
export interface SignBytes {
    /**
     * @generated from protobuf field: uint64 sequence = 1;
     */
    sequence: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 2;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string diversifier = 3;
     */
    diversifier: string;
    /**
     * type of the data used
     *
     * @generated from protobuf field: ibc.lightclients.solomachine.v1.DataType data_type = 4;
     */
    dataType: DataType;
    /**
     * marshaled data
     *
     * @generated from protobuf field: bytes data = 5;
     */
    data: Uint8Array;
}
/**
 * HeaderData returns the SignBytes data for update verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.HeaderData
 */
export interface HeaderData {
    /**
     * header public key
     *
     * @generated from protobuf field: google.protobuf.Any new_pub_key = 1;
     */
    newPubKey?: Any;
    /**
     * header diversifier
     *
     * @generated from protobuf field: string new_diversifier = 2;
     */
    newDiversifier: string;
}
/**
 * ClientStateData returns the SignBytes data for client state verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.ClientStateData
 */
export interface ClientStateData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Any client_state = 2;
     */
    clientState?: Any;
}
/**
 * ConsensusStateData returns the SignBytes data for consensus state
 * verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.ConsensusStateData
 */
export interface ConsensusStateData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Any consensus_state = 2;
     */
    consensusState?: Any;
}
/**
 * ConnectionStateData returns the SignBytes data for connection state
 * verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.ConnectionStateData
 */
export interface ConnectionStateData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.connection.v1.ConnectionEnd connection = 2;
     */
    connection?: ConnectionEnd;
}
/**
 * ChannelStateData returns the SignBytes data for channel state
 * verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.ChannelStateData
 */
export interface ChannelStateData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Channel channel = 2;
     */
    channel?: Channel;
}
/**
 * PacketCommitmentData returns the SignBytes data for packet commitment
 * verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.PacketCommitmentData
 */
export interface PacketCommitmentData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
    /**
     * @generated from protobuf field: bytes commitment = 2;
     */
    commitment: Uint8Array;
}
/**
 * PacketAcknowledgementData returns the SignBytes data for acknowledgement
 * verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.PacketAcknowledgementData
 */
export interface PacketAcknowledgementData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
    /**
     * @generated from protobuf field: bytes acknowledgement = 2;
     */
    acknowledgement: Uint8Array;
}
/**
 * PacketReceiptAbsenceData returns the SignBytes data for
 * packet receipt absence verification.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
 */
export interface PacketReceiptAbsenceData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
}
/**
 * NextSequenceRecvData returns the SignBytes data for verification of the next
 * sequence to be received.
 *
 * @generated from protobuf message ibc.lightclients.solomachine.v1.NextSequenceRecvData
 */
export interface NextSequenceRecvData {
    /**
     * @generated from protobuf field: bytes path = 1;
     */
    path: Uint8Array;
    /**
     * @generated from protobuf field: uint64 next_seq_recv = 2;
     */
    nextSeqRecv: string;
}
/**
 * DataType defines the type of solo machine proof being created. This is done
 * to preserve uniqueness of different data sign byte encodings.
 *
 * @generated from protobuf enum ibc.lightclients.solomachine.v1.DataType
 */
export enum DataType {
    /**
     * Default State
     *
     * @generated from protobuf enum value: DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0;
     */
    UNINITIALIZED_UNSPECIFIED = 0,
    /**
     * Data type for client state verification
     *
     * @generated from protobuf enum value: DATA_TYPE_CLIENT_STATE = 1;
     */
    CLIENT_STATE = 1,
    /**
     * Data type for consensus state verification
     *
     * @generated from protobuf enum value: DATA_TYPE_CONSENSUS_STATE = 2;
     */
    CONSENSUS_STATE = 2,
    /**
     * Data type for connection state verification
     *
     * @generated from protobuf enum value: DATA_TYPE_CONNECTION_STATE = 3;
     */
    CONNECTION_STATE = 3,
    /**
     * Data type for channel state verification
     *
     * @generated from protobuf enum value: DATA_TYPE_CHANNEL_STATE = 4;
     */
    CHANNEL_STATE = 4,
    /**
     * Data type for packet commitment verification
     *
     * @generated from protobuf enum value: DATA_TYPE_PACKET_COMMITMENT = 5;
     */
    PACKET_COMMITMENT = 5,
    /**
     * Data type for packet acknowledgement verification
     *
     * @generated from protobuf enum value: DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6;
     */
    PACKET_ACKNOWLEDGEMENT = 6,
    /**
     * Data type for packet receipt absence verification
     *
     * @generated from protobuf enum value: DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7;
     */
    PACKET_RECEIPT_ABSENCE = 7,
    /**
     * Data type for next sequence recv verification
     *
     * @generated from protobuf enum value: DATA_TYPE_NEXT_SEQUENCE_RECV = 8;
     */
    NEXT_SEQUENCE_RECV = 8,
    /**
     * Data type for header verification
     *
     * @generated from protobuf enum value: DATA_TYPE_HEADER = 9;
     */
    HEADER = 9
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientState$Type extends MessageType<ClientState> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.ClientState", [
            { no: 1, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "frozen_sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"frozen_sequence\"" } },
            { no: 3, name: "consensus_state", kind: "message", T: () => ConsensusState, options: { "gogoproto.moretags": "yaml:\"consensus_state\"" } },
            { no: 4, name: "allow_update_after_proposal", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "gogoproto.moretags": "yaml:\"allow_update_after_proposal\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<ClientState>): ClientState {
        const message = { sequence: "0", frozenSequence: "0", allowUpdateAfterProposal: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientState): ClientState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sequence */ 1:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* uint64 frozen_sequence */ 2:
                    message.frozenSequence = reader.uint64().toString();
                    break;
                case /* ibc.lightclients.solomachine.v1.ConsensusState consensus_state */ 3:
                    message.consensusState = ConsensusState.internalBinaryRead(reader, reader.uint32(), options, message.consensusState);
                    break;
                case /* bool allow_update_after_proposal */ 4:
                    message.allowUpdateAfterProposal = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sequence = 1; */
        if (message.sequence !== "0")
            writer.tag(1, WireType.Varint).uint64(message.sequence);
        /* uint64 frozen_sequence = 2; */
        if (message.frozenSequence !== "0")
            writer.tag(2, WireType.Varint).uint64(message.frozenSequence);
        /* ibc.lightclients.solomachine.v1.ConsensusState consensus_state = 3; */
        if (message.consensusState)
            ConsensusState.internalBinaryWrite(message.consensusState, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool allow_update_after_proposal = 4; */
        if (message.allowUpdateAfterProposal !== false)
            writer.tag(4, WireType.Varint).bool(message.allowUpdateAfterProposal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.ClientState
 */
export const ClientState = new ClientState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsensusState$Type extends MessageType<ConsensusState> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.ConsensusState", [
            { no: 1, name: "public_key", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"public_key\"" } },
            { no: 2, name: "diversifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<ConsensusState>): ConsensusState {
        const message = { diversifier: "", timestamp: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConsensusState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsensusState): ConsensusState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any public_key */ 1:
                    message.publicKey = Any.internalBinaryRead(reader, reader.uint32(), options, message.publicKey);
                    break;
                case /* string diversifier */ 2:
                    message.diversifier = reader.string();
                    break;
                case /* uint64 timestamp */ 3:
                    message.timestamp = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsensusState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any public_key = 1; */
        if (message.publicKey)
            Any.internalBinaryWrite(message.publicKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string diversifier = 2; */
        if (message.diversifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.diversifier);
        /* uint64 timestamp = 3; */
        if (message.timestamp !== "0")
            writer.tag(3, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.ConsensusState
 */
export const ConsensusState = new ConsensusState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Header$Type extends MessageType<Header> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.Header", [
            { no: 1, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "new_public_key", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"new_public_key\"" } },
            { no: 5, name: "new_diversifier", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"new_diversifier\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<Header>): Header {
        const message = { sequence: "0", timestamp: "0", signature: new Uint8Array(0), newDiversifier: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sequence */ 1:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toString();
                    break;
                case /* bytes signature */ 3:
                    message.signature = reader.bytes();
                    break;
                case /* google.protobuf.Any new_public_key */ 4:
                    message.newPublicKey = Any.internalBinaryRead(reader, reader.uint32(), options, message.newPublicKey);
                    break;
                case /* string new_diversifier */ 5:
                    message.newDiversifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sequence = 1; */
        if (message.sequence !== "0")
            writer.tag(1, WireType.Varint).uint64(message.sequence);
        /* uint64 timestamp = 2; */
        if (message.timestamp !== "0")
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* bytes signature = 3; */
        if (message.signature.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.signature);
        /* google.protobuf.Any new_public_key = 4; */
        if (message.newPublicKey)
            Any.internalBinaryWrite(message.newPublicKey, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string new_diversifier = 5; */
        if (message.newDiversifier !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.newDiversifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.Header
 */
export const Header = new Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Misbehaviour$Type extends MessageType<Misbehaviour> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.Misbehaviour", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"client_id\"" } },
            { no: 2, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "signature_one", kind: "message", T: () => SignatureAndData, options: { "gogoproto.moretags": "yaml:\"signature_one\"" } },
            { no: 4, name: "signature_two", kind: "message", T: () => SignatureAndData, options: { "gogoproto.moretags": "yaml:\"signature_two\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<Misbehaviour>): Misbehaviour {
        const message = { clientId: "", sequence: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Misbehaviour>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Misbehaviour): Misbehaviour {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* uint64 sequence */ 2:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* ibc.lightclients.solomachine.v1.SignatureAndData signature_one */ 3:
                    message.signatureOne = SignatureAndData.internalBinaryRead(reader, reader.uint32(), options, message.signatureOne);
                    break;
                case /* ibc.lightclients.solomachine.v1.SignatureAndData signature_two */ 4:
                    message.signatureTwo = SignatureAndData.internalBinaryRead(reader, reader.uint32(), options, message.signatureTwo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Misbehaviour, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* uint64 sequence = 2; */
        if (message.sequence !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sequence);
        /* ibc.lightclients.solomachine.v1.SignatureAndData signature_one = 3; */
        if (message.signatureOne)
            SignatureAndData.internalBinaryWrite(message.signatureOne, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ibc.lightclients.solomachine.v1.SignatureAndData signature_two = 4; */
        if (message.signatureTwo)
            SignatureAndData.internalBinaryWrite(message.signatureTwo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.Misbehaviour
 */
export const Misbehaviour = new Misbehaviour$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureAndData$Type extends MessageType<SignatureAndData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.SignatureAndData", [
            { no: 1, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "data_type", kind: "enum", T: () => ["ibc.lightclients.solomachine.v1.DataType", DataType, "DATA_TYPE_"], options: { "gogoproto.moretags": "yaml:\"data_type\"" } },
            { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<SignatureAndData>): SignatureAndData {
        const message = { signature: new Uint8Array(0), dataType: 0, data: new Uint8Array(0), timestamp: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignatureAndData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureAndData): SignatureAndData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes signature */ 1:
                    message.signature = reader.bytes();
                    break;
                case /* ibc.lightclients.solomachine.v1.DataType data_type */ 2:
                    message.dataType = reader.int32();
                    break;
                case /* bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                case /* uint64 timestamp */ 4:
                    message.timestamp = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureAndData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes signature = 1; */
        if (message.signature.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.signature);
        /* ibc.lightclients.solomachine.v1.DataType data_type = 2; */
        if (message.dataType !== 0)
            writer.tag(2, WireType.Varint).int32(message.dataType);
        /* bytes data = 3; */
        if (message.data.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        /* uint64 timestamp = 4; */
        if (message.timestamp !== "0")
            writer.tag(4, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.SignatureAndData
 */
export const SignatureAndData = new SignatureAndData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimestampedSignatureData$Type extends MessageType<TimestampedSignatureData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.TimestampedSignatureData", [
            { no: 1, name: "signature_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"signature_data\"" } },
            { no: 2, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<TimestampedSignatureData>): TimestampedSignatureData {
        const message = { signatureData: new Uint8Array(0), timestamp: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TimestampedSignatureData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimestampedSignatureData): TimestampedSignatureData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes signature_data */ 1:
                    message.signatureData = reader.bytes();
                    break;
                case /* uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimestampedSignatureData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes signature_data = 1; */
        if (message.signatureData.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.signatureData);
        /* uint64 timestamp = 2; */
        if (message.timestamp !== "0")
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.TimestampedSignatureData
 */
export const TimestampedSignatureData = new TimestampedSignatureData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignBytes$Type extends MessageType<SignBytes> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.SignBytes", [
            { no: 1, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "diversifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "data_type", kind: "enum", T: () => ["ibc.lightclients.solomachine.v1.DataType", DataType, "DATA_TYPE_"], options: { "gogoproto.moretags": "yaml:\"data_type\"" } },
            { no: 5, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<SignBytes>): SignBytes {
        const message = { sequence: "0", timestamp: "0", diversifier: "", dataType: 0, data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignBytes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignBytes): SignBytes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sequence */ 1:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toString();
                    break;
                case /* string diversifier */ 3:
                    message.diversifier = reader.string();
                    break;
                case /* ibc.lightclients.solomachine.v1.DataType data_type */ 4:
                    message.dataType = reader.int32();
                    break;
                case /* bytes data */ 5:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignBytes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sequence = 1; */
        if (message.sequence !== "0")
            writer.tag(1, WireType.Varint).uint64(message.sequence);
        /* uint64 timestamp = 2; */
        if (message.timestamp !== "0")
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* string diversifier = 3; */
        if (message.diversifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.diversifier);
        /* ibc.lightclients.solomachine.v1.DataType data_type = 4; */
        if (message.dataType !== 0)
            writer.tag(4, WireType.Varint).int32(message.dataType);
        /* bytes data = 5; */
        if (message.data.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.SignBytes
 */
export const SignBytes = new SignBytes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HeaderData$Type extends MessageType<HeaderData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.HeaderData", [
            { no: 1, name: "new_pub_key", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"new_pub_key\"" } },
            { no: 2, name: "new_diversifier", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"new_diversifier\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<HeaderData>): HeaderData {
        const message = { newDiversifier: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HeaderData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeaderData): HeaderData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any new_pub_key */ 1:
                    message.newPubKey = Any.internalBinaryRead(reader, reader.uint32(), options, message.newPubKey);
                    break;
                case /* string new_diversifier */ 2:
                    message.newDiversifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeaderData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any new_pub_key = 1; */
        if (message.newPubKey)
            Any.internalBinaryWrite(message.newPubKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string new_diversifier = 2; */
        if (message.newDiversifier !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newDiversifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.HeaderData
 */
export const HeaderData = new HeaderData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientStateData$Type extends MessageType<ClientStateData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.ClientStateData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "client_state", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"client_state\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<ClientStateData>): ClientStateData {
        const message = { path: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientStateData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientStateData): ClientStateData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                case /* google.protobuf.Any client_state */ 2:
                    message.clientState = Any.internalBinaryRead(reader, reader.uint32(), options, message.clientState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientStateData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        /* google.protobuf.Any client_state = 2; */
        if (message.clientState)
            Any.internalBinaryWrite(message.clientState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.ClientStateData
 */
export const ClientStateData = new ClientStateData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsensusStateData$Type extends MessageType<ConsensusStateData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.ConsensusStateData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "consensus_state", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"consensus_state\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<ConsensusStateData>): ConsensusStateData {
        const message = { path: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConsensusStateData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsensusStateData): ConsensusStateData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                case /* google.protobuf.Any consensus_state */ 2:
                    message.consensusState = Any.internalBinaryRead(reader, reader.uint32(), options, message.consensusState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsensusStateData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        /* google.protobuf.Any consensus_state = 2; */
        if (message.consensusState)
            Any.internalBinaryWrite(message.consensusState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.ConsensusStateData
 */
export const ConsensusStateData = new ConsensusStateData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectionStateData$Type extends MessageType<ConnectionStateData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.ConnectionStateData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "connection", kind: "message", T: () => ConnectionEnd }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<ConnectionStateData>): ConnectionStateData {
        const message = { path: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectionStateData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectionStateData): ConnectionStateData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                case /* ibc.core.connection.v1.ConnectionEnd connection */ 2:
                    message.connection = ConnectionEnd.internalBinaryRead(reader, reader.uint32(), options, message.connection);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectionStateData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        /* ibc.core.connection.v1.ConnectionEnd connection = 2; */
        if (message.connection)
            ConnectionEnd.internalBinaryWrite(message.connection, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.ConnectionStateData
 */
export const ConnectionStateData = new ConnectionStateData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelStateData$Type extends MessageType<ChannelStateData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.ChannelStateData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "channel", kind: "message", T: () => Channel }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<ChannelStateData>): ChannelStateData {
        const message = { path: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelStateData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelStateData): ChannelStateData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                case /* ibc.core.channel.v1.Channel channel */ 2:
                    message.channel = Channel.internalBinaryRead(reader, reader.uint32(), options, message.channel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelStateData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        /* ibc.core.channel.v1.Channel channel = 2; */
        if (message.channel)
            Channel.internalBinaryWrite(message.channel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.ChannelStateData
 */
export const ChannelStateData = new ChannelStateData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PacketCommitmentData$Type extends MessageType<PacketCommitmentData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.PacketCommitmentData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "commitment", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PacketCommitmentData>): PacketCommitmentData {
        const message = { path: new Uint8Array(0), commitment: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PacketCommitmentData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PacketCommitmentData): PacketCommitmentData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                case /* bytes commitment */ 2:
                    message.commitment = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PacketCommitmentData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        /* bytes commitment = 2; */
        if (message.commitment.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.commitment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.PacketCommitmentData
 */
export const PacketCommitmentData = new PacketCommitmentData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PacketAcknowledgementData$Type extends MessageType<PacketAcknowledgementData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.PacketAcknowledgementData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "acknowledgement", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PacketAcknowledgementData>): PacketAcknowledgementData {
        const message = { path: new Uint8Array(0), acknowledgement: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PacketAcknowledgementData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PacketAcknowledgementData): PacketAcknowledgementData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                case /* bytes acknowledgement */ 2:
                    message.acknowledgement = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PacketAcknowledgementData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        /* bytes acknowledgement = 2; */
        if (message.acknowledgement.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.acknowledgement);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.PacketAcknowledgementData
 */
export const PacketAcknowledgementData = new PacketAcknowledgementData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PacketReceiptAbsenceData$Type extends MessageType<PacketReceiptAbsenceData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PacketReceiptAbsenceData>): PacketReceiptAbsenceData {
        const message = { path: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PacketReceiptAbsenceData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PacketReceiptAbsenceData): PacketReceiptAbsenceData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PacketReceiptAbsenceData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
 */
export const PacketReceiptAbsenceData = new PacketReceiptAbsenceData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NextSequenceRecvData$Type extends MessageType<NextSequenceRecvData> {
    constructor() {
        super("ibc.lightclients.solomachine.v1.NextSequenceRecvData", [
            { no: 1, name: "path", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "next_seq_recv", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"next_seq_recv\"" } }
        ]);
    }
    create(value?: PartialMessage<NextSequenceRecvData>): NextSequenceRecvData {
        const message = { path: new Uint8Array(0), nextSeqRecv: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NextSequenceRecvData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NextSequenceRecvData): NextSequenceRecvData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes path */ 1:
                    message.path = reader.bytes();
                    break;
                case /* uint64 next_seq_recv */ 2:
                    message.nextSeqRecv = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NextSequenceRecvData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes path = 1; */
        if (message.path.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.path);
        /* uint64 next_seq_recv = 2; */
        if (message.nextSeqRecv !== "0")
            writer.tag(2, WireType.Varint).uint64(message.nextSeqRecv);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.solomachine.v1.NextSequenceRecvData
 */
export const NextSequenceRecvData = new NextSequenceRecvData$Type();
