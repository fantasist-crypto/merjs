// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/core/client/v1/query.proto" (package "ibc.core.client.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./client";
import { ConsensusStateWithHeight } from "./client";
import { PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { IdentifiedClientState } from "./client";
import { PageRequest } from "../../../../cosmos/base/query/v1beta1/pagination";
import { Height } from "./client";
import { Any } from "../../../../google/protobuf/any";
/**
 * QueryClientStateRequest is the request type for the Query/ClientState RPC
 * method
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientStateRequest
 */
export interface QueryClientStateRequest {
    /**
     * client state unique identifier
     *
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
}
/**
 * QueryClientStateResponse is the response type for the Query/ClientState RPC
 * method. Besides the client state, it includes a proof and the height from
 * which the proof was retrieved.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientStateResponse
 */
export interface QueryClientStateResponse {
    /**
     * client state associated with the request identifier
     *
     * @generated from protobuf field: google.protobuf.Any client_state = 1;
     */
    clientState?: Any;
    /**
     * merkle proof of existence
     *
     * @generated from protobuf field: bytes proof = 2;
     */
    proof: Uint8Array;
    /**
     * height at which the proof was retrieved
     *
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
}
/**
 * QueryClientStatesRequest is the request type for the Query/ClientStates RPC
 * method
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientStatesRequest
 */
export interface QueryClientStatesRequest {
    /**
     * pagination request
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * QueryClientStatesResponse is the response type for the Query/ClientStates RPC
 * method.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientStatesResponse
 */
export interface QueryClientStatesResponse {
    /**
     * list of stored ClientStates of the chain.
     *
     * @generated from protobuf field: repeated ibc.core.client.v1.IdentifiedClientState client_states = 1;
     */
    clientStates: IdentifiedClientState[];
    /**
     * pagination response
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryConsensusStateRequest is the request type for the Query/ConsensusState
 * RPC method. Besides the consensus state, it includes a proof and the height
 * from which the proof was retrieved.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryConsensusStateRequest
 */
export interface QueryConsensusStateRequest {
    /**
     * client identifier
     *
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
    /**
     * consensus state revision number
     *
     * @generated from protobuf field: uint64 revision_number = 2;
     */
    revisionNumber: string;
    /**
     * consensus state revision height
     *
     * @generated from protobuf field: uint64 revision_height = 3;
     */
    revisionHeight: string;
    /**
     * latest_height overrrides the height field and queries the latest stored
     * ConsensusState
     *
     * @generated from protobuf field: bool latest_height = 4;
     */
    latestHeight: boolean;
}
/**
 * QueryConsensusStateResponse is the response type for the Query/ConsensusState
 * RPC method
 *
 * @generated from protobuf message ibc.core.client.v1.QueryConsensusStateResponse
 */
export interface QueryConsensusStateResponse {
    /**
     * consensus state associated with the client identifier at the given height
     *
     * @generated from protobuf field: google.protobuf.Any consensus_state = 1;
     */
    consensusState?: Any;
    /**
     * merkle proof of existence
     *
     * @generated from protobuf field: bytes proof = 2;
     */
    proof: Uint8Array;
    /**
     * height at which the proof was retrieved
     *
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
}
/**
 * QueryConsensusStatesRequest is the request type for the Query/ConsensusStates
 * RPC method.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryConsensusStatesRequest
 */
export interface QueryConsensusStatesRequest {
    /**
     * client identifier
     *
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
    /**
     * pagination request
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryConsensusStatesResponse is the response type for the
 * Query/ConsensusStates RPC method
 *
 * @generated from protobuf message ibc.core.client.v1.QueryConsensusStatesResponse
 */
export interface QueryConsensusStatesResponse {
    /**
     * consensus states associated with the identifier
     *
     * @generated from protobuf field: repeated ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 1;
     */
    consensusStates: ConsensusStateWithHeight[];
    /**
     * pagination response
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryClientStatusRequest is the request type for the Query/ClientStatus RPC
 * method
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientStatusRequest
 */
export interface QueryClientStatusRequest {
    /**
     * client unique identifier
     *
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
}
/**
 * QueryClientStatusResponse is the response type for the Query/ClientStatus RPC
 * method. It returns the current status of the IBC client.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientStatusResponse
 */
export interface QueryClientStatusResponse {
    /**
     * @generated from protobuf field: string status = 1;
     */
    status: string;
}
/**
 * QueryClientParamsRequest is the request type for the Query/ClientParams RPC
 * method.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientParamsRequest
 */
export interface QueryClientParamsRequest {
}
/**
 * QueryClientParamsResponse is the response type for the Query/ClientParams RPC
 * method.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryClientParamsResponse
 */
export interface QueryClientParamsResponse {
    /**
     * params defines the parameters of the module.
     *
     * @generated from protobuf field: ibc.core.client.v1.Params params = 1;
     */
    params?: Params;
}
/**
 * QueryUpgradedClientStateRequest is the request type for the
 * Query/UpgradedClientState RPC method
 *
 * @generated from protobuf message ibc.core.client.v1.QueryUpgradedClientStateRequest
 */
export interface QueryUpgradedClientStateRequest {
}
/**
 * QueryUpgradedClientStateResponse is the response type for the
 * Query/UpgradedClientState RPC method.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryUpgradedClientStateResponse
 */
export interface QueryUpgradedClientStateResponse {
    /**
     * client state associated with the request identifier
     *
     * @generated from protobuf field: google.protobuf.Any upgraded_client_state = 1;
     */
    upgradedClientState?: Any;
}
/**
 * QueryUpgradedConsensusStateRequest is the request type for the
 * Query/UpgradedConsensusState RPC method
 *
 * @generated from protobuf message ibc.core.client.v1.QueryUpgradedConsensusStateRequest
 */
export interface QueryUpgradedConsensusStateRequest {
}
/**
 * QueryUpgradedConsensusStateResponse is the response type for the
 * Query/UpgradedConsensusState RPC method.
 *
 * @generated from protobuf message ibc.core.client.v1.QueryUpgradedConsensusStateResponse
 */
export interface QueryUpgradedConsensusStateResponse {
    /**
     * Consensus state associated with the request identifier
     *
     * @generated from protobuf field: google.protobuf.Any upgraded_consensus_state = 1;
     */
    upgradedConsensusState?: Any;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientStateRequest$Type extends MessageType<QueryClientStateRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryClientStateRequest", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryClientStateRequest>): QueryClientStateRequest {
        const message = { clientId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientStateRequest): QueryClientStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClientStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientStateRequest
 */
export const QueryClientStateRequest = new QueryClientStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientStateResponse$Type extends MessageType<QueryClientStateResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryClientStateResponse", [
            { no: 1, name: "client_state", kind: "message", T: () => Any },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryClientStateResponse>): QueryClientStateResponse {
        const message = { proof: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientStateResponse): QueryClientStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any client_state */ 1:
                    message.clientState = Any.internalBinaryRead(reader, reader.uint32(), options, message.clientState);
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClientStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any client_state = 1; */
        if (message.clientState)
            Any.internalBinaryWrite(message.clientState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientStateResponse
 */
export const QueryClientStateResponse = new QueryClientStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientStatesRequest$Type extends MessageType<QueryClientStatesRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryClientStatesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryClientStatesRequest>): QueryClientStatesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientStatesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientStatesRequest): QueryClientStatesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClientStatesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientStatesRequest
 */
export const QueryClientStatesRequest = new QueryClientStatesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientStatesResponse$Type extends MessageType<QueryClientStatesResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryClientStatesResponse", [
            { no: 1, name: "client_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IdentifiedClientState, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "IdentifiedClientStates" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryClientStatesResponse>): QueryClientStatesResponse {
        const message = { clientStates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientStatesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientStatesResponse): QueryClientStatesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.client.v1.IdentifiedClientState client_states */ 1:
                    message.clientStates.push(IdentifiedClientState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClientStatesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ibc.core.client.v1.IdentifiedClientState client_states = 1; */
        for (let i = 0; i < message.clientStates.length; i++)
            IdentifiedClientState.internalBinaryWrite(message.clientStates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientStatesResponse
 */
export const QueryClientStatesResponse = new QueryClientStatesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConsensusStateRequest$Type extends MessageType<QueryConsensusStateRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryConsensusStateRequest", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "revision_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "revision_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "latest_height", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<QueryConsensusStateRequest>): QueryConsensusStateRequest {
        const message = { clientId: "", revisionNumber: "0", revisionHeight: "0", latestHeight: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryConsensusStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConsensusStateRequest): QueryConsensusStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* uint64 revision_number */ 2:
                    message.revisionNumber = reader.uint64().toString();
                    break;
                case /* uint64 revision_height */ 3:
                    message.revisionHeight = reader.uint64().toString();
                    break;
                case /* bool latest_height */ 4:
                    message.latestHeight = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryConsensusStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* uint64 revision_number = 2; */
        if (message.revisionNumber !== "0")
            writer.tag(2, WireType.Varint).uint64(message.revisionNumber);
        /* uint64 revision_height = 3; */
        if (message.revisionHeight !== "0")
            writer.tag(3, WireType.Varint).uint64(message.revisionHeight);
        /* bool latest_height = 4; */
        if (message.latestHeight !== false)
            writer.tag(4, WireType.Varint).bool(message.latestHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryConsensusStateRequest
 */
export const QueryConsensusStateRequest = new QueryConsensusStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConsensusStateResponse$Type extends MessageType<QueryConsensusStateResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryConsensusStateResponse", [
            { no: 1, name: "consensus_state", kind: "message", T: () => Any },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryConsensusStateResponse>): QueryConsensusStateResponse {
        const message = { proof: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryConsensusStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConsensusStateResponse): QueryConsensusStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any consensus_state */ 1:
                    message.consensusState = Any.internalBinaryRead(reader, reader.uint32(), options, message.consensusState);
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryConsensusStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any consensus_state = 1; */
        if (message.consensusState)
            Any.internalBinaryWrite(message.consensusState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryConsensusStateResponse
 */
export const QueryConsensusStateResponse = new QueryConsensusStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConsensusStatesRequest$Type extends MessageType<QueryConsensusStatesRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryConsensusStatesRequest", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryConsensusStatesRequest>): QueryConsensusStatesRequest {
        const message = { clientId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryConsensusStatesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConsensusStatesRequest): QueryConsensusStatesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryConsensusStatesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryConsensusStatesRequest
 */
export const QueryConsensusStatesRequest = new QueryConsensusStatesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConsensusStatesResponse$Type extends MessageType<QueryConsensusStatesResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryConsensusStatesResponse", [
            { no: 1, name: "consensus_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConsensusStateWithHeight, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryConsensusStatesResponse>): QueryConsensusStatesResponse {
        const message = { consensusStates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryConsensusStatesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConsensusStatesResponse): QueryConsensusStatesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.client.v1.ConsensusStateWithHeight consensus_states */ 1:
                    message.consensusStates.push(ConsensusStateWithHeight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryConsensusStatesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 1; */
        for (let i = 0; i < message.consensusStates.length; i++)
            ConsensusStateWithHeight.internalBinaryWrite(message.consensusStates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryConsensusStatesResponse
 */
export const QueryConsensusStatesResponse = new QueryConsensusStatesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientStatusRequest$Type extends MessageType<QueryClientStatusRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryClientStatusRequest", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryClientStatusRequest>): QueryClientStatusRequest {
        const message = { clientId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientStatusRequest): QueryClientStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClientStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientStatusRequest
 */
export const QueryClientStatusRequest = new QueryClientStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientStatusResponse$Type extends MessageType<QueryClientStatusResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryClientStatusResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryClientStatusResponse>): QueryClientStatusResponse {
        const message = { status: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientStatusResponse): QueryClientStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClientStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientStatusResponse
 */
export const QueryClientStatusResponse = new QueryClientStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientParamsRequest$Type extends MessageType<QueryClientParamsRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryClientParamsRequest", []);
    }
    create(value?: PartialMessage<QueryClientParamsRequest>): QueryClientParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientParamsRequest): QueryClientParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryClientParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientParamsRequest
 */
export const QueryClientParamsRequest = new QueryClientParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientParamsResponse$Type extends MessageType<QueryClientParamsResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryClientParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params }
        ]);
    }
    create(value?: PartialMessage<QueryClientParamsResponse>): QueryClientParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClientParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientParamsResponse): QueryClientParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.client.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClientParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.core.client.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryClientParamsResponse
 */
export const QueryClientParamsResponse = new QueryClientParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUpgradedClientStateRequest$Type extends MessageType<QueryUpgradedClientStateRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryUpgradedClientStateRequest", []);
    }
    create(value?: PartialMessage<QueryUpgradedClientStateRequest>): QueryUpgradedClientStateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryUpgradedClientStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUpgradedClientStateRequest): QueryUpgradedClientStateRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryUpgradedClientStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryUpgradedClientStateRequest
 */
export const QueryUpgradedClientStateRequest = new QueryUpgradedClientStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUpgradedClientStateResponse$Type extends MessageType<QueryUpgradedClientStateResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryUpgradedClientStateResponse", [
            { no: 1, name: "upgraded_client_state", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<QueryUpgradedClientStateResponse>): QueryUpgradedClientStateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryUpgradedClientStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUpgradedClientStateResponse): QueryUpgradedClientStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any upgraded_client_state */ 1:
                    message.upgradedClientState = Any.internalBinaryRead(reader, reader.uint32(), options, message.upgradedClientState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryUpgradedClientStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any upgraded_client_state = 1; */
        if (message.upgradedClientState)
            Any.internalBinaryWrite(message.upgradedClientState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryUpgradedClientStateResponse
 */
export const QueryUpgradedClientStateResponse = new QueryUpgradedClientStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUpgradedConsensusStateRequest$Type extends MessageType<QueryUpgradedConsensusStateRequest> {
    constructor() {
        super("ibc.core.client.v1.QueryUpgradedConsensusStateRequest", []);
    }
    create(value?: PartialMessage<QueryUpgradedConsensusStateRequest>): QueryUpgradedConsensusStateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryUpgradedConsensusStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUpgradedConsensusStateRequest): QueryUpgradedConsensusStateRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryUpgradedConsensusStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryUpgradedConsensusStateRequest
 */
export const QueryUpgradedConsensusStateRequest = new QueryUpgradedConsensusStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUpgradedConsensusStateResponse$Type extends MessageType<QueryUpgradedConsensusStateResponse> {
    constructor() {
        super("ibc.core.client.v1.QueryUpgradedConsensusStateResponse", [
            { no: 1, name: "upgraded_consensus_state", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<QueryUpgradedConsensusStateResponse>): QueryUpgradedConsensusStateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryUpgradedConsensusStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUpgradedConsensusStateResponse): QueryUpgradedConsensusStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any upgraded_consensus_state */ 1:
                    message.upgradedConsensusState = Any.internalBinaryRead(reader, reader.uint32(), options, message.upgradedConsensusState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryUpgradedConsensusStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any upgraded_consensus_state = 1; */
        if (message.upgradedConsensusState)
            Any.internalBinaryWrite(message.upgradedConsensusState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.QueryUpgradedConsensusStateResponse
 */
export const QueryUpgradedConsensusStateResponse = new QueryUpgradedConsensusStateResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.core.client.v1.Query
 */
export const Query = new ServiceType("ibc.core.client.v1.Query", [
    { name: "ClientState", options: { "google.api.http": { get: "/ibc/core/client/v1/client_states/{client_id}" } }, I: QueryClientStateRequest, O: QueryClientStateResponse },
    { name: "ClientStates", options: { "google.api.http": { get: "/ibc/core/client/v1/client_states" } }, I: QueryClientStatesRequest, O: QueryClientStatesResponse },
    { name: "ConsensusState", options: { "google.api.http": { get: "/ibc/core/client/v1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}" } }, I: QueryConsensusStateRequest, O: QueryConsensusStateResponse },
    { name: "ConsensusStates", options: { "google.api.http": { get: "/ibc/core/client/v1/consensus_states/{client_id}" } }, I: QueryConsensusStatesRequest, O: QueryConsensusStatesResponse },
    { name: "ClientStatus", options: { "google.api.http": { get: "/ibc/core/client/v1/client_status/{client_id}" } }, I: QueryClientStatusRequest, O: QueryClientStatusResponse },
    { name: "ClientParams", options: { "google.api.http": { get: "/ibc/client/v1/params" } }, I: QueryClientParamsRequest, O: QueryClientParamsResponse },
    { name: "UpgradedClientState", options: { "google.api.http": { get: "/ibc/core/client/v1/upgraded_client_states" } }, I: QueryUpgradedClientStateRequest, O: QueryUpgradedClientStateResponse },
    { name: "UpgradedConsensusState", options: { "google.api.http": { get: "/ibc/core/client/v1/upgraded_consensus_states" } }, I: QueryUpgradedConsensusStateRequest, O: QueryUpgradedConsensusStateResponse }
]);
