// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/core/client/v1/query.proto" (package "ibc.core.client.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryUpgradedConsensusStateResponse } from "./query";
import type { QueryUpgradedConsensusStateRequest } from "./query";
import type { QueryUpgradedClientStateResponse } from "./query";
import type { QueryUpgradedClientStateRequest } from "./query";
import type { QueryClientParamsResponse } from "./query";
import type { QueryClientParamsRequest } from "./query";
import type { QueryClientStatusResponse } from "./query";
import type { QueryClientStatusRequest } from "./query";
import type { QueryConsensusStatesResponse } from "./query";
import type { QueryConsensusStatesRequest } from "./query";
import type { QueryConsensusStateResponse } from "./query";
import type { QueryConsensusStateRequest } from "./query";
import type { QueryClientStatesResponse } from "./query";
import type { QueryClientStatesRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryClientStateResponse } from "./query";
import type { QueryClientStateRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query provides defines the gRPC querier service
 *
 * @generated from protobuf service ibc.core.client.v1.Query
 */
export interface IQueryClient {
    /**
     * ClientState queries an IBC light client.
     *
     * @generated from protobuf rpc: ClientState(ibc.core.client.v1.QueryClientStateRequest) returns (ibc.core.client.v1.QueryClientStateResponse);
     */
    clientState(input: QueryClientStateRequest, options?: RpcOptions): UnaryCall<QueryClientStateRequest, QueryClientStateResponse>;
    /**
     * ClientStates queries all the IBC light clients of a chain.
     *
     * @generated from protobuf rpc: ClientStates(ibc.core.client.v1.QueryClientStatesRequest) returns (ibc.core.client.v1.QueryClientStatesResponse);
     */
    clientStates(input: QueryClientStatesRequest, options?: RpcOptions): UnaryCall<QueryClientStatesRequest, QueryClientStatesResponse>;
    /**
     * ConsensusState queries a consensus state associated with a client state at
     * a given height.
     *
     * @generated from protobuf rpc: ConsensusState(ibc.core.client.v1.QueryConsensusStateRequest) returns (ibc.core.client.v1.QueryConsensusStateResponse);
     */
    consensusState(input: QueryConsensusStateRequest, options?: RpcOptions): UnaryCall<QueryConsensusStateRequest, QueryConsensusStateResponse>;
    /**
     * ConsensusStates queries all the consensus state associated with a given
     * client.
     *
     * @generated from protobuf rpc: ConsensusStates(ibc.core.client.v1.QueryConsensusStatesRequest) returns (ibc.core.client.v1.QueryConsensusStatesResponse);
     */
    consensusStates(input: QueryConsensusStatesRequest, options?: RpcOptions): UnaryCall<QueryConsensusStatesRequest, QueryConsensusStatesResponse>;
    /**
     * Status queries the status of an IBC client.
     *
     * @generated from protobuf rpc: ClientStatus(ibc.core.client.v1.QueryClientStatusRequest) returns (ibc.core.client.v1.QueryClientStatusResponse);
     */
    clientStatus(input: QueryClientStatusRequest, options?: RpcOptions): UnaryCall<QueryClientStatusRequest, QueryClientStatusResponse>;
    /**
     * ClientParams queries all parameters of the ibc client.
     *
     * @generated from protobuf rpc: ClientParams(ibc.core.client.v1.QueryClientParamsRequest) returns (ibc.core.client.v1.QueryClientParamsResponse);
     */
    clientParams(input: QueryClientParamsRequest, options?: RpcOptions): UnaryCall<QueryClientParamsRequest, QueryClientParamsResponse>;
    /**
     * UpgradedClientState queries an Upgraded IBC light client.
     *
     * @generated from protobuf rpc: UpgradedClientState(ibc.core.client.v1.QueryUpgradedClientStateRequest) returns (ibc.core.client.v1.QueryUpgradedClientStateResponse);
     */
    upgradedClientState(input: QueryUpgradedClientStateRequest, options?: RpcOptions): UnaryCall<QueryUpgradedClientStateRequest, QueryUpgradedClientStateResponse>;
    /**
     * UpgradedConsensusState queries an Upgraded IBC consensus state.
     *
     * @generated from protobuf rpc: UpgradedConsensusState(ibc.core.client.v1.QueryUpgradedConsensusStateRequest) returns (ibc.core.client.v1.QueryUpgradedConsensusStateResponse);
     */
    upgradedConsensusState(input: QueryUpgradedConsensusStateRequest, options?: RpcOptions): UnaryCall<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse>;
}
/**
 * Query provides defines the gRPC querier service
 *
 * @generated from protobuf service ibc.core.client.v1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * ClientState queries an IBC light client.
     *
     * @generated from protobuf rpc: ClientState(ibc.core.client.v1.QueryClientStateRequest) returns (ibc.core.client.v1.QueryClientStateResponse);
     */
    clientState(input: QueryClientStateRequest, options?: RpcOptions): UnaryCall<QueryClientStateRequest, QueryClientStateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClientStateRequest, QueryClientStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ClientStates queries all the IBC light clients of a chain.
     *
     * @generated from protobuf rpc: ClientStates(ibc.core.client.v1.QueryClientStatesRequest) returns (ibc.core.client.v1.QueryClientStatesResponse);
     */
    clientStates(input: QueryClientStatesRequest, options?: RpcOptions): UnaryCall<QueryClientStatesRequest, QueryClientStatesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClientStatesRequest, QueryClientStatesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ConsensusState queries a consensus state associated with a client state at
     * a given height.
     *
     * @generated from protobuf rpc: ConsensusState(ibc.core.client.v1.QueryConsensusStateRequest) returns (ibc.core.client.v1.QueryConsensusStateResponse);
     */
    consensusState(input: QueryConsensusStateRequest, options?: RpcOptions): UnaryCall<QueryConsensusStateRequest, QueryConsensusStateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryConsensusStateRequest, QueryConsensusStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ConsensusStates queries all the consensus state associated with a given
     * client.
     *
     * @generated from protobuf rpc: ConsensusStates(ibc.core.client.v1.QueryConsensusStatesRequest) returns (ibc.core.client.v1.QueryConsensusStatesResponse);
     */
    consensusStates(input: QueryConsensusStatesRequest, options?: RpcOptions): UnaryCall<QueryConsensusStatesRequest, QueryConsensusStatesResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryConsensusStatesRequest, QueryConsensusStatesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Status queries the status of an IBC client.
     *
     * @generated from protobuf rpc: ClientStatus(ibc.core.client.v1.QueryClientStatusRequest) returns (ibc.core.client.v1.QueryClientStatusResponse);
     */
    clientStatus(input: QueryClientStatusRequest, options?: RpcOptions): UnaryCall<QueryClientStatusRequest, QueryClientStatusResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClientStatusRequest, QueryClientStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ClientParams queries all parameters of the ibc client.
     *
     * @generated from protobuf rpc: ClientParams(ibc.core.client.v1.QueryClientParamsRequest) returns (ibc.core.client.v1.QueryClientParamsResponse);
     */
    clientParams(input: QueryClientParamsRequest, options?: RpcOptions): UnaryCall<QueryClientParamsRequest, QueryClientParamsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClientParamsRequest, QueryClientParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpgradedClientState queries an Upgraded IBC light client.
     *
     * @generated from protobuf rpc: UpgradedClientState(ibc.core.client.v1.QueryUpgradedClientStateRequest) returns (ibc.core.client.v1.QueryUpgradedClientStateResponse);
     */
    upgradedClientState(input: QueryUpgradedClientStateRequest, options?: RpcOptions): UnaryCall<QueryUpgradedClientStateRequest, QueryUpgradedClientStateResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryUpgradedClientStateRequest, QueryUpgradedClientStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpgradedConsensusState queries an Upgraded IBC consensus state.
     *
     * @generated from protobuf rpc: UpgradedConsensusState(ibc.core.client.v1.QueryUpgradedConsensusStateRequest) returns (ibc.core.client.v1.QueryUpgradedConsensusStateResponse);
     */
    upgradedConsensusState(input: QueryUpgradedConsensusStateRequest, options?: RpcOptions): UnaryCall<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse>("unary", this._transport, method, opt, input);
    }
}
