// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/core/client/v1/genesis.proto" (package "ibc.core.client.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./client";
import { ClientConsensusStates } from "./client";
import { IdentifiedClientState } from "./client";
/**
 * GenesisState defines the ibc client submodule's genesis state.
 *
 * @generated from protobuf message ibc.core.client.v1.GenesisState
 */
export interface GenesisState {
    /**
     * client states with their corresponding identifiers
     *
     * @generated from protobuf field: repeated ibc.core.client.v1.IdentifiedClientState clients = 1;
     */
    clients: IdentifiedClientState[];
    /**
     * consensus states from each client
     *
     * @generated from protobuf field: repeated ibc.core.client.v1.ClientConsensusStates clients_consensus = 2;
     */
    clientsConsensus: ClientConsensusStates[];
    /**
     * metadata from each client
     *
     * @generated from protobuf field: repeated ibc.core.client.v1.IdentifiedGenesisMetadata clients_metadata = 3;
     */
    clientsMetadata: IdentifiedGenesisMetadata[];
    /**
     * @generated from protobuf field: ibc.core.client.v1.Params params = 4;
     */
    params?: Params;
    /**
     * create localhost on initialization
     *
     * @generated from protobuf field: bool create_localhost = 5;
     */
    createLocalhost: boolean;
    /**
     * the sequence for the next generated client identifier
     *
     * @generated from protobuf field: uint64 next_client_sequence = 6;
     */
    nextClientSequence: string;
}
/**
 * GenesisMetadata defines the genesis type for metadata that clients may return
 * with ExportMetadata
 *
 * @generated from protobuf message ibc.core.client.v1.GenesisMetadata
 */
export interface GenesisMetadata {
    /**
     * store key of metadata without clientID-prefix
     *
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * metadata value
     *
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
}
/**
 * IdentifiedGenesisMetadata has the client metadata with the corresponding
 * client id.
 *
 * @generated from protobuf message ibc.core.client.v1.IdentifiedGenesisMetadata
 */
export interface IdentifiedGenesisMetadata {
    /**
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
    /**
     * @generated from protobuf field: repeated ibc.core.client.v1.GenesisMetadata client_metadata = 2;
     */
    clientMetadata: GenesisMetadata[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
    constructor() {
        super("ibc.core.client.v1.GenesisState", [
            { no: 1, name: "clients", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IdentifiedClientState, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "IdentifiedClientStates" } },
            { no: 2, name: "clients_consensus", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientConsensusStates, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"clients_consensus\"", "gogoproto.castrepeated": "ClientsConsensusStates" } },
            { no: 3, name: "clients_metadata", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IdentifiedGenesisMetadata, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"clients_metadata\"" } },
            { no: 4, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 5, name: "create_localhost", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "gogoproto.moretags": "yaml:\"create_localhost\"" } },
            { no: 6, name: "next_client_sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"next_client_sequence\"" } }
        ]);
    }
    create(value?: PartialMessage<GenesisState>): GenesisState {
        const message = { clients: [], clientsConsensus: [], clientsMetadata: [], createLocalhost: false, nextClientSequence: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.client.v1.IdentifiedClientState clients */ 1:
                    message.clients.push(IdentifiedClientState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ibc.core.client.v1.ClientConsensusStates clients_consensus */ 2:
                    message.clientsConsensus.push(ClientConsensusStates.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ibc.core.client.v1.IdentifiedGenesisMetadata clients_metadata */ 3:
                    message.clientsMetadata.push(IdentifiedGenesisMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ibc.core.client.v1.Params params */ 4:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* bool create_localhost */ 5:
                    message.createLocalhost = reader.bool();
                    break;
                case /* uint64 next_client_sequence */ 6:
                    message.nextClientSequence = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ibc.core.client.v1.IdentifiedClientState clients = 1; */
        for (let i = 0; i < message.clients.length; i++)
            IdentifiedClientState.internalBinaryWrite(message.clients[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ibc.core.client.v1.ClientConsensusStates clients_consensus = 2; */
        for (let i = 0; i < message.clientsConsensus.length; i++)
            ClientConsensusStates.internalBinaryWrite(message.clientsConsensus[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ibc.core.client.v1.IdentifiedGenesisMetadata clients_metadata = 3; */
        for (let i = 0; i < message.clientsMetadata.length; i++)
            IdentifiedGenesisMetadata.internalBinaryWrite(message.clientsMetadata[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Params params = 4; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool create_localhost = 5; */
        if (message.createLocalhost !== false)
            writer.tag(5, WireType.Varint).bool(message.createLocalhost);
        /* uint64 next_client_sequence = 6; */
        if (message.nextClientSequence !== "0")
            writer.tag(6, WireType.Varint).uint64(message.nextClientSequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenesisMetadata$Type extends MessageType<GenesisMetadata> {
    constructor() {
        super("ibc.core.client.v1.GenesisMetadata", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<GenesisMetadata>): GenesisMetadata {
        const message = { key: new Uint8Array(0), value: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisMetadata): GenesisMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.GenesisMetadata
 */
export const GenesisMetadata = new GenesisMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentifiedGenesisMetadata$Type extends MessageType<IdentifiedGenesisMetadata> {
    constructor() {
        super("ibc.core.client.v1.IdentifiedGenesisMetadata", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"client_id\"" } },
            { no: 2, name: "client_metadata", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GenesisMetadata, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"client_metadata\"" } }
        ]);
    }
    create(value?: PartialMessage<IdentifiedGenesisMetadata>): IdentifiedGenesisMetadata {
        const message = { clientId: "", clientMetadata: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IdentifiedGenesisMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentifiedGenesisMetadata): IdentifiedGenesisMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* repeated ibc.core.client.v1.GenesisMetadata client_metadata */ 2:
                    message.clientMetadata.push(GenesisMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdentifiedGenesisMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* repeated ibc.core.client.v1.GenesisMetadata client_metadata = 2; */
        for (let i = 0; i < message.clientMetadata.length; i++)
            GenesisMetadata.internalBinaryWrite(message.clientMetadata[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.IdentifiedGenesisMetadata
 */
export const IdentifiedGenesisMetadata = new IdentifiedGenesisMetadata$Type();
