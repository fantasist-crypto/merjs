// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/core/channel/v1/tx.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Packet } from "./channel";
import { Height } from "../../client/v1/client";
import { Channel } from "./channel";
/**
 * MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
 * is called by a relayer on Chain A.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenInit
 */
export interface MsgChannelOpenInit {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Channel channel = 2;
     */
    channel?: Channel;
    /**
     * @generated from protobuf field: string signer = 3;
     */
    signer: string;
}
/**
 * MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenInitResponse
 */
export interface MsgChannelOpenInitResponse {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
}
/**
 * MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
 * on Chain B. The version field within the Channel field has been deprecated. Its
 * value will be ignored by core IBC.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenTry
 */
export interface MsgChannelOpenTry {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * in the case of crossing hello's, when both chains call OpenInit, we need
     * the channel identifier of the previous channel in state INIT
     *
     * @generated from protobuf field: string previous_channel_id = 2;
     */
    previousChannelId: string;
    /**
     * NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
     *
     * @generated from protobuf field: ibc.core.channel.v1.Channel channel = 3;
     */
    channel?: Channel;
    /**
     * @generated from protobuf field: string counterparty_version = 4;
     */
    counterpartyVersion: string;
    /**
     * @generated from protobuf field: bytes proof_init = 5;
     */
    proofInit: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 6;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 7;
     */
    signer: string;
}
/**
 * MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenTryResponse
 */
export interface MsgChannelOpenTryResponse {
}
/**
 * MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
 * the change of channel state to TRYOPEN on Chain B.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenAck
 */
export interface MsgChannelOpenAck {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string counterparty_channel_id = 3;
     */
    counterpartyChannelId: string;
    /**
     * @generated from protobuf field: string counterparty_version = 4;
     */
    counterpartyVersion: string;
    /**
     * @generated from protobuf field: bytes proof_try = 5;
     */
    proofTry: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 6;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 7;
     */
    signer: string;
}
/**
 * MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenAckResponse
 */
export interface MsgChannelOpenAckResponse {
}
/**
 * MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of channel state to OPEN on Chain A.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenConfirm
 */
export interface MsgChannelOpenConfirm {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: bytes proof_ack = 3;
     */
    proofAck: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
 * type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenConfirmResponse
 */
export interface MsgChannelOpenConfirmResponse {
}
/**
 * MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
 * to close a channel with Chain B.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseInit
 */
export interface MsgChannelCloseInit {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string signer = 3;
     */
    signer: string;
}
/**
 * MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseInitResponse
 */
export interface MsgChannelCloseInitResponse {
}
/**
 * MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
 * to acknowledge the change of channel state to CLOSED on Chain A.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseConfirm
 */
export interface MsgChannelCloseConfirm {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: bytes proof_init = 3;
     */
    proofInit: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm response
 * type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseConfirmResponse
 */
export interface MsgChannelCloseConfirmResponse {
}
/**
 * MsgRecvPacket receives incoming IBC packet
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgRecvPacket
 */
export interface MsgRecvPacket {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes proof_commitment = 2;
     */
    proofCommitment: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 4;
     */
    signer: string;
}
/**
 * MsgRecvPacketResponse defines the Msg/RecvPacket response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgRecvPacketResponse
 */
export interface MsgRecvPacketResponse {
}
/**
 * MsgTimeout receives timed-out packet
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeout
 */
export interface MsgTimeout {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes proof_unreceived = 2;
     */
    proofUnreceived: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: uint64 next_sequence_recv = 4;
     */
    nextSequenceRecv: string;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgTimeoutResponse defines the Msg/Timeout response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeoutResponse
 */
export interface MsgTimeoutResponse {
}
/**
 * MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeoutOnClose
 */
export interface MsgTimeoutOnClose {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes proof_unreceived = 2;
     */
    proofUnreceived: Uint8Array;
    /**
     * @generated from protobuf field: bytes proof_close = 3;
     */
    proofClose: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: uint64 next_sequence_recv = 5;
     */
    nextSequenceRecv: string;
    /**
     * @generated from protobuf field: string signer = 6;
     */
    signer: string;
}
/**
 * MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeoutOnCloseResponse
 */
export interface MsgTimeoutOnCloseResponse {
}
/**
 * MsgAcknowledgement receives incoming IBC acknowledgement
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgAcknowledgement
 */
export interface MsgAcknowledgement {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes acknowledgement = 2;
     */
    acknowledgement: Uint8Array;
    /**
     * @generated from protobuf field: bytes proof_acked = 3;
     */
    proofAcked: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgAcknowledgementResponse
 */
export interface MsgAcknowledgementResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenInit$Type extends MessageType<MsgChannelOpenInit> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenInit", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel", kind: "message", T: () => Channel, options: { "gogoproto.nullable": false } },
            { no: 3, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgChannelOpenInit>): MsgChannelOpenInit {
        const message = { portId: "", signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenInit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenInit): MsgChannelOpenInit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* ibc.core.channel.v1.Channel channel */ 2:
                    message.channel = Channel.internalBinaryRead(reader, reader.uint32(), options, message.channel);
                    break;
                case /* string signer */ 3:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgChannelOpenInit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* ibc.core.channel.v1.Channel channel = 2; */
        if (message.channel)
            Channel.internalBinaryWrite(message.channel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 3; */
        if (message.signer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenInit
 */
export const MsgChannelOpenInit = new MsgChannelOpenInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenInitResponse$Type extends MessageType<MsgChannelOpenInitResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenInitResponse", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } }
        ]);
    }
    create(value?: PartialMessage<MsgChannelOpenInitResponse>): MsgChannelOpenInitResponse {
        const message = { channelId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenInitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenInitResponse): MsgChannelOpenInitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgChannelOpenInitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenInitResponse
 */
export const MsgChannelOpenInitResponse = new MsgChannelOpenInitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenTry$Type extends MessageType<MsgChannelOpenTry> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenTry", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "previous_channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"previous_channel_id\"" } },
            { no: 3, name: "channel", kind: "message", T: () => Channel, options: { "gogoproto.nullable": false } },
            { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"counterparty_version\"" } },
            { no: 5, name: "proof_init", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_init\"" } },
            { no: 6, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 7, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgChannelOpenTry>): MsgChannelOpenTry {
        const message = { portId: "", previousChannelId: "", counterpartyVersion: "", proofInit: new Uint8Array(0), signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenTry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenTry): MsgChannelOpenTry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string previous_channel_id */ 2:
                    message.previousChannelId = reader.string();
                    break;
                case /* ibc.core.channel.v1.Channel channel */ 3:
                    message.channel = Channel.internalBinaryRead(reader, reader.uint32(), options, message.channel);
                    break;
                case /* string counterparty_version */ 4:
                    message.counterpartyVersion = reader.string();
                    break;
                case /* bytes proof_init */ 5:
                    message.proofInit = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 6:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 7:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgChannelOpenTry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string previous_channel_id = 2; */
        if (message.previousChannelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.previousChannelId);
        /* ibc.core.channel.v1.Channel channel = 3; */
        if (message.channel)
            Channel.internalBinaryWrite(message.channel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string counterparty_version = 4; */
        if (message.counterpartyVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.counterpartyVersion);
        /* bytes proof_init = 5; */
        if (message.proofInit.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.proofInit);
        /* ibc.core.client.v1.Height proof_height = 6; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 7; */
        if (message.signer !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenTry
 */
export const MsgChannelOpenTry = new MsgChannelOpenTry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenTryResponse$Type extends MessageType<MsgChannelOpenTryResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenTryResponse", []);
    }
    create(value?: PartialMessage<MsgChannelOpenTryResponse>): MsgChannelOpenTryResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenTryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenTryResponse): MsgChannelOpenTryResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgChannelOpenTryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenTryResponse
 */
export const MsgChannelOpenTryResponse = new MsgChannelOpenTryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenAck$Type extends MessageType<MsgChannelOpenAck> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenAck", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "counterparty_channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"counterparty_channel_id\"" } },
            { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"counterparty_version\"" } },
            { no: 5, name: "proof_try", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_try\"" } },
            { no: 6, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 7, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgChannelOpenAck>): MsgChannelOpenAck {
        const message = { portId: "", channelId: "", counterpartyChannelId: "", counterpartyVersion: "", proofTry: new Uint8Array(0), signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenAck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenAck): MsgChannelOpenAck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* string counterparty_channel_id */ 3:
                    message.counterpartyChannelId = reader.string();
                    break;
                case /* string counterparty_version */ 4:
                    message.counterpartyVersion = reader.string();
                    break;
                case /* bytes proof_try */ 5:
                    message.proofTry = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 6:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 7:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgChannelOpenAck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* string counterparty_channel_id = 3; */
        if (message.counterpartyChannelId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.counterpartyChannelId);
        /* string counterparty_version = 4; */
        if (message.counterpartyVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.counterpartyVersion);
        /* bytes proof_try = 5; */
        if (message.proofTry.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.proofTry);
        /* ibc.core.client.v1.Height proof_height = 6; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 7; */
        if (message.signer !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenAck
 */
export const MsgChannelOpenAck = new MsgChannelOpenAck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenAckResponse$Type extends MessageType<MsgChannelOpenAckResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenAckResponse", []);
    }
    create(value?: PartialMessage<MsgChannelOpenAckResponse>): MsgChannelOpenAckResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenAckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenAckResponse): MsgChannelOpenAckResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgChannelOpenAckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenAckResponse
 */
export const MsgChannelOpenAckResponse = new MsgChannelOpenAckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenConfirm$Type extends MessageType<MsgChannelOpenConfirm> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenConfirm", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "proof_ack", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_ack\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgChannelOpenConfirm>): MsgChannelOpenConfirm {
        const message = { portId: "", channelId: "", proofAck: new Uint8Array(0), signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenConfirm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenConfirm): MsgChannelOpenConfirm {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* bytes proof_ack */ 3:
                    message.proofAck = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgChannelOpenConfirm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* bytes proof_ack = 3; */
        if (message.proofAck.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofAck);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenConfirm
 */
export const MsgChannelOpenConfirm = new MsgChannelOpenConfirm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenConfirmResponse$Type extends MessageType<MsgChannelOpenConfirmResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenConfirmResponse", []);
    }
    create(value?: PartialMessage<MsgChannelOpenConfirmResponse>): MsgChannelOpenConfirmResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelOpenConfirmResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenConfirmResponse): MsgChannelOpenConfirmResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgChannelOpenConfirmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenConfirmResponse
 */
export const MsgChannelOpenConfirmResponse = new MsgChannelOpenConfirmResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseInit$Type extends MessageType<MsgChannelCloseInit> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseInit", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgChannelCloseInit>): MsgChannelCloseInit {
        const message = { portId: "", channelId: "", signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelCloseInit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseInit): MsgChannelCloseInit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* string signer */ 3:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgChannelCloseInit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* string signer = 3; */
        if (message.signer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseInit
 */
export const MsgChannelCloseInit = new MsgChannelCloseInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseInitResponse$Type extends MessageType<MsgChannelCloseInitResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseInitResponse", []);
    }
    create(value?: PartialMessage<MsgChannelCloseInitResponse>): MsgChannelCloseInitResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelCloseInitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseInitResponse): MsgChannelCloseInitResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgChannelCloseInitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseInitResponse
 */
export const MsgChannelCloseInitResponse = new MsgChannelCloseInitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseConfirm$Type extends MessageType<MsgChannelCloseConfirm> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseConfirm", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "proof_init", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_init\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgChannelCloseConfirm>): MsgChannelCloseConfirm {
        const message = { portId: "", channelId: "", proofInit: new Uint8Array(0), signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelCloseConfirm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseConfirm): MsgChannelCloseConfirm {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* bytes proof_init */ 3:
                    message.proofInit = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgChannelCloseConfirm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* bytes proof_init = 3; */
        if (message.proofInit.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofInit);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseConfirm
 */
export const MsgChannelCloseConfirm = new MsgChannelCloseConfirm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseConfirmResponse$Type extends MessageType<MsgChannelCloseConfirmResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseConfirmResponse", []);
    }
    create(value?: PartialMessage<MsgChannelCloseConfirmResponse>): MsgChannelCloseConfirmResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgChannelCloseConfirmResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseConfirmResponse): MsgChannelCloseConfirmResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgChannelCloseConfirmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseConfirmResponse
 */
export const MsgChannelCloseConfirmResponse = new MsgChannelCloseConfirmResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgRecvPacket$Type extends MessageType<MsgRecvPacket> {
    constructor() {
        super("ibc.core.channel.v1.MsgRecvPacket", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "proof_commitment", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_commitment\"" } },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 4, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgRecvPacket>): MsgRecvPacket {
        const message = { proofCommitment: new Uint8Array(0), signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgRecvPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgRecvPacket): MsgRecvPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes proof_commitment */ 2:
                    message.proofCommitment = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 4:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgRecvPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_commitment = 2; */
        if (message.proofCommitment.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proofCommitment);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 4; */
        if (message.signer !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgRecvPacket
 */
export const MsgRecvPacket = new MsgRecvPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgRecvPacketResponse$Type extends MessageType<MsgRecvPacketResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgRecvPacketResponse", []);
    }
    create(value?: PartialMessage<MsgRecvPacketResponse>): MsgRecvPacketResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgRecvPacketResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgRecvPacketResponse): MsgRecvPacketResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgRecvPacketResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgRecvPacketResponse
 */
export const MsgRecvPacketResponse = new MsgRecvPacketResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeout$Type extends MessageType<MsgTimeout> {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeout", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_unreceived\"" } },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 4, name: "next_sequence_recv", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"next_sequence_recv\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgTimeout>): MsgTimeout {
        const message = { proofUnreceived: new Uint8Array(0), nextSequenceRecv: "0", signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgTimeout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeout): MsgTimeout {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes proof_unreceived */ 2:
                    message.proofUnreceived = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* uint64 next_sequence_recv */ 4:
                    message.nextSequenceRecv = reader.uint64().toString();
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgTimeout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_unreceived = 2; */
        if (message.proofUnreceived.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proofUnreceived);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 next_sequence_recv = 4; */
        if (message.nextSequenceRecv !== "0")
            writer.tag(4, WireType.Varint).uint64(message.nextSequenceRecv);
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeout
 */
export const MsgTimeout = new MsgTimeout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeoutResponse$Type extends MessageType<MsgTimeoutResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeoutResponse", []);
    }
    create(value?: PartialMessage<MsgTimeoutResponse>): MsgTimeoutResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgTimeoutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeoutResponse): MsgTimeoutResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgTimeoutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutResponse
 */
export const MsgTimeoutResponse = new MsgTimeoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeoutOnClose$Type extends MessageType<MsgTimeoutOnClose> {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeoutOnClose", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_unreceived\"" } },
            { no: 3, name: "proof_close", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_close\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "next_sequence_recv", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"next_sequence_recv\"" } },
            { no: 6, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgTimeoutOnClose>): MsgTimeoutOnClose {
        const message = { proofUnreceived: new Uint8Array(0), proofClose: new Uint8Array(0), nextSequenceRecv: "0", signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgTimeoutOnClose>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeoutOnClose): MsgTimeoutOnClose {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes proof_unreceived */ 2:
                    message.proofUnreceived = reader.bytes();
                    break;
                case /* bytes proof_close */ 3:
                    message.proofClose = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* uint64 next_sequence_recv */ 5:
                    message.nextSequenceRecv = reader.uint64().toString();
                    break;
                case /* string signer */ 6:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgTimeoutOnClose, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_unreceived = 2; */
        if (message.proofUnreceived.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proofUnreceived);
        /* bytes proof_close = 3; */
        if (message.proofClose.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofClose);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 next_sequence_recv = 5; */
        if (message.nextSequenceRecv !== "0")
            writer.tag(5, WireType.Varint).uint64(message.nextSequenceRecv);
        /* string signer = 6; */
        if (message.signer !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutOnClose
 */
export const MsgTimeoutOnClose = new MsgTimeoutOnClose$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeoutOnCloseResponse$Type extends MessageType<MsgTimeoutOnCloseResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeoutOnCloseResponse", []);
    }
    create(value?: PartialMessage<MsgTimeoutOnCloseResponse>): MsgTimeoutOnCloseResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgTimeoutOnCloseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeoutOnCloseResponse): MsgTimeoutOnCloseResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgTimeoutOnCloseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutOnCloseResponse
 */
export const MsgTimeoutOnCloseResponse = new MsgTimeoutOnCloseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAcknowledgement$Type extends MessageType<MsgAcknowledgement> {
    constructor() {
        super("ibc.core.channel.v1.MsgAcknowledgement", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "acknowledgement", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_acked", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_acked\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgAcknowledgement>): MsgAcknowledgement {
        const message = { acknowledgement: new Uint8Array(0), proofAcked: new Uint8Array(0), signer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAcknowledgement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAcknowledgement): MsgAcknowledgement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes acknowledgement */ 2:
                    message.acknowledgement = reader.bytes();
                    break;
                case /* bytes proof_acked */ 3:
                    message.proofAcked = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgAcknowledgement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes acknowledgement = 2; */
        if (message.acknowledgement.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.acknowledgement);
        /* bytes proof_acked = 3; */
        if (message.proofAcked.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofAcked);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgAcknowledgement
 */
export const MsgAcknowledgement = new MsgAcknowledgement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAcknowledgementResponse$Type extends MessageType<MsgAcknowledgementResponse> {
    constructor() {
        super("ibc.core.channel.v1.MsgAcknowledgementResponse", []);
    }
    create(value?: PartialMessage<MsgAcknowledgementResponse>): MsgAcknowledgementResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAcknowledgementResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAcknowledgementResponse): MsgAcknowledgementResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgAcknowledgementResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgAcknowledgementResponse
 */
export const MsgAcknowledgementResponse = new MsgAcknowledgementResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.core.channel.v1.Msg
 */
export const Msg = new ServiceType("ibc.core.channel.v1.Msg", [
    { name: "ChannelOpenInit", options: {}, I: MsgChannelOpenInit, O: MsgChannelOpenInitResponse },
    { name: "ChannelOpenTry", options: {}, I: MsgChannelOpenTry, O: MsgChannelOpenTryResponse },
    { name: "ChannelOpenAck", options: {}, I: MsgChannelOpenAck, O: MsgChannelOpenAckResponse },
    { name: "ChannelOpenConfirm", options: {}, I: MsgChannelOpenConfirm, O: MsgChannelOpenConfirmResponse },
    { name: "ChannelCloseInit", options: {}, I: MsgChannelCloseInit, O: MsgChannelCloseInitResponse },
    { name: "ChannelCloseConfirm", options: {}, I: MsgChannelCloseConfirm, O: MsgChannelCloseConfirmResponse },
    { name: "RecvPacket", options: {}, I: MsgRecvPacket, O: MsgRecvPacketResponse },
    { name: "Timeout", options: {}, I: MsgTimeout, O: MsgTimeoutResponse },
    { name: "TimeoutOnClose", options: {}, I: MsgTimeoutOnClose, O: MsgTimeoutOnCloseResponse },
    { name: "Acknowledgement", options: {}, I: MsgAcknowledgement, O: MsgAcknowledgementResponse }
]);
