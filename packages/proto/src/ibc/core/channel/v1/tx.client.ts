// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/core/channel/v1/tx.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import type { MsgAcknowledgementResponse } from "./tx";
import type { MsgAcknowledgement } from "./tx";
import type { MsgTimeoutOnCloseResponse } from "./tx";
import type { MsgTimeoutOnClose } from "./tx";
import type { MsgTimeoutResponse } from "./tx";
import type { MsgTimeout } from "./tx";
import type { MsgRecvPacketResponse } from "./tx";
import type { MsgRecvPacket } from "./tx";
import type { MsgChannelCloseConfirmResponse } from "./tx";
import type { MsgChannelCloseConfirm } from "./tx";
import type { MsgChannelCloseInitResponse } from "./tx";
import type { MsgChannelCloseInit } from "./tx";
import type { MsgChannelOpenConfirmResponse } from "./tx";
import type { MsgChannelOpenConfirm } from "./tx";
import type { MsgChannelOpenAckResponse } from "./tx";
import type { MsgChannelOpenAck } from "./tx";
import type { MsgChannelOpenTryResponse } from "./tx";
import type { MsgChannelOpenTry } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgChannelOpenInitResponse } from "./tx";
import type { MsgChannelOpenInit } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the ibc/channel Msg service.
 *
 * @generated from protobuf service ibc.core.channel.v1.Msg
 */
export interface IMsgClient {
    /**
     * ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
     *
     * @generated from protobuf rpc: ChannelOpenInit(ibc.core.channel.v1.MsgChannelOpenInit) returns (ibc.core.channel.v1.MsgChannelOpenInitResponse);
     */
    channelOpenInit(input: MsgChannelOpenInit, options?: RpcOptions): UnaryCall<MsgChannelOpenInit, MsgChannelOpenInitResponse>;
    /**
     * ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
     *
     * @generated from protobuf rpc: ChannelOpenTry(ibc.core.channel.v1.MsgChannelOpenTry) returns (ibc.core.channel.v1.MsgChannelOpenTryResponse);
     */
    channelOpenTry(input: MsgChannelOpenTry, options?: RpcOptions): UnaryCall<MsgChannelOpenTry, MsgChannelOpenTryResponse>;
    /**
     * ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
     *
     * @generated from protobuf rpc: ChannelOpenAck(ibc.core.channel.v1.MsgChannelOpenAck) returns (ibc.core.channel.v1.MsgChannelOpenAckResponse);
     */
    channelOpenAck(input: MsgChannelOpenAck, options?: RpcOptions): UnaryCall<MsgChannelOpenAck, MsgChannelOpenAckResponse>;
    /**
     * ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
     *
     * @generated from protobuf rpc: ChannelOpenConfirm(ibc.core.channel.v1.MsgChannelOpenConfirm) returns (ibc.core.channel.v1.MsgChannelOpenConfirmResponse);
     */
    channelOpenConfirm(input: MsgChannelOpenConfirm, options?: RpcOptions): UnaryCall<MsgChannelOpenConfirm, MsgChannelOpenConfirmResponse>;
    /**
     * ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
     *
     * @generated from protobuf rpc: ChannelCloseInit(ibc.core.channel.v1.MsgChannelCloseInit) returns (ibc.core.channel.v1.MsgChannelCloseInitResponse);
     */
    channelCloseInit(input: MsgChannelCloseInit, options?: RpcOptions): UnaryCall<MsgChannelCloseInit, MsgChannelCloseInitResponse>;
    /**
     * ChannelCloseConfirm defines a rpc handler method for
     * MsgChannelCloseConfirm.
     *
     * @generated from protobuf rpc: ChannelCloseConfirm(ibc.core.channel.v1.MsgChannelCloseConfirm) returns (ibc.core.channel.v1.MsgChannelCloseConfirmResponse);
     */
    channelCloseConfirm(input: MsgChannelCloseConfirm, options?: RpcOptions): UnaryCall<MsgChannelCloseConfirm, MsgChannelCloseConfirmResponse>;
    /**
     * RecvPacket defines a rpc handler method for MsgRecvPacket.
     *
     * @generated from protobuf rpc: RecvPacket(ibc.core.channel.v1.MsgRecvPacket) returns (ibc.core.channel.v1.MsgRecvPacketResponse);
     */
    recvPacket(input: MsgRecvPacket, options?: RpcOptions): UnaryCall<MsgRecvPacket, MsgRecvPacketResponse>;
    /**
     * Timeout defines a rpc handler method for MsgTimeout.
     *
     * @generated from protobuf rpc: Timeout(ibc.core.channel.v1.MsgTimeout) returns (ibc.core.channel.v1.MsgTimeoutResponse);
     */
    timeout(input: MsgTimeout, options?: RpcOptions): UnaryCall<MsgTimeout, MsgTimeoutResponse>;
    /**
     * TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
     *
     * @generated from protobuf rpc: TimeoutOnClose(ibc.core.channel.v1.MsgTimeoutOnClose) returns (ibc.core.channel.v1.MsgTimeoutOnCloseResponse);
     */
    timeoutOnClose(input: MsgTimeoutOnClose, options?: RpcOptions): UnaryCall<MsgTimeoutOnClose, MsgTimeoutOnCloseResponse>;
    /**
     * Acknowledgement defines a rpc handler method for MsgAcknowledgement.
     *
     * @generated from protobuf rpc: Acknowledgement(ibc.core.channel.v1.MsgAcknowledgement) returns (ibc.core.channel.v1.MsgAcknowledgementResponse);
     */
    acknowledgement(input: MsgAcknowledgement, options?: RpcOptions): UnaryCall<MsgAcknowledgement, MsgAcknowledgementResponse>;
}
/**
 * Msg defines the ibc/channel Msg service.
 *
 * @generated from protobuf service ibc.core.channel.v1.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
     *
     * @generated from protobuf rpc: ChannelOpenInit(ibc.core.channel.v1.MsgChannelOpenInit) returns (ibc.core.channel.v1.MsgChannelOpenInitResponse);
     */
    channelOpenInit(input: MsgChannelOpenInit, options?: RpcOptions): UnaryCall<MsgChannelOpenInit, MsgChannelOpenInitResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgChannelOpenInit, MsgChannelOpenInitResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
     *
     * @generated from protobuf rpc: ChannelOpenTry(ibc.core.channel.v1.MsgChannelOpenTry) returns (ibc.core.channel.v1.MsgChannelOpenTryResponse);
     */
    channelOpenTry(input: MsgChannelOpenTry, options?: RpcOptions): UnaryCall<MsgChannelOpenTry, MsgChannelOpenTryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgChannelOpenTry, MsgChannelOpenTryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
     *
     * @generated from protobuf rpc: ChannelOpenAck(ibc.core.channel.v1.MsgChannelOpenAck) returns (ibc.core.channel.v1.MsgChannelOpenAckResponse);
     */
    channelOpenAck(input: MsgChannelOpenAck, options?: RpcOptions): UnaryCall<MsgChannelOpenAck, MsgChannelOpenAckResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgChannelOpenAck, MsgChannelOpenAckResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
     *
     * @generated from protobuf rpc: ChannelOpenConfirm(ibc.core.channel.v1.MsgChannelOpenConfirm) returns (ibc.core.channel.v1.MsgChannelOpenConfirmResponse);
     */
    channelOpenConfirm(input: MsgChannelOpenConfirm, options?: RpcOptions): UnaryCall<MsgChannelOpenConfirm, MsgChannelOpenConfirmResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgChannelOpenConfirm, MsgChannelOpenConfirmResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
     *
     * @generated from protobuf rpc: ChannelCloseInit(ibc.core.channel.v1.MsgChannelCloseInit) returns (ibc.core.channel.v1.MsgChannelCloseInitResponse);
     */
    channelCloseInit(input: MsgChannelCloseInit, options?: RpcOptions): UnaryCall<MsgChannelCloseInit, MsgChannelCloseInitResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgChannelCloseInit, MsgChannelCloseInitResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChannelCloseConfirm defines a rpc handler method for
     * MsgChannelCloseConfirm.
     *
     * @generated from protobuf rpc: ChannelCloseConfirm(ibc.core.channel.v1.MsgChannelCloseConfirm) returns (ibc.core.channel.v1.MsgChannelCloseConfirmResponse);
     */
    channelCloseConfirm(input: MsgChannelCloseConfirm, options?: RpcOptions): UnaryCall<MsgChannelCloseConfirm, MsgChannelCloseConfirmResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgChannelCloseConfirm, MsgChannelCloseConfirmResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RecvPacket defines a rpc handler method for MsgRecvPacket.
     *
     * @generated from protobuf rpc: RecvPacket(ibc.core.channel.v1.MsgRecvPacket) returns (ibc.core.channel.v1.MsgRecvPacketResponse);
     */
    recvPacket(input: MsgRecvPacket, options?: RpcOptions): UnaryCall<MsgRecvPacket, MsgRecvPacketResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgRecvPacket, MsgRecvPacketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Timeout defines a rpc handler method for MsgTimeout.
     *
     * @generated from protobuf rpc: Timeout(ibc.core.channel.v1.MsgTimeout) returns (ibc.core.channel.v1.MsgTimeoutResponse);
     */
    timeout(input: MsgTimeout, options?: RpcOptions): UnaryCall<MsgTimeout, MsgTimeoutResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgTimeout, MsgTimeoutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
     *
     * @generated from protobuf rpc: TimeoutOnClose(ibc.core.channel.v1.MsgTimeoutOnClose) returns (ibc.core.channel.v1.MsgTimeoutOnCloseResponse);
     */
    timeoutOnClose(input: MsgTimeoutOnClose, options?: RpcOptions): UnaryCall<MsgTimeoutOnClose, MsgTimeoutOnCloseResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgTimeoutOnClose, MsgTimeoutOnCloseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Acknowledgement defines a rpc handler method for MsgAcknowledgement.
     *
     * @generated from protobuf rpc: Acknowledgement(ibc.core.channel.v1.MsgAcknowledgement) returns (ibc.core.channel.v1.MsgAcknowledgementResponse);
     */
    acknowledgement(input: MsgAcknowledgement, options?: RpcOptions): UnaryCall<MsgAcknowledgement, MsgAcknowledgementResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgAcknowledgement, MsgAcknowledgementResponse>("unary", this._transport, method, opt, input);
    }
}
