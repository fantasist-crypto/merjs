// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "ibc/core/channel/v1/channel.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Height } from "../../client/v1/client";
/**
 * Channel defines pipeline for exactly-once packet delivery between specific
 * modules on separate blockchains, which has at least one end capable of
 * sending packets and one end capable of receiving packets.
 *
 * @generated from protobuf message ibc.core.channel.v1.Channel
 */
export interface Channel {
    /**
     * current state of the channel end
     *
     * @generated from protobuf field: ibc.core.channel.v1.State state = 1;
     */
    state: State;
    /**
     * whether the channel is ordered or unordered
     *
     * @generated from protobuf field: ibc.core.channel.v1.Order ordering = 2;
     */
    ordering: Order;
    /**
     * counterparty channel end
     *
     * @generated from protobuf field: ibc.core.channel.v1.Counterparty counterparty = 3;
     */
    counterparty?: Counterparty;
    /**
     * list of connection identifiers, in order, along which packets sent on
     * this channel will travel
     *
     * @generated from protobuf field: repeated string connection_hops = 4;
     */
    connectionHops: string[];
    /**
     * opaque channel version, which is agreed upon during the handshake
     *
     * @generated from protobuf field: string version = 5;
     */
    version: string;
}
/**
 * IdentifiedChannel defines a channel with additional port and channel
 * identifier fields.
 *
 * @generated from protobuf message ibc.core.channel.v1.IdentifiedChannel
 */
export interface IdentifiedChannel {
    /**
     * current state of the channel end
     *
     * @generated from protobuf field: ibc.core.channel.v1.State state = 1;
     */
    state: State;
    /**
     * whether the channel is ordered or unordered
     *
     * @generated from protobuf field: ibc.core.channel.v1.Order ordering = 2;
     */
    ordering: Order;
    /**
     * counterparty channel end
     *
     * @generated from protobuf field: ibc.core.channel.v1.Counterparty counterparty = 3;
     */
    counterparty?: Counterparty;
    /**
     * list of connection identifiers, in order, along which packets sent on
     * this channel will travel
     *
     * @generated from protobuf field: repeated string connection_hops = 4;
     */
    connectionHops: string[];
    /**
     * opaque channel version, which is agreed upon during the handshake
     *
     * @generated from protobuf field: string version = 5;
     */
    version: string;
    /**
     * port identifier
     *
     * @generated from protobuf field: string port_id = 6;
     */
    portId: string;
    /**
     * channel identifier
     *
     * @generated from protobuf field: string channel_id = 7;
     */
    channelId: string;
}
/**
 * Counterparty defines a channel end counterparty
 *
 * @generated from protobuf message ibc.core.channel.v1.Counterparty
 */
export interface Counterparty {
    /**
     * port on the counterparty chain which owns the other end of the channel.
     *
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * channel end on the counterparty chain
     *
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
}
/**
 * Packet defines a type that carries data across different chains through IBC
 *
 * @generated from protobuf message ibc.core.channel.v1.Packet
 */
export interface Packet {
    /**
     * number corresponds to the order of sends and receives, where a Packet
     * with an earlier sequence number must be sent and received before a Packet
     * with a later sequence number.
     *
     * @generated from protobuf field: uint64 sequence = 1;
     */
    sequence: string;
    /**
     * identifies the port on the sending chain.
     *
     * @generated from protobuf field: string source_port = 2;
     */
    sourcePort: string;
    /**
     * identifies the channel end on the sending chain.
     *
     * @generated from protobuf field: string source_channel = 3;
     */
    sourceChannel: string;
    /**
     * identifies the port on the receiving chain.
     *
     * @generated from protobuf field: string destination_port = 4;
     */
    destinationPort: string;
    /**
     * identifies the channel end on the receiving chain.
     *
     * @generated from protobuf field: string destination_channel = 5;
     */
    destinationChannel: string;
    /**
     * actual opaque bytes transferred directly to the application module
     *
     * @generated from protobuf field: bytes data = 6;
     */
    data: Uint8Array;
    /**
     * block height after which the packet times out
     *
     * @generated from protobuf field: ibc.core.client.v1.Height timeout_height = 7;
     */
    timeoutHeight?: Height;
    /**
     * block timestamp (in nanoseconds) after which the packet times out
     *
     * @generated from protobuf field: uint64 timeout_timestamp = 8;
     */
    timeoutTimestamp: string;
}
/**
 * PacketState defines the generic type necessary to retrieve and store
 * packet commitments, acknowledgements, and receipts.
 * Caller is responsible for knowing the context necessary to interpret this
 * state as a commitment, acknowledgement, or a receipt.
 *
 * @generated from protobuf message ibc.core.channel.v1.PacketState
 */
export interface PacketState {
    /**
     * channel port identifier.
     *
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * channel unique identifier.
     *
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * packet sequence.
     *
     * @generated from protobuf field: uint64 sequence = 3;
     */
    sequence: string;
    /**
     * embedded data that represents packet state.
     *
     * @generated from protobuf field: bytes data = 4;
     */
    data: Uint8Array;
}
/**
 * Acknowledgement is the recommended acknowledgement format to be used by
 * app-specific protocols.
 * NOTE: The field numbers 21 and 22 were explicitly chosen to avoid accidental
 * conflicts with other protobuf message formats used for acknowledgements.
 * The first byte of any message with this format will be the non-ASCII values
 * `0xaa` (result) or `0xb2` (error). Implemented as defined by ICS:
 * https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#acknowledgement-envelope
 *
 * @generated from protobuf message ibc.core.channel.v1.Acknowledgement
 */
export interface Acknowledgement {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "result";
        /**
         * @generated from protobuf field: bytes result = 21;
         */
        result: Uint8Array;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: string error = 22;
         */
        error: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * State defines if a channel is in one of the following states:
 * CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
 *
 * @generated from protobuf enum ibc.core.channel.v1.State
 */
export enum State {
    /**
     * Default State
     *
     * @generated from protobuf enum value: STATE_UNINITIALIZED_UNSPECIFIED = 0;
     */
    UNINITIALIZED_UNSPECIFIED = 0,
    /**
     * A channel has just started the opening handshake.
     *
     * @generated from protobuf enum value: STATE_INIT = 1;
     */
    INIT = 1,
    /**
     * A channel has acknowledged the handshake step on the counterparty chain.
     *
     * @generated from protobuf enum value: STATE_TRYOPEN = 2;
     */
    TRYOPEN = 2,
    /**
     * A channel has completed the handshake. Open channels are
     * ready to send and receive packets.
     *
     * @generated from protobuf enum value: STATE_OPEN = 3;
     */
    OPEN = 3,
    /**
     * A channel has been closed and can no longer be used to send or receive
     * packets.
     *
     * @generated from protobuf enum value: STATE_CLOSED = 4;
     */
    CLOSED = 4
}
/**
 * Order defines if a channel is ORDERED or UNORDERED
 *
 * @generated from protobuf enum ibc.core.channel.v1.Order
 */
export enum Order {
    /**
     * zero-value for channel ordering
     *
     * @generated from protobuf enum value: ORDER_NONE_UNSPECIFIED = 0;
     */
    NONE_UNSPECIFIED = 0,
    /**
     * packets can be delivered in any order, which may differ from the order in
     * which they were sent.
     *
     * @generated from protobuf enum value: ORDER_UNORDERED = 1;
     */
    UNORDERED = 1,
    /**
     * packets are delivered exactly in the order which they were sent
     *
     * @generated from protobuf enum value: ORDER_ORDERED = 2;
     */
    ORDERED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Channel$Type extends MessageType<Channel> {
    constructor() {
        super("ibc.core.channel.v1.Channel", [
            { no: 1, name: "state", kind: "enum", T: () => ["ibc.core.channel.v1.State", State, "STATE_"] },
            { no: 2, name: "ordering", kind: "enum", T: () => ["ibc.core.channel.v1.Order", Order, "ORDER_"] },
            { no: 3, name: "counterparty", kind: "message", T: () => Counterparty, options: { "gogoproto.nullable": false } },
            { no: 4, name: "connection_hops", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_hops\"" } },
            { no: 5, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<Channel>): Channel {
        const message = { state: 0, ordering: 0, connectionHops: [], version: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Channel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Channel): Channel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.State state */ 1:
                    message.state = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Order ordering */ 2:
                    message.ordering = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Counterparty counterparty */ 3:
                    message.counterparty = Counterparty.internalBinaryRead(reader, reader.uint32(), options, message.counterparty);
                    break;
                case /* repeated string connection_hops */ 4:
                    message.connectionHops.push(reader.string());
                    break;
                case /* string version */ 5:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Channel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.core.channel.v1.State state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* ibc.core.channel.v1.Order ordering = 2; */
        if (message.ordering !== 0)
            writer.tag(2, WireType.Varint).int32(message.ordering);
        /* ibc.core.channel.v1.Counterparty counterparty = 3; */
        if (message.counterparty)
            Counterparty.internalBinaryWrite(message.counterparty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string connection_hops = 4; */
        for (let i = 0; i < message.connectionHops.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.connectionHops[i]);
        /* string version = 5; */
        if (message.version !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Channel
 */
export const Channel = new Channel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentifiedChannel$Type extends MessageType<IdentifiedChannel> {
    constructor() {
        super("ibc.core.channel.v1.IdentifiedChannel", [
            { no: 1, name: "state", kind: "enum", T: () => ["ibc.core.channel.v1.State", State, "STATE_"] },
            { no: 2, name: "ordering", kind: "enum", T: () => ["ibc.core.channel.v1.Order", Order, "ORDER_"] },
            { no: 3, name: "counterparty", kind: "message", T: () => Counterparty, options: { "gogoproto.nullable": false } },
            { no: 4, name: "connection_hops", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_hops\"" } },
            { no: 5, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<IdentifiedChannel>): IdentifiedChannel {
        const message = { state: 0, ordering: 0, connectionHops: [], version: "", portId: "", channelId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IdentifiedChannel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentifiedChannel): IdentifiedChannel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.State state */ 1:
                    message.state = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Order ordering */ 2:
                    message.ordering = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Counterparty counterparty */ 3:
                    message.counterparty = Counterparty.internalBinaryRead(reader, reader.uint32(), options, message.counterparty);
                    break;
                case /* repeated string connection_hops */ 4:
                    message.connectionHops.push(reader.string());
                    break;
                case /* string version */ 5:
                    message.version = reader.string();
                    break;
                case /* string port_id */ 6:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 7:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdentifiedChannel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ibc.core.channel.v1.State state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* ibc.core.channel.v1.Order ordering = 2; */
        if (message.ordering !== 0)
            writer.tag(2, WireType.Varint).int32(message.ordering);
        /* ibc.core.channel.v1.Counterparty counterparty = 3; */
        if (message.counterparty)
            Counterparty.internalBinaryWrite(message.counterparty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string connection_hops = 4; */
        for (let i = 0; i < message.connectionHops.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.connectionHops[i]);
        /* string version = 5; */
        if (message.version !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.version);
        /* string port_id = 6; */
        if (message.portId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 7; */
        if (message.channelId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.IdentifiedChannel
 */
export const IdentifiedChannel = new IdentifiedChannel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Counterparty$Type extends MessageType<Counterparty> {
    constructor() {
        super("ibc.core.channel.v1.Counterparty", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<Counterparty>): Counterparty {
        const message = { portId: "", channelId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Counterparty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Counterparty): Counterparty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Counterparty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Counterparty
 */
export const Counterparty = new Counterparty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Packet$Type extends MessageType<Packet> {
    constructor() {
        super("ibc.core.channel.v1.Packet", [
            { no: 1, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "source_port", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"source_port\"" } },
            { no: 3, name: "source_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"source_channel\"" } },
            { no: 4, name: "destination_port", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"destination_port\"" } },
            { no: 5, name: "destination_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"destination_channel\"" } },
            { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "timeout_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"timeout_height\"" } },
            { no: 8, name: "timeout_timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"timeout_timestamp\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<Packet>): Packet {
        const message = { sequence: "0", sourcePort: "", sourceChannel: "", destinationPort: "", destinationChannel: "", data: new Uint8Array(0), timeoutTimestamp: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Packet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sequence */ 1:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* string source_port */ 2:
                    message.sourcePort = reader.string();
                    break;
                case /* string source_channel */ 3:
                    message.sourceChannel = reader.string();
                    break;
                case /* string destination_port */ 4:
                    message.destinationPort = reader.string();
                    break;
                case /* string destination_channel */ 5:
                    message.destinationChannel = reader.string();
                    break;
                case /* bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height timeout_height */ 7:
                    message.timeoutHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.timeoutHeight);
                    break;
                case /* uint64 timeout_timestamp */ 8:
                    message.timeoutTimestamp = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sequence = 1; */
        if (message.sequence !== "0")
            writer.tag(1, WireType.Varint).uint64(message.sequence);
        /* string source_port = 2; */
        if (message.sourcePort !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourcePort);
        /* string source_channel = 3; */
        if (message.sourceChannel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sourceChannel);
        /* string destination_port = 4; */
        if (message.destinationPort !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationPort);
        /* string destination_channel = 5; */
        if (message.destinationChannel !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.destinationChannel);
        /* bytes data = 6; */
        if (message.data.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        /* ibc.core.client.v1.Height timeout_height = 7; */
        if (message.timeoutHeight)
            Height.internalBinaryWrite(message.timeoutHeight, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* uint64 timeout_timestamp = 8; */
        if (message.timeoutTimestamp !== "0")
            writer.tag(8, WireType.Varint).uint64(message.timeoutTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Packet
 */
export const Packet = new Packet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PacketState$Type extends MessageType<PacketState> {
    constructor() {
        super("ibc.core.channel.v1.PacketState", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<PacketState>): PacketState {
        const message = { portId: "", channelId: "", sequence: "0", data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PacketState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PacketState): PacketState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* uint64 sequence */ 3:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PacketState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* uint64 sequence = 3; */
        if (message.sequence !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sequence);
        /* bytes data = 4; */
        if (message.data.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.PacketState
 */
export const PacketState = new PacketState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Acknowledgement$Type extends MessageType<Acknowledgement> {
    constructor() {
        super("ibc.core.channel.v1.Acknowledgement", [
            { no: 21, name: "result", kind: "scalar", oneof: "response", T: 12 /*ScalarType.BYTES*/ },
            { no: 22, name: "error", kind: "scalar", oneof: "response", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Acknowledgement>): Acknowledgement {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Acknowledgement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Acknowledgement): Acknowledgement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes result */ 21:
                    message.response = {
                        oneofKind: "result",
                        result: reader.bytes()
                    };
                    break;
                case /* string error */ 22:
                    message.response = {
                        oneofKind: "error",
                        error: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Acknowledgement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes result = 21; */
        if (message.response.oneofKind === "result")
            writer.tag(21, WireType.LengthDelimited).bytes(message.response.result);
        /* string error = 22; */
        if (message.response.oneofKind === "error")
            writer.tag(22, WireType.LengthDelimited).string(message.response.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Acknowledgement
 */
export const Acknowledgement = new Acknowledgement$Type();
