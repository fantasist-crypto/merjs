// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/tx/signing/v1beta1/signing.proto" (package "cosmos.tx.signing.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CompactBitArray } from "../../../crypto/multisig/v1beta1/multisig";
import { Any } from "../../../../google/protobuf/any";
/**
 * SignatureDescriptors wraps multiple SignatureDescriptor's.
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptors
 */
export interface SignatureDescriptors {
    /**
     * signatures are the signature descriptors
     *
     * @generated from protobuf field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1;
     */
    signatures: SignatureDescriptor[];
}
/**
 * SignatureDescriptor is a convenience type which represents the full data for
 * a signature including the public key of the signer, signing modes and the
 * signature itself. It is primarily used for coordinating signatures between
 * clients.
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor
 */
export interface SignatureDescriptor {
    /**
     * public_key is the public key of the signer
     *
     * @generated from protobuf field: google.protobuf.Any public_key = 1;
     */
    publicKey?: Any;
    /**
     * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2;
     */
    data?: SignatureDescriptor_Data;
    /**
     * sequence is the sequence of the account, which describes the
     * number of committed transactions signed by a given address. It is used to prevent
     * replay attacks.
     *
     * @generated from protobuf field: uint64 sequence = 3;
     */
    sequence: string;
}
/**
 * Data represents signature data
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
 */
export interface SignatureDescriptor_Data {
    /**
     * @generated from protobuf oneof: sum
     */
    sum: {
        oneofKind: "single";
        /**
         * single represents a single signer
         *
         * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
         */
        single: SignatureDescriptor_Data_Single;
    } | {
        oneofKind: "multi";
        /**
         * multi represents a multisig signer
         *
         * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
         */
        multi: SignatureDescriptor_Data_Multi;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Single is the signature data for a single signer
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
 */
export interface SignatureDescriptor_Data_Single {
    /**
     * mode is the signing mode of the single signer
     *
     * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignMode mode = 1;
     */
    mode: SignMode;
    /**
     * signature is the raw signature bytes
     *
     * @generated from protobuf field: bytes signature = 2;
     */
    signature: Uint8Array;
}
/**
 * Multi is the signature data for a multisig public key
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
 */
export interface SignatureDescriptor_Data_Multi {
    /**
     * bitarray specifies which keys within the multisig are signing
     *
     * @generated from protobuf field: cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;
     */
    bitarray?: CompactBitArray;
    /**
     * signatures is the signatures of the multi-signature
     *
     * @generated from protobuf field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
     */
    signatures: SignatureDescriptor_Data[];
}
/**
 * SignMode represents a signing mode with its own security guarantees.
 *
 * @generated from protobuf enum cosmos.tx.signing.v1beta1.SignMode
 */
export enum SignMode {
    /**
     * SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
     * rejected
     *
     * @generated from protobuf enum value: SIGN_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
     * verified with raw bytes from Tx
     *
     * @generated from protobuf enum value: SIGN_MODE_DIRECT = 1;
     */
    DIRECT = 1,
    /**
     * SIGN_MODE_TEXTUAL is a future signing mode that will verify some
     * human-readable textual representation on top of the binary representation
     * from SIGN_MODE_DIRECT
     *
     * @generated from protobuf enum value: SIGN_MODE_TEXTUAL = 2;
     */
    TEXTUAL = 2,
    /**
     * SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
     * Amino JSON and will be removed in the future
     *
     * @generated from protobuf enum value: SIGN_MODE_LEGACY_AMINO_JSON = 127;
     */
    LEGACY_AMINO_JSON = 127
}
// @generated message type with reflection information, may provide speed optimized methods
class SignatureDescriptors$Type extends MessageType<SignatureDescriptors> {
    constructor() {
        super("cosmos.tx.signing.v1beta1.SignatureDescriptors", [
            { no: 1, name: "signatures", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SignatureDescriptor }
        ]);
    }
    create(value?: PartialMessage<SignatureDescriptors>): SignatureDescriptors {
        const message = { signatures: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignatureDescriptors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptors): SignatureDescriptors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.tx.signing.v1beta1.SignatureDescriptor signatures */ 1:
                    message.signatures.push(SignatureDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureDescriptors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1; */
        for (let i = 0; i < message.signatures.length; i++)
            SignatureDescriptor.internalBinaryWrite(message.signatures[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptors
 */
export const SignatureDescriptors = new SignatureDescriptors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureDescriptor$Type extends MessageType<SignatureDescriptor> {
    constructor() {
        super("cosmos.tx.signing.v1beta1.SignatureDescriptor", [
            { no: 1, name: "public_key", kind: "message", T: () => Any },
            { no: 2, name: "data", kind: "message", T: () => SignatureDescriptor_Data },
            { no: 3, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<SignatureDescriptor>): SignatureDescriptor {
        const message = { sequence: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignatureDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor): SignatureDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any public_key */ 1:
                    message.publicKey = Any.internalBinaryRead(reader, reader.uint32(), options, message.publicKey);
                    break;
                case /* cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data */ 2:
                    message.data = SignatureDescriptor_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* uint64 sequence */ 3:
                    message.sequence = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any public_key = 1; */
        if (message.publicKey)
            Any.internalBinaryWrite(message.publicKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2; */
        if (message.data)
            SignatureDescriptor_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 sequence = 3; */
        if (message.sequence !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor
 */
export const SignatureDescriptor = new SignatureDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureDescriptor_Data$Type extends MessageType<SignatureDescriptor_Data> {
    constructor() {
        super("cosmos.tx.signing.v1beta1.SignatureDescriptor.Data", [
            { no: 1, name: "single", kind: "message", oneof: "sum", T: () => SignatureDescriptor_Data_Single },
            { no: 2, name: "multi", kind: "message", oneof: "sum", T: () => SignatureDescriptor_Data_Multi }
        ]);
    }
    create(value?: PartialMessage<SignatureDescriptor_Data>): SignatureDescriptor_Data {
        const message = { sum: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignatureDescriptor_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor_Data): SignatureDescriptor_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single */ 1:
                    message.sum = {
                        oneofKind: "single",
                        single: SignatureDescriptor_Data_Single.internalBinaryRead(reader, reader.uint32(), options, (message.sum as any).single)
                    };
                    break;
                case /* cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi */ 2:
                    message.sum = {
                        oneofKind: "multi",
                        multi: SignatureDescriptor_Data_Multi.internalBinaryRead(reader, reader.uint32(), options, (message.sum as any).multi)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureDescriptor_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1; */
        if (message.sum.oneofKind === "single")
            SignatureDescriptor_Data_Single.internalBinaryWrite(message.sum.single, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2; */
        if (message.sum.oneofKind === "multi")
            SignatureDescriptor_Data_Multi.internalBinaryWrite(message.sum.multi, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
 */
export const SignatureDescriptor_Data = new SignatureDescriptor_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureDescriptor_Data_Single$Type extends MessageType<SignatureDescriptor_Data_Single> {
    constructor() {
        super("cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single", [
            { no: 1, name: "mode", kind: "enum", T: () => ["cosmos.tx.signing.v1beta1.SignMode", SignMode, "SIGN_MODE_"] },
            { no: 2, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SignatureDescriptor_Data_Single>): SignatureDescriptor_Data_Single {
        const message = { mode: 0, signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignatureDescriptor_Data_Single>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor_Data_Single): SignatureDescriptor_Data_Single {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.tx.signing.v1beta1.SignMode mode */ 1:
                    message.mode = reader.int32();
                    break;
                case /* bytes signature */ 2:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureDescriptor_Data_Single, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.tx.signing.v1beta1.SignMode mode = 1; */
        if (message.mode !== 0)
            writer.tag(1, WireType.Varint).int32(message.mode);
        /* bytes signature = 2; */
        if (message.signature.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
 */
export const SignatureDescriptor_Data_Single = new SignatureDescriptor_Data_Single$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureDescriptor_Data_Multi$Type extends MessageType<SignatureDescriptor_Data_Multi> {
    constructor() {
        super("cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi", [
            { no: 1, name: "bitarray", kind: "message", T: () => CompactBitArray },
            { no: 2, name: "signatures", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SignatureDescriptor_Data }
        ]);
    }
    create(value?: PartialMessage<SignatureDescriptor_Data_Multi>): SignatureDescriptor_Data_Multi {
        const message = { signatures: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignatureDescriptor_Data_Multi>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor_Data_Multi): SignatureDescriptor_Data_Multi {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray */ 1:
                    message.bitarray = CompactBitArray.internalBinaryRead(reader, reader.uint32(), options, message.bitarray);
                    break;
                case /* repeated cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures */ 2:
                    message.signatures.push(SignatureDescriptor_Data.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureDescriptor_Data_Multi, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1; */
        if (message.bitarray)
            CompactBitArray.internalBinaryWrite(message.bitarray, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2; */
        for (let i = 0; i < message.signatures.length; i++)
            SignatureDescriptor_Data.internalBinaryWrite(message.signatures[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
 */
export const SignatureDescriptor_Data_Multi = new SignatureDescriptor_Data_Multi$Type();
