// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/tx/v1beta1/service.proto" (package "cosmos.tx.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Block } from "../../../tendermint/types/block";
import { BlockID } from "../../../tendermint/types/types";
import { Result } from "../../base/abci/v1beta1/abci";
import { GasInfo } from "../../base/abci/v1beta1/abci";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { TxResponse } from "../../base/abci/v1beta1/abci";
import { Tx } from "./tx";
import { PageRequest } from "../../base/query/v1beta1/pagination";
/**
 * GetTxsEventRequest is the request type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxsEventRequest
 */
export interface GetTxsEventRequest {
    /**
     * events is the list of transaction event type.
     *
     * @generated from protobuf field: repeated string events = 1;
     */
    events: string[];
    /**
     * pagination defines a pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
    /**
     * @generated from protobuf field: cosmos.tx.v1beta1.OrderBy order_by = 3;
     */
    orderBy: OrderBy;
}
/**
 * GetTxsEventResponse is the response type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxsEventResponse
 */
export interface GetTxsEventResponse {
    /**
     * txs is the list of queried transactions.
     *
     * @generated from protobuf field: repeated cosmos.tx.v1beta1.Tx txs = 1;
     */
    txs: Tx[];
    /**
     * tx_responses is the list of queried TxResponses.
     *
     * @generated from protobuf field: repeated cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;
     */
    txResponses: TxResponse[];
    /**
     * pagination defines a pagination for the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 3;
     */
    pagination?: PageResponse;
}
/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.BroadcastTxRequest
 */
export interface BroadcastTxRequest {
    /**
     * tx_bytes is the raw transaction.
     *
     * @generated from protobuf field: bytes tx_bytes = 1;
     */
    txBytes: Uint8Array;
    /**
     * @generated from protobuf field: cosmos.tx.v1beta1.BroadcastMode mode = 2;
     */
    mode: BroadcastMode;
}
/**
 * BroadcastTxResponse is the response type for the
 * Service.BroadcastTx method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.BroadcastTxResponse
 */
export interface BroadcastTxResponse {
    /**
     * tx_response is the queried TxResponses.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.TxResponse tx_response = 1;
     */
    txResponse?: TxResponse;
}
/**
 * SimulateRequest is the request type for the Service.Simulate
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.SimulateRequest
 */
export interface SimulateRequest {
    /**
     * tx is the transaction to simulate.
     * Deprecated. Send raw tx bytes instead.
     *
     * @deprecated
     * @generated from protobuf field: cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true];
     */
    tx?: Tx;
    /**
     * tx_bytes is the raw transaction.
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf field: bytes tx_bytes = 2;
     */
    txBytes: Uint8Array;
}
/**
 * SimulateResponse is the response type for the
 * Service.SimulateRPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.SimulateResponse
 */
export interface SimulateResponse {
    /**
     * gas_info is the information about gas used in the simulation.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
     */
    gasInfo?: GasInfo;
    /**
     * result is the result of the simulation.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.Result result = 2;
     */
    result?: Result;
}
/**
 * GetTxRequest is the request type for the Service.GetTx
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxRequest
 */
export interface GetTxRequest {
    /**
     * hash is the tx hash to query, encoded as a hex string.
     *
     * @generated from protobuf field: string hash = 1;
     */
    hash: string;
}
/**
 * GetTxResponse is the response type for the Service.GetTx method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxResponse
 */
export interface GetTxResponse {
    /**
     * tx is the queried transaction.
     *
     * @generated from protobuf field: cosmos.tx.v1beta1.Tx tx = 1;
     */
    tx?: Tx;
    /**
     * tx_response is the queried TxResponses.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.TxResponse tx_response = 2;
     */
    txResponse?: TxResponse;
}
/**
 * GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
 * RPC method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetBlockWithTxsRequest
 */
export interface GetBlockWithTxsRequest {
    /**
     * height is the height of the block to query.
     *
     * @generated from protobuf field: int64 height = 1;
     */
    height: string;
    /**
     * pagination defines a pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetBlockWithTxsResponse
 */
export interface GetBlockWithTxsResponse {
    /**
     * txs are the transactions in the block.
     *
     * @generated from protobuf field: repeated cosmos.tx.v1beta1.Tx txs = 1;
     */
    txs: Tx[];
    /**
     * @generated from protobuf field: tendermint.types.BlockID block_id = 2;
     */
    blockId?: BlockID;
    /**
     * @generated from protobuf field: tendermint.types.Block block = 3;
     */
    block?: Block;
    /**
     * pagination defines a pagination for the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 4;
     */
    pagination?: PageResponse;
}
/**
 * OrderBy defines the sorting order
 *
 * @generated from protobuf enum cosmos.tx.v1beta1.OrderBy
 */
export enum OrderBy {
    /**
     * ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
     *
     * @generated from protobuf enum value: ORDER_BY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * ORDER_BY_ASC defines ascending order
     *
     * @generated from protobuf enum value: ORDER_BY_ASC = 1;
     */
    ASC = 1,
    /**
     * ORDER_BY_DESC defines descending order
     *
     * @generated from protobuf enum value: ORDER_BY_DESC = 2;
     */
    DESC = 2
}
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
 *
 * @generated from protobuf enum cosmos.tx.v1beta1.BroadcastMode
 */
export enum BroadcastMode {
    /**
     * zero-value for mode ordering
     *
     * @generated from protobuf enum value: BROADCAST_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
     * the tx to be committed in a block.
     *
     * @generated from protobuf enum value: BROADCAST_MODE_BLOCK = 1;
     */
    BLOCK = 1,
    /**
     * BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
     * a CheckTx execution response only.
     *
     * @generated from protobuf enum value: BROADCAST_MODE_SYNC = 2;
     */
    SYNC = 2,
    /**
     * BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
     * immediately.
     *
     * @generated from protobuf enum value: BROADCAST_MODE_ASYNC = 3;
     */
    ASYNC = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GetTxsEventRequest$Type extends MessageType<GetTxsEventRequest> {
    constructor() {
        super("cosmos.tx.v1beta1.GetTxsEventRequest", [
            { no: 1, name: "events", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest },
            { no: 3, name: "order_by", kind: "enum", T: () => ["cosmos.tx.v1beta1.OrderBy", OrderBy, "ORDER_BY_"] }
        ]);
    }
    create(value?: PartialMessage<GetTxsEventRequest>): GetTxsEventRequest {
        const message = { events: [], orderBy: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTxsEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxsEventRequest): GetTxsEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string events */ 1:
                    message.events.push(reader.string());
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* cosmos.tx.v1beta1.OrderBy order_by */ 3:
                    message.orderBy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTxsEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string events = 1; */
        for (let i = 0; i < message.events.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.events[i]);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.tx.v1beta1.OrderBy order_by = 3; */
        if (message.orderBy !== 0)
            writer.tag(3, WireType.Varint).int32(message.orderBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxsEventRequest
 */
export const GetTxsEventRequest = new GetTxsEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTxsEventResponse$Type extends MessageType<GetTxsEventResponse> {
    constructor() {
        super("cosmos.tx.v1beta1.GetTxsEventResponse", [
            { no: 1, name: "txs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tx },
            { no: 2, name: "tx_responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TxResponse },
            { no: 3, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<GetTxsEventResponse>): GetTxsEventResponse {
        const message = { txs: [], txResponses: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTxsEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxsEventResponse): GetTxsEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.tx.v1beta1.Tx txs */ 1:
                    message.txs.push(Tx.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.base.abci.v1beta1.TxResponse tx_responses */ 2:
                    message.txResponses.push(TxResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 3:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTxsEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.tx.v1beta1.Tx txs = 1; */
        for (let i = 0; i < message.txs.length; i++)
            Tx.internalBinaryWrite(message.txs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.abci.v1beta1.TxResponse tx_responses = 2; */
        for (let i = 0; i < message.txResponses.length; i++)
            TxResponse.internalBinaryWrite(message.txResponses[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 3; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxsEventResponse
 */
export const GetTxsEventResponse = new GetTxsEventResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BroadcastTxRequest$Type extends MessageType<BroadcastTxRequest> {
    constructor() {
        super("cosmos.tx.v1beta1.BroadcastTxRequest", [
            { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "mode", kind: "enum", T: () => ["cosmos.tx.v1beta1.BroadcastMode", BroadcastMode, "BROADCAST_MODE_"] }
        ]);
    }
    create(value?: PartialMessage<BroadcastTxRequest>): BroadcastTxRequest {
        const message = { txBytes: new Uint8Array(0), mode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BroadcastTxRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastTxRequest): BroadcastTxRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_bytes */ 1:
                    message.txBytes = reader.bytes();
                    break;
                case /* cosmos.tx.v1beta1.BroadcastMode mode */ 2:
                    message.mode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BroadcastTxRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes tx_bytes = 1; */
        if (message.txBytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txBytes);
        /* cosmos.tx.v1beta1.BroadcastMode mode = 2; */
        if (message.mode !== 0)
            writer.tag(2, WireType.Varint).int32(message.mode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.BroadcastTxRequest
 */
export const BroadcastTxRequest = new BroadcastTxRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BroadcastTxResponse$Type extends MessageType<BroadcastTxResponse> {
    constructor() {
        super("cosmos.tx.v1beta1.BroadcastTxResponse", [
            { no: 1, name: "tx_response", kind: "message", T: () => TxResponse }
        ]);
    }
    create(value?: PartialMessage<BroadcastTxResponse>): BroadcastTxResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BroadcastTxResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastTxResponse): BroadcastTxResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.abci.v1beta1.TxResponse tx_response */ 1:
                    message.txResponse = TxResponse.internalBinaryRead(reader, reader.uint32(), options, message.txResponse);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BroadcastTxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.abci.v1beta1.TxResponse tx_response = 1; */
        if (message.txResponse)
            TxResponse.internalBinaryWrite(message.txResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.BroadcastTxResponse
 */
export const BroadcastTxResponse = new BroadcastTxResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimulateRequest$Type extends MessageType<SimulateRequest> {
    constructor() {
        super("cosmos.tx.v1beta1.SimulateRequest", [
            { no: 1, name: "tx", kind: "message", T: () => Tx },
            { no: 2, name: "tx_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SimulateRequest>): SimulateRequest {
        const message = { txBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimulateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimulateRequest): SimulateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true];*/ 1:
                    message.tx = Tx.internalBinaryRead(reader, reader.uint32(), options, message.tx);
                    break;
                case /* bytes tx_bytes */ 2:
                    message.txBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimulateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true]; */
        if (message.tx)
            Tx.internalBinaryWrite(message.tx, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes tx_bytes = 2; */
        if (message.txBytes.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.txBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.SimulateRequest
 */
export const SimulateRequest = new SimulateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimulateResponse$Type extends MessageType<SimulateResponse> {
    constructor() {
        super("cosmos.tx.v1beta1.SimulateResponse", [
            { no: 1, name: "gas_info", kind: "message", T: () => GasInfo },
            { no: 2, name: "result", kind: "message", T: () => Result }
        ]);
    }
    create(value?: PartialMessage<SimulateResponse>): SimulateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimulateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimulateResponse): SimulateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.abci.v1beta1.GasInfo gas_info */ 1:
                    message.gasInfo = GasInfo.internalBinaryRead(reader, reader.uint32(), options, message.gasInfo);
                    break;
                case /* cosmos.base.abci.v1beta1.Result result */ 2:
                    message.result = Result.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimulateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.abci.v1beta1.GasInfo gas_info = 1; */
        if (message.gasInfo)
            GasInfo.internalBinaryWrite(message.gasInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.abci.v1beta1.Result result = 2; */
        if (message.result)
            Result.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.SimulateResponse
 */
export const SimulateResponse = new SimulateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTxRequest$Type extends MessageType<GetTxRequest> {
    constructor() {
        super("cosmos.tx.v1beta1.GetTxRequest", [
            { no: 1, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTxRequest>): GetTxRequest {
        const message = { hash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTxRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxRequest): GetTxRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hash */ 1:
                    message.hash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTxRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hash = 1; */
        if (message.hash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxRequest
 */
export const GetTxRequest = new GetTxRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTxResponse$Type extends MessageType<GetTxResponse> {
    constructor() {
        super("cosmos.tx.v1beta1.GetTxResponse", [
            { no: 1, name: "tx", kind: "message", T: () => Tx },
            { no: 2, name: "tx_response", kind: "message", T: () => TxResponse }
        ]);
    }
    create(value?: PartialMessage<GetTxResponse>): GetTxResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTxResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxResponse): GetTxResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.tx.v1beta1.Tx tx */ 1:
                    message.tx = Tx.internalBinaryRead(reader, reader.uint32(), options, message.tx);
                    break;
                case /* cosmos.base.abci.v1beta1.TxResponse tx_response */ 2:
                    message.txResponse = TxResponse.internalBinaryRead(reader, reader.uint32(), options, message.txResponse);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.tx.v1beta1.Tx tx = 1; */
        if (message.tx)
            Tx.internalBinaryWrite(message.tx, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.abci.v1beta1.TxResponse tx_response = 2; */
        if (message.txResponse)
            TxResponse.internalBinaryWrite(message.txResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxResponse
 */
export const GetTxResponse = new GetTxResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlockWithTxsRequest$Type extends MessageType<GetBlockWithTxsRequest> {
    constructor() {
        super("cosmos.tx.v1beta1.GetBlockWithTxsRequest", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<GetBlockWithTxsRequest>): GetBlockWithTxsRequest {
        const message = { height: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBlockWithTxsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlockWithTxsRequest): GetBlockWithTxsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toString();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBlockWithTxsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 height = 1; */
        if (message.height !== "0")
            writer.tag(1, WireType.Varint).int64(message.height);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetBlockWithTxsRequest
 */
export const GetBlockWithTxsRequest = new GetBlockWithTxsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlockWithTxsResponse$Type extends MessageType<GetBlockWithTxsResponse> {
    constructor() {
        super("cosmos.tx.v1beta1.GetBlockWithTxsResponse", [
            { no: 1, name: "txs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tx },
            { no: 2, name: "block_id", kind: "message", T: () => BlockID },
            { no: 3, name: "block", kind: "message", T: () => Block },
            { no: 4, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<GetBlockWithTxsResponse>): GetBlockWithTxsResponse {
        const message = { txs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBlockWithTxsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlockWithTxsResponse): GetBlockWithTxsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.tx.v1beta1.Tx txs */ 1:
                    message.txs.push(Tx.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* tendermint.types.BlockID block_id */ 2:
                    message.blockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.blockId);
                    break;
                case /* tendermint.types.Block block */ 3:
                    message.block = Block.internalBinaryRead(reader, reader.uint32(), options, message.block);
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 4:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBlockWithTxsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.tx.v1beta1.Tx txs = 1; */
        for (let i = 0; i < message.txs.length; i++)
            Tx.internalBinaryWrite(message.txs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.BlockID block_id = 2; */
        if (message.blockId)
            BlockID.internalBinaryWrite(message.blockId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.Block block = 3; */
        if (message.block)
            Block.internalBinaryWrite(message.block, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 4; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetBlockWithTxsResponse
 */
export const GetBlockWithTxsResponse = new GetBlockWithTxsResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.tx.v1beta1.Service
 */
export const Service = new ServiceType("cosmos.tx.v1beta1.Service", [
    { name: "Simulate", options: { "google.api.http": { post: "/cosmos/tx/v1beta1/simulate", body: "*" } }, I: SimulateRequest, O: SimulateResponse },
    { name: "GetTx", options: { "google.api.http": { get: "/cosmos/tx/v1beta1/txs/{hash}" } }, I: GetTxRequest, O: GetTxResponse },
    { name: "BroadcastTx", options: { "google.api.http": { post: "/cosmos/tx/v1beta1/txs", body: "*" } }, I: BroadcastTxRequest, O: BroadcastTxResponse },
    { name: "GetTxsEvent", options: { "google.api.http": { get: "/cosmos/tx/v1beta1/txs" } }, I: GetTxsEventRequest, O: GetTxsEventResponse },
    { name: "GetBlockWithTxs", options: { "google.api.http": { get: "/cosmos/tx/v1beta1/txs/block/{height}" } }, I: GetBlockWithTxsRequest, O: GetBlockWithTxsResponse }
]);
