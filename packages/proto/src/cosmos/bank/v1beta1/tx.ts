// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/bank/v1beta1/tx.proto" (package "cosmos.bank.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Output } from "./bank";
import { Input } from "./bank";
import { Coin } from "../../base/v1beta1/coin";
/**
 * MsgSend represents a message to send coins from one account to another.
 *
 * @generated from protobuf message cosmos.bank.v1beta1.MsgSend
 */
export interface MsgSend {
    /**
     * @generated from protobuf field: string from_address = 1;
     */
    fromAddress: string;
    /**
     * @generated from protobuf field: string to_address = 2;
     */
    toAddress: string;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin amount = 3;
     */
    amount: Coin[];
}
/**
 * MsgSendResponse defines the Msg/Send response type.
 *
 * @generated from protobuf message cosmos.bank.v1beta1.MsgSendResponse
 */
export interface MsgSendResponse {
}
/**
 * MsgMultiSend represents an arbitrary multi-in, multi-out send message.
 *
 * @generated from protobuf message cosmos.bank.v1beta1.MsgMultiSend
 */
export interface MsgMultiSend {
    /**
     * @generated from protobuf field: repeated cosmos.bank.v1beta1.Input inputs = 1;
     */
    inputs: Input[];
    /**
     * @generated from protobuf field: repeated cosmos.bank.v1beta1.Output outputs = 2;
     */
    outputs: Output[];
}
/**
 * MsgMultiSendResponse defines the Msg/MultiSend response type.
 *
 * @generated from protobuf message cosmos.bank.v1beta1.MsgMultiSendResponse
 */
export interface MsgMultiSendResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgSend$Type extends MessageType<MsgSend> {
    constructor() {
        super("cosmos.bank.v1beta1.MsgSend", [
            { no: 1, name: "from_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"from_address\"" } },
            { no: 2, name: "to_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"to_address\"" } },
            { no: 3, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgSend>): MsgSend {
        const message = { fromAddress: "", toAddress: "", amount: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSend): MsgSend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_address */ 1:
                    message.fromAddress = reader.string();
                    break;
                case /* string to_address */ 2:
                    message.toAddress = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgSend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_address = 1; */
        if (message.fromAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromAddress);
        /* string to_address = 2; */
        if (message.toAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toAddress);
        /* repeated cosmos.base.v1beta1.Coin amount = 3; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.bank.v1beta1.MsgSend
 */
export const MsgSend = new MsgSend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSendResponse$Type extends MessageType<MsgSendResponse> {
    constructor() {
        super("cosmos.bank.v1beta1.MsgSendResponse", []);
    }
    create(value?: PartialMessage<MsgSendResponse>): MsgSendResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSendResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSendResponse): MsgSendResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgSendResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.bank.v1beta1.MsgSendResponse
 */
export const MsgSendResponse = new MsgSendResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgMultiSend$Type extends MessageType<MsgMultiSend> {
    constructor() {
        super("cosmos.bank.v1beta1.MsgMultiSend", [
            { no: 1, name: "inputs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Input, options: { "gogoproto.nullable": false } },
            { no: 2, name: "outputs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Output, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.equal": false });
    }
    create(value?: PartialMessage<MsgMultiSend>): MsgMultiSend {
        const message = { inputs: [], outputs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgMultiSend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgMultiSend): MsgMultiSend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.bank.v1beta1.Input inputs */ 1:
                    message.inputs.push(Input.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.bank.v1beta1.Output outputs */ 2:
                    message.outputs.push(Output.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgMultiSend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.bank.v1beta1.Input inputs = 1; */
        for (let i = 0; i < message.inputs.length; i++)
            Input.internalBinaryWrite(message.inputs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.bank.v1beta1.Output outputs = 2; */
        for (let i = 0; i < message.outputs.length; i++)
            Output.internalBinaryWrite(message.outputs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.bank.v1beta1.MsgMultiSend
 */
export const MsgMultiSend = new MsgMultiSend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgMultiSendResponse$Type extends MessageType<MsgMultiSendResponse> {
    constructor() {
        super("cosmos.bank.v1beta1.MsgMultiSendResponse", []);
    }
    create(value?: PartialMessage<MsgMultiSendResponse>): MsgMultiSendResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgMultiSendResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgMultiSendResponse): MsgMultiSendResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgMultiSendResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.bank.v1beta1.MsgMultiSendResponse
 */
export const MsgMultiSendResponse = new MsgMultiSendResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.bank.v1beta1.Msg
 */
export const Msg = new ServiceType("cosmos.bank.v1beta1.Msg", [
    { name: "Send", options: {}, I: MsgSend, O: MsgSendResponse },
    { name: "MultiSend", options: {}, I: MsgMultiSend, O: MsgMultiSendResponse }
]);
