// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/bank/v1beta1/query.proto" (package "cosmos.bank.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryDenomsMetadataResponse } from "./query";
import type { QueryDenomsMetadataRequest } from "./query";
import type { QueryDenomMetadataResponse } from "./query";
import type { QueryDenomMetadataRequest } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { QuerySupplyOfResponse } from "./query";
import type { QuerySupplyOfRequest } from "./query";
import type { QueryTotalSupplyResponse } from "./query";
import type { QueryTotalSupplyRequest } from "./query";
import type { QueryAllBalancesResponse } from "./query";
import type { QueryAllBalancesRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryBalanceResponse } from "./query";
import type { QueryBalanceRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.bank.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Balance queries the balance of a single coin for a single account.
     *
     * @generated from protobuf rpc: Balance(cosmos.bank.v1beta1.QueryBalanceRequest) returns (cosmos.bank.v1beta1.QueryBalanceResponse);
     */
    balance(input: QueryBalanceRequest, options?: RpcOptions): UnaryCall<QueryBalanceRequest, QueryBalanceResponse>;
    /**
     * AllBalances queries the balance of all coins for a single account.
     *
     * @generated from protobuf rpc: AllBalances(cosmos.bank.v1beta1.QueryAllBalancesRequest) returns (cosmos.bank.v1beta1.QueryAllBalancesResponse);
     */
    allBalances(input: QueryAllBalancesRequest, options?: RpcOptions): UnaryCall<QueryAllBalancesRequest, QueryAllBalancesResponse>;
    /**
     * TotalSupply queries the total supply of all coins.
     *
     * @generated from protobuf rpc: TotalSupply(cosmos.bank.v1beta1.QueryTotalSupplyRequest) returns (cosmos.bank.v1beta1.QueryTotalSupplyResponse);
     */
    totalSupply(input: QueryTotalSupplyRequest, options?: RpcOptions): UnaryCall<QueryTotalSupplyRequest, QueryTotalSupplyResponse>;
    /**
     * SupplyOf queries the supply of a single coin.
     *
     * @generated from protobuf rpc: SupplyOf(cosmos.bank.v1beta1.QuerySupplyOfRequest) returns (cosmos.bank.v1beta1.QuerySupplyOfResponse);
     */
    supplyOf(input: QuerySupplyOfRequest, options?: RpcOptions): UnaryCall<QuerySupplyOfRequest, QuerySupplyOfResponse>;
    /**
     * Params queries the parameters of x/bank module.
     *
     * @generated from protobuf rpc: Params(cosmos.bank.v1beta1.QueryParamsRequest) returns (cosmos.bank.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * DenomsMetadata queries the client metadata of a given coin denomination.
     *
     * @generated from protobuf rpc: DenomMetadata(cosmos.bank.v1beta1.QueryDenomMetadataRequest) returns (cosmos.bank.v1beta1.QueryDenomMetadataResponse);
     */
    denomMetadata(input: QueryDenomMetadataRequest, options?: RpcOptions): UnaryCall<QueryDenomMetadataRequest, QueryDenomMetadataResponse>;
    /**
     * DenomsMetadata queries the client metadata for all registered coin denominations.
     *
     * @generated from protobuf rpc: DenomsMetadata(cosmos.bank.v1beta1.QueryDenomsMetadataRequest) returns (cosmos.bank.v1beta1.QueryDenomsMetadataResponse);
     */
    denomsMetadata(input: QueryDenomsMetadataRequest, options?: RpcOptions): UnaryCall<QueryDenomsMetadataRequest, QueryDenomsMetadataResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.bank.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Balance queries the balance of a single coin for a single account.
     *
     * @generated from protobuf rpc: Balance(cosmos.bank.v1beta1.QueryBalanceRequest) returns (cosmos.bank.v1beta1.QueryBalanceResponse);
     */
    balance(input: QueryBalanceRequest, options?: RpcOptions): UnaryCall<QueryBalanceRequest, QueryBalanceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryBalanceRequest, QueryBalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AllBalances queries the balance of all coins for a single account.
     *
     * @generated from protobuf rpc: AllBalances(cosmos.bank.v1beta1.QueryAllBalancesRequest) returns (cosmos.bank.v1beta1.QueryAllBalancesResponse);
     */
    allBalances(input: QueryAllBalancesRequest, options?: RpcOptions): UnaryCall<QueryAllBalancesRequest, QueryAllBalancesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllBalancesRequest, QueryAllBalancesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * TotalSupply queries the total supply of all coins.
     *
     * @generated from protobuf rpc: TotalSupply(cosmos.bank.v1beta1.QueryTotalSupplyRequest) returns (cosmos.bank.v1beta1.QueryTotalSupplyResponse);
     */
    totalSupply(input: QueryTotalSupplyRequest, options?: RpcOptions): UnaryCall<QueryTotalSupplyRequest, QueryTotalSupplyResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTotalSupplyRequest, QueryTotalSupplyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SupplyOf queries the supply of a single coin.
     *
     * @generated from protobuf rpc: SupplyOf(cosmos.bank.v1beta1.QuerySupplyOfRequest) returns (cosmos.bank.v1beta1.QuerySupplyOfResponse);
     */
    supplyOf(input: QuerySupplyOfRequest, options?: RpcOptions): UnaryCall<QuerySupplyOfRequest, QuerySupplyOfResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QuerySupplyOfRequest, QuerySupplyOfResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Params queries the parameters of x/bank module.
     *
     * @generated from protobuf rpc: Params(cosmos.bank.v1beta1.QueryParamsRequest) returns (cosmos.bank.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DenomsMetadata queries the client metadata of a given coin denomination.
     *
     * @generated from protobuf rpc: DenomMetadata(cosmos.bank.v1beta1.QueryDenomMetadataRequest) returns (cosmos.bank.v1beta1.QueryDenomMetadataResponse);
     */
    denomMetadata(input: QueryDenomMetadataRequest, options?: RpcOptions): UnaryCall<QueryDenomMetadataRequest, QueryDenomMetadataResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryDenomMetadataRequest, QueryDenomMetadataResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DenomsMetadata queries the client metadata for all registered coin denominations.
     *
     * @generated from protobuf rpc: DenomsMetadata(cosmos.bank.v1beta1.QueryDenomsMetadataRequest) returns (cosmos.bank.v1beta1.QueryDenomsMetadataResponse);
     */
    denomsMetadata(input: QueryDenomsMetadataRequest, options?: RpcOptions): UnaryCall<QueryDenomsMetadataRequest, QueryDenomsMetadataResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryDenomsMetadataRequest, QueryDenomsMetadataResponse>("unary", this._transport, method, opt, input);
    }
}
