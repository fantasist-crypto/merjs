// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/bank/v1beta1/genesis.proto" (package "cosmos.bank.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Metadata } from "./bank";
import { Coin } from "../../base/v1beta1/coin";
import { Params } from "./bank";
/**
 * GenesisState defines the bank module's genesis state.
 *
 * @generated from protobuf message cosmos.bank.v1beta1.GenesisState
 */
export interface GenesisState {
    /**
     * params defines all the paramaters of the module.
     *
     * @generated from protobuf field: cosmos.bank.v1beta1.Params params = 1;
     */
    params?: Params;
    /**
     * balances is an array containing the balances of all the accounts.
     *
     * @generated from protobuf field: repeated cosmos.bank.v1beta1.Balance balances = 2;
     */
    balances: Balance[];
    /**
     * supply represents the total supply. If it is left empty, then supply will be calculated based on the provided
     * balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin supply = 3;
     */
    supply: Coin[];
    /**
     * denom_metadata defines the metadata of the differents coins.
     *
     * @generated from protobuf field: repeated cosmos.bank.v1beta1.Metadata denom_metadata = 4;
     */
    denomMetadata: Metadata[];
}
/**
 * Balance defines an account address and balance pair used in the bank module's
 * genesis state.
 *
 * @generated from protobuf message cosmos.bank.v1beta1.Balance
 */
export interface Balance {
    /**
     * address is the address of the balance holder.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * coins defines the different coins this balance holds.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin coins = 2;
     */
    coins: Coin[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
    constructor() {
        super("cosmos.bank.v1beta1.GenesisState", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 2, name: "balances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Balance, options: { "gogoproto.nullable": false } },
            { no: 3, name: "supply", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 4, name: "denom_metadata", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Metadata, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"denom_metadata\"" } }
        ]);
    }
    create(value?: PartialMessage<GenesisState>): GenesisState {
        const message = { balances: [], supply: [], denomMetadata: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.bank.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* repeated cosmos.bank.v1beta1.Balance balances */ 2:
                    message.balances.push(Balance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.base.v1beta1.Coin supply */ 3:
                    message.supply.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.bank.v1beta1.Metadata denom_metadata */ 4:
                    message.denomMetadata.push(Metadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.bank.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.bank.v1beta1.Balance balances = 2; */
        for (let i = 0; i < message.balances.length; i++)
            Balance.internalBinaryWrite(message.balances[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin supply = 3; */
        for (let i = 0; i < message.supply.length; i++)
            Coin.internalBinaryWrite(message.supply[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.bank.v1beta1.Metadata denom_metadata = 4; */
        for (let i = 0; i < message.denomMetadata.length; i++)
            Metadata.internalBinaryWrite(message.denomMetadata[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.bank.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Balance$Type extends MessageType<Balance> {
    constructor() {
        super("cosmos.bank.v1beta1.Balance", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<Balance>): Balance {
        const message = { address: "", coins: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Balance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Balance): Balance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin coins */ 2:
                    message.coins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Balance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* repeated cosmos.base.v1beta1.Coin coins = 2; */
        for (let i = 0; i < message.coins.length; i++)
            Coin.internalBinaryWrite(message.coins[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.bank.v1beta1.Balance
 */
export const Balance = new Balance$Type();
