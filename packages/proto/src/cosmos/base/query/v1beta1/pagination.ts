// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/base/query/v1beta1/pagination.proto" (package "cosmos.base.query.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * PageRequest is to be embedded in gRPC request messages for efficient
 * pagination. Ex:
 *
 *  message SomeRequest {
 *          Foo some_parameter = 1;
 *          PageRequest pagination = 2;
 *  }
 *
 * @generated from protobuf message cosmos.base.query.v1beta1.PageRequest
 */
export interface PageRequest {
    /**
     * key is a value returned in PageResponse.next_key to begin
     * querying the next page most efficiently. Only one of offset or key
     * should be set.
     *
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * offset is a numeric offset that can be used when key is unavailable.
     * It is less efficient than using key. Only one of offset or key should
     * be set.
     *
     * @generated from protobuf field: uint64 offset = 2;
     */
    offset: string;
    /**
     * limit is the total number of results to be returned in the result page.
     * If left empty it will default to a value to be set by each app.
     *
     * @generated from protobuf field: uint64 limit = 3;
     */
    limit: string;
    /**
     * count_total is set to true  to indicate that the result set should include
     * a count of the total number of items available for pagination in UIs.
     * count_total is only respected when offset is used. It is ignored when key
     * is set.
     *
     * @generated from protobuf field: bool count_total = 4;
     */
    countTotal: boolean;
    /**
     * reverse is set to true if results are to be returned in the descending order.
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf field: bool reverse = 5;
     */
    reverse: boolean;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the
 * corresponding request message has used PageRequest.
 *
 *  message SomeResponse {
 *          repeated Bar results = 1;
 *          PageResponse page = 2;
 *  }
 *
 * @generated from protobuf message cosmos.base.query.v1beta1.PageResponse
 */
export interface PageResponse {
    /**
     * next_key is the key to be passed to PageRequest.key to
     * query the next page most efficiently
     *
     * @generated from protobuf field: bytes next_key = 1;
     */
    nextKey: Uint8Array;
    /**
     * total is total number of results available if PageRequest.count_total
     * was set, its value is undefined otherwise
     *
     * @generated from protobuf field: uint64 total = 2;
     */
    total: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PageRequest$Type extends MessageType<PageRequest> {
    constructor() {
        super("cosmos.base.query.v1beta1.PageRequest", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "offset", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "count_total", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "reverse", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PageRequest>): PageRequest {
        const message = { key: new Uint8Array(0), offset: "0", limit: "0", countTotal: false, reverse: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageRequest): PageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* uint64 offset */ 2:
                    message.offset = reader.uint64().toString();
                    break;
                case /* uint64 limit */ 3:
                    message.limit = reader.uint64().toString();
                    break;
                case /* bool count_total */ 4:
                    message.countTotal = reader.bool();
                    break;
                case /* bool reverse */ 5:
                    message.reverse = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* uint64 offset = 2; */
        if (message.offset !== "0")
            writer.tag(2, WireType.Varint).uint64(message.offset);
        /* uint64 limit = 3; */
        if (message.limit !== "0")
            writer.tag(3, WireType.Varint).uint64(message.limit);
        /* bool count_total = 4; */
        if (message.countTotal !== false)
            writer.tag(4, WireType.Varint).bool(message.countTotal);
        /* bool reverse = 5; */
        if (message.reverse !== false)
            writer.tag(5, WireType.Varint).bool(message.reverse);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.query.v1beta1.PageRequest
 */
export const PageRequest = new PageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageResponse$Type extends MessageType<PageResponse> {
    constructor() {
        super("cosmos.base.query.v1beta1.PageResponse", [
            { no: 1, name: "next_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "total", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<PageResponse>): PageResponse {
        const message = { nextKey: new Uint8Array(0), total: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageResponse): PageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes next_key */ 1:
                    message.nextKey = reader.bytes();
                    break;
                case /* uint64 total */ 2:
                    message.total = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes next_key = 1; */
        if (message.nextKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.nextKey);
        /* uint64 total = 2; */
        if (message.total !== "0")
            writer.tag(2, WireType.Varint).uint64(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.query.v1beta1.PageResponse
 */
export const PageResponse = new PageResponse$Type();
