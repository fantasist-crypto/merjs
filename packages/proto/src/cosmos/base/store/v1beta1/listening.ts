// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/base/store/v1beta1/listening.proto" (package "cosmos.base.store.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * StoreKVPair is a KVStore KVPair used for listening to state changes (Sets and Deletes)
 * It optionally includes the StoreKey for the originating KVStore and a Boolean flag to distinguish between Sets and
 * Deletes
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.base.store.v1beta1.StoreKVPair
 */
export interface StoreKVPair {
    /**
     * @generated from protobuf field: string store_key = 1;
     */
    storeKey: string; // the store key for the KVStore this pair originates from
    /**
     * @generated from protobuf field: bool delete = 2;
     */
    delete: boolean; // true indicates a delete operation, false indicates a set operation
    /**
     * @generated from protobuf field: bytes key = 3;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 4;
     */
    value: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class StoreKVPair$Type extends MessageType<StoreKVPair> {
    constructor() {
        super("cosmos.base.store.v1beta1.StoreKVPair", [
            { no: 1, name: "store_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "delete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<StoreKVPair>): StoreKVPair {
        const message = { storeKey: "", delete: false, key: new Uint8Array(0), value: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreKVPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreKVPair): StoreKVPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string store_key */ 1:
                    message.storeKey = reader.string();
                    break;
                case /* bool delete */ 2:
                    message.delete = reader.bool();
                    break;
                case /* bytes key */ 3:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 4:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoreKVPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string store_key = 1; */
        if (message.storeKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storeKey);
        /* bool delete = 2; */
        if (message.delete !== false)
            writer.tag(2, WireType.Varint).bool(message.delete);
        /* bytes key = 3; */
        if (message.key.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 4; */
        if (message.value.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.StoreKVPair
 */
export const StoreKVPair = new StoreKVPair$Type();
