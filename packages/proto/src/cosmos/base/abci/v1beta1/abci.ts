// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/base/abci/v1beta1/abci.proto" (package "cosmos.base.abci.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Event } from "../../../../tendermint/abci/types";
import { Any } from "../../../../google/protobuf/any";
/**
 * TxResponse defines a structure containing relevant tx data and metadata. The
 * tags are stringified and the log is JSON decoded.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.TxResponse
 */
export interface TxResponse {
    /**
     * The block height
     *
     * @generated from protobuf field: int64 height = 1;
     */
    height: string;
    /**
     * The transaction hash.
     *
     * @generated from protobuf field: string txhash = 2;
     */
    txhash: string;
    /**
     * Namespace for the Code
     *
     * @generated from protobuf field: string codespace = 3;
     */
    codespace: string;
    /**
     * Response code.
     *
     * @generated from protobuf field: uint32 code = 4;
     */
    code: number;
    /**
     * Result bytes, if any.
     *
     * @generated from protobuf field: string data = 5;
     */
    data: string;
    /**
     * The output of the application's logger (raw string). May be
     * non-deterministic.
     *
     * @generated from protobuf field: string raw_log = 6;
     */
    rawLog: string;
    /**
     * The output of the application's logger (typed). May be non-deterministic.
     *
     * @generated from protobuf field: repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7;
     */
    logs: ABCIMessageLog[];
    /**
     * Additional information. May be non-deterministic.
     *
     * @generated from protobuf field: string info = 8;
     */
    info: string;
    /**
     * Amount of gas requested for transaction.
     *
     * @generated from protobuf field: int64 gas_wanted = 9;
     */
    gasWanted: string;
    /**
     * Amount of gas consumed by transaction.
     *
     * @generated from protobuf field: int64 gas_used = 10;
     */
    gasUsed: string;
    /**
     * The request transaction bytes.
     *
     * @generated from protobuf field: google.protobuf.Any tx = 11;
     */
    tx?: Any;
    /**
     * Time of the previous block. For heights > 1, it's the weighted median of
     * the timestamps of the valid votes in the block.LastCommit. For height == 1,
     * it's genesis time.
     *
     * @generated from protobuf field: string timestamp = 12;
     */
    timestamp: string;
    /**
     * Events defines all the events emitted by processing a transaction. Note,
     * these events include those emitted by processing all the messages and those
     * emitted from the ante handler. Whereas Logs contains the events, with
     * additional metadata, emitted only by processing the messages.
     *
     * Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
     *
     * @generated from protobuf field: repeated tendermint.abci.Event events = 13;
     */
    events: Event[];
}
/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.ABCIMessageLog
 */
export interface ABCIMessageLog {
    /**
     * @generated from protobuf field: uint32 msg_index = 1;
     */
    msgIndex: number;
    /**
     * @generated from protobuf field: string log = 2;
     */
    log: string;
    /**
     * Events contains a slice of Event objects that were emitted during some
     * execution.
     *
     * @generated from protobuf field: repeated cosmos.base.abci.v1beta1.StringEvent events = 3;
     */
    events: StringEvent[];
}
/**
 * StringEvent defines en Event object wrapper where all the attributes
 * contain key/value pairs that are strings instead of raw bytes.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.StringEvent
 */
export interface StringEvent {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: repeated cosmos.base.abci.v1beta1.Attribute attributes = 2;
     */
    attributes: Attribute[];
}
/**
 * Attribute defines an attribute wrapper where the key and value are
 * strings instead of raw bytes.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.Attribute
 */
export interface Attribute {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * GasInfo defines tx execution gas context.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.GasInfo
 */
export interface GasInfo {
    /**
     * GasWanted is the maximum units of work we allow this tx to perform.
     *
     * @generated from protobuf field: uint64 gas_wanted = 1;
     */
    gasWanted: string;
    /**
     * GasUsed is the amount of gas actually consumed.
     *
     * @generated from protobuf field: uint64 gas_used = 2;
     */
    gasUsed: string;
}
/**
 * Result is the union of ResponseFormat and ResponseCheckTx.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.Result
 */
export interface Result {
    /**
     * Data is any data returned from message or handler execution. It MUST be
     * length prefixed in order to separate data from multiple message executions.
     *
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * Log contains the log information from message or handler execution.
     *
     * @generated from protobuf field: string log = 2;
     */
    log: string;
    /**
     * Events contains a slice of Event objects that were emitted during message
     * or handler execution.
     *
     * @generated from protobuf field: repeated tendermint.abci.Event events = 3;
     */
    events: Event[];
}
/**
 * SimulationResponse defines the response generated when a transaction is
 * successfully simulated.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.SimulationResponse
 */
export interface SimulationResponse {
    /**
     * @generated from protobuf field: cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
     */
    gasInfo?: GasInfo;
    /**
     * @generated from protobuf field: cosmos.base.abci.v1beta1.Result result = 2;
     */
    result?: Result;
}
/**
 * MsgData defines the data returned in a Result object during message
 * execution.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.MsgData
 */
export interface MsgData {
    /**
     * @generated from protobuf field: string msg_type = 1;
     */
    msgType: string;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
/**
 * TxMsgData defines a list of MsgData. A transaction will have a MsgData object
 * for each message.
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.TxMsgData
 */
export interface TxMsgData {
    /**
     * @generated from protobuf field: repeated cosmos.base.abci.v1beta1.MsgData data = 1;
     */
    data: MsgData[];
}
/**
 * SearchTxsResult defines a structure for querying txs pageable
 *
 * @generated from protobuf message cosmos.base.abci.v1beta1.SearchTxsResult
 */
export interface SearchTxsResult {
    /**
     * Count of all txs
     *
     * @generated from protobuf field: uint64 total_count = 1;
     */
    totalCount: string;
    /**
     * Count of txs in current page
     *
     * @generated from protobuf field: uint64 count = 2;
     */
    count: string;
    /**
     * Index of current page, start from 1
     *
     * @generated from protobuf field: uint64 page_number = 3;
     */
    pageNumber: string;
    /**
     * Count of total pages
     *
     * @generated from protobuf field: uint64 page_total = 4;
     */
    pageTotal: string;
    /**
     * Max count txs per page
     *
     * @generated from protobuf field: uint64 limit = 5;
     */
    limit: string;
    /**
     * List of txs in current page
     *
     * @generated from protobuf field: repeated cosmos.base.abci.v1beta1.TxResponse txs = 6;
     */
    txs: TxResponse[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TxResponse$Type extends MessageType<TxResponse> {
    constructor() {
        super("cosmos.base.abci.v1beta1.TxResponse", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "txhash", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "TxHash" } },
            { no: 3, name: "codespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "raw_log", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "logs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ABCIMessageLog, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "ABCIMessageLogs" } },
            { no: 8, name: "info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "gas_wanted", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 10, name: "gas_used", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 11, name: "tx", kind: "message", T: () => Any },
            { no: 12, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<TxResponse>): TxResponse {
        const message = { height: "0", txhash: "", codespace: "", code: 0, data: "", rawLog: "", logs: [], info: "", gasWanted: "0", gasUsed: "0", timestamp: "", events: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TxResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxResponse): TxResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toString();
                    break;
                case /* string txhash */ 2:
                    message.txhash = reader.string();
                    break;
                case /* string codespace */ 3:
                    message.codespace = reader.string();
                    break;
                case /* uint32 code */ 4:
                    message.code = reader.uint32();
                    break;
                case /* string data */ 5:
                    message.data = reader.string();
                    break;
                case /* string raw_log */ 6:
                    message.rawLog = reader.string();
                    break;
                case /* repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs */ 7:
                    message.logs.push(ABCIMessageLog.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string info */ 8:
                    message.info = reader.string();
                    break;
                case /* int64 gas_wanted */ 9:
                    message.gasWanted = reader.int64().toString();
                    break;
                case /* int64 gas_used */ 10:
                    message.gasUsed = reader.int64().toString();
                    break;
                case /* google.protobuf.Any tx */ 11:
                    message.tx = Any.internalBinaryRead(reader, reader.uint32(), options, message.tx);
                    break;
                case /* string timestamp */ 12:
                    message.timestamp = reader.string();
                    break;
                case /* repeated tendermint.abci.Event events */ 13:
                    message.events.push(Event.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 height = 1; */
        if (message.height !== "0")
            writer.tag(1, WireType.Varint).int64(message.height);
        /* string txhash = 2; */
        if (message.txhash !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.txhash);
        /* string codespace = 3; */
        if (message.codespace !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.codespace);
        /* uint32 code = 4; */
        if (message.code !== 0)
            writer.tag(4, WireType.Varint).uint32(message.code);
        /* string data = 5; */
        if (message.data !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.data);
        /* string raw_log = 6; */
        if (message.rawLog !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.rawLog);
        /* repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7; */
        for (let i = 0; i < message.logs.length; i++)
            ABCIMessageLog.internalBinaryWrite(message.logs[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string info = 8; */
        if (message.info !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.info);
        /* int64 gas_wanted = 9; */
        if (message.gasWanted !== "0")
            writer.tag(9, WireType.Varint).int64(message.gasWanted);
        /* int64 gas_used = 10; */
        if (message.gasUsed !== "0")
            writer.tag(10, WireType.Varint).int64(message.gasUsed);
        /* google.protobuf.Any tx = 11; */
        if (message.tx)
            Any.internalBinaryWrite(message.tx, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string timestamp = 12; */
        if (message.timestamp !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.timestamp);
        /* repeated tendermint.abci.Event events = 13; */
        for (let i = 0; i < message.events.length; i++)
            Event.internalBinaryWrite(message.events[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.TxResponse
 */
export const TxResponse = new TxResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ABCIMessageLog$Type extends MessageType<ABCIMessageLog> {
    constructor() {
        super("cosmos.base.abci.v1beta1.ABCIMessageLog", [
            { no: 1, name: "msg_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "log", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringEvent, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "StringEvents" } }
        ], { "gogoproto.stringer": true });
    }
    create(value?: PartialMessage<ABCIMessageLog>): ABCIMessageLog {
        const message = { msgIndex: 0, log: "", events: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ABCIMessageLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ABCIMessageLog): ABCIMessageLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 msg_index */ 1:
                    message.msgIndex = reader.uint32();
                    break;
                case /* string log */ 2:
                    message.log = reader.string();
                    break;
                case /* repeated cosmos.base.abci.v1beta1.StringEvent events */ 3:
                    message.events.push(StringEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ABCIMessageLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 msg_index = 1; */
        if (message.msgIndex !== 0)
            writer.tag(1, WireType.Varint).uint32(message.msgIndex);
        /* string log = 2; */
        if (message.log !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.log);
        /* repeated cosmos.base.abci.v1beta1.StringEvent events = 3; */
        for (let i = 0; i < message.events.length; i++)
            StringEvent.internalBinaryWrite(message.events[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.ABCIMessageLog
 */
export const ABCIMessageLog = new ABCIMessageLog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringEvent$Type extends MessageType<StringEvent> {
    constructor() {
        super("cosmos.base.abci.v1beta1.StringEvent", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "attributes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attribute, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.stringer": true });
    }
    create(value?: PartialMessage<StringEvent>): StringEvent {
        const message = { type: "", attributes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StringEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringEvent): StringEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* repeated cosmos.base.abci.v1beta1.Attribute attributes */ 2:
                    message.attributes.push(Attribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* repeated cosmos.base.abci.v1beta1.Attribute attributes = 2; */
        for (let i = 0; i < message.attributes.length; i++)
            Attribute.internalBinaryWrite(message.attributes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.StringEvent
 */
export const StringEvent = new StringEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attribute$Type extends MessageType<Attribute> {
    constructor() {
        super("cosmos.base.abci.v1beta1.Attribute", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Attribute>): Attribute {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Attribute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Attribute): Attribute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Attribute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.Attribute
 */
export const Attribute = new Attribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GasInfo$Type extends MessageType<GasInfo> {
    constructor() {
        super("cosmos.base.abci.v1beta1.GasInfo", [
            { no: 1, name: "gas_wanted", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"gas_wanted\"" } },
            { no: 2, name: "gas_used", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"gas_used\"" } }
        ]);
    }
    create(value?: PartialMessage<GasInfo>): GasInfo {
        const message = { gasWanted: "0", gasUsed: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GasInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GasInfo): GasInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 gas_wanted */ 1:
                    message.gasWanted = reader.uint64().toString();
                    break;
                case /* uint64 gas_used */ 2:
                    message.gasUsed = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GasInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 gas_wanted = 1; */
        if (message.gasWanted !== "0")
            writer.tag(1, WireType.Varint).uint64(message.gasWanted);
        /* uint64 gas_used = 2; */
        if (message.gasUsed !== "0")
            writer.tag(2, WireType.Varint).uint64(message.gasUsed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.GasInfo
 */
export const GasInfo = new GasInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Result$Type extends MessageType<Result> {
    constructor() {
        super("cosmos.base.abci.v1beta1.Result", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "log", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<Result>): Result {
        const message = { data: new Uint8Array(0), log: "", events: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Result>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Result): Result {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* string log */ 2:
                    message.log = reader.string();
                    break;
                case /* repeated tendermint.abci.Event events */ 3:
                    message.events.push(Event.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Result, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* string log = 2; */
        if (message.log !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.log);
        /* repeated tendermint.abci.Event events = 3; */
        for (let i = 0; i < message.events.length; i++)
            Event.internalBinaryWrite(message.events[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.Result
 */
export const Result = new Result$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimulationResponse$Type extends MessageType<SimulationResponse> {
    constructor() {
        super("cosmos.base.abci.v1beta1.SimulationResponse", [
            { no: 1, name: "gas_info", kind: "message", T: () => GasInfo, options: { "gogoproto.nullable": false, "gogoproto.embed": true } },
            { no: 2, name: "result", kind: "message", T: () => Result }
        ]);
    }
    create(value?: PartialMessage<SimulationResponse>): SimulationResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimulationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimulationResponse): SimulationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.abci.v1beta1.GasInfo gas_info */ 1:
                    message.gasInfo = GasInfo.internalBinaryRead(reader, reader.uint32(), options, message.gasInfo);
                    break;
                case /* cosmos.base.abci.v1beta1.Result result */ 2:
                    message.result = Result.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimulationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.abci.v1beta1.GasInfo gas_info = 1; */
        if (message.gasInfo)
            GasInfo.internalBinaryWrite(message.gasInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.abci.v1beta1.Result result = 2; */
        if (message.result)
            Result.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.SimulationResponse
 */
export const SimulationResponse = new SimulationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgData$Type extends MessageType<MsgData> {
    constructor() {
        super("cosmos.base.abci.v1beta1.MsgData", [
            { no: 1, name: "msg_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "gogoproto.stringer": true });
    }
    create(value?: PartialMessage<MsgData>): MsgData {
        const message = { msgType: "", data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgData): MsgData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msg_type */ 1:
                    message.msgType = reader.string();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msg_type = 1; */
        if (message.msgType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msgType);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.MsgData
 */
export const MsgData = new MsgData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxMsgData$Type extends MessageType<TxMsgData> {
    constructor() {
        super("cosmos.base.abci.v1beta1.TxMsgData", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MsgData }
        ], { "gogoproto.stringer": true });
    }
    create(value?: PartialMessage<TxMsgData>): TxMsgData {
        const message = { data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TxMsgData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxMsgData): TxMsgData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.abci.v1beta1.MsgData data */ 1:
                    message.data.push(MsgData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxMsgData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.base.abci.v1beta1.MsgData data = 1; */
        for (let i = 0; i < message.data.length; i++)
            MsgData.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.TxMsgData
 */
export const TxMsgData = new TxMsgData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTxsResult$Type extends MessageType<SearchTxsResult> {
    constructor() {
        super("cosmos.base.abci.v1beta1.SearchTxsResult", [
            { no: 1, name: "total_count", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "total_count", "gogoproto.moretags": "yaml:\"total_count\"" } },
            { no: 2, name: "count", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "page_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "page_number", "gogoproto.moretags": "yaml:\"page_number\"" } },
            { no: 4, name: "page_total", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "page_total", "gogoproto.moretags": "yaml:\"page_total\"" } },
            { no: 5, name: "limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "txs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TxResponse }
        ], { "gogoproto.stringer": true });
    }
    create(value?: PartialMessage<SearchTxsResult>): SearchTxsResult {
        const message = { totalCount: "0", count: "0", pageNumber: "0", pageTotal: "0", limit: "0", txs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchTxsResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTxsResult): SearchTxsResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 total_count */ 1:
                    message.totalCount = reader.uint64().toString();
                    break;
                case /* uint64 count */ 2:
                    message.count = reader.uint64().toString();
                    break;
                case /* uint64 page_number */ 3:
                    message.pageNumber = reader.uint64().toString();
                    break;
                case /* uint64 page_total */ 4:
                    message.pageTotal = reader.uint64().toString();
                    break;
                case /* uint64 limit */ 5:
                    message.limit = reader.uint64().toString();
                    break;
                case /* repeated cosmos.base.abci.v1beta1.TxResponse txs */ 6:
                    message.txs.push(TxResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTxsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 total_count = 1; */
        if (message.totalCount !== "0")
            writer.tag(1, WireType.Varint).uint64(message.totalCount);
        /* uint64 count = 2; */
        if (message.count !== "0")
            writer.tag(2, WireType.Varint).uint64(message.count);
        /* uint64 page_number = 3; */
        if (message.pageNumber !== "0")
            writer.tag(3, WireType.Varint).uint64(message.pageNumber);
        /* uint64 page_total = 4; */
        if (message.pageTotal !== "0")
            writer.tag(4, WireType.Varint).uint64(message.pageTotal);
        /* uint64 limit = 5; */
        if (message.limit !== "0")
            writer.tag(5, WireType.Varint).uint64(message.limit);
        /* repeated cosmos.base.abci.v1beta1.TxResponse txs = 6; */
        for (let i = 0; i < message.txs.length; i++)
            TxResponse.internalBinaryWrite(message.txs[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.abci.v1beta1.SearchTxsResult
 */
export const SearchTxsResult = new SearchTxsResult$Type();
