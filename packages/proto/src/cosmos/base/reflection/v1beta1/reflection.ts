// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/base/reflection/v1beta1/reflection.proto" (package "cosmos.base.reflection.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * ListAllInterfacesRequest is the request type of the ListAllInterfaces RPC.
 *
 * @generated from protobuf message cosmos.base.reflection.v1beta1.ListAllInterfacesRequest
 */
export interface ListAllInterfacesRequest {
}
/**
 * ListAllInterfacesResponse is the response type of the ListAllInterfaces RPC.
 *
 * @generated from protobuf message cosmos.base.reflection.v1beta1.ListAllInterfacesResponse
 */
export interface ListAllInterfacesResponse {
    /**
     * interface_names is an array of all the registered interfaces.
     *
     * @generated from protobuf field: repeated string interface_names = 1;
     */
    interfaceNames: string[];
}
/**
 * ListImplementationsRequest is the request type of the ListImplementations
 * RPC.
 *
 * @generated from protobuf message cosmos.base.reflection.v1beta1.ListImplementationsRequest
 */
export interface ListImplementationsRequest {
    /**
     * interface_name defines the interface to query the implementations for.
     *
     * @generated from protobuf field: string interface_name = 1;
     */
    interfaceName: string;
}
/**
 * ListImplementationsResponse is the response type of the ListImplementations
 * RPC.
 *
 * @generated from protobuf message cosmos.base.reflection.v1beta1.ListImplementationsResponse
 */
export interface ListImplementationsResponse {
    /**
     * @generated from protobuf field: repeated string implementation_message_names = 1;
     */
    implementationMessageNames: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListAllInterfacesRequest$Type extends MessageType<ListAllInterfacesRequest> {
    constructor() {
        super("cosmos.base.reflection.v1beta1.ListAllInterfacesRequest", []);
    }
    create(value?: PartialMessage<ListAllInterfacesRequest>): ListAllInterfacesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAllInterfacesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAllInterfacesRequest): ListAllInterfacesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListAllInterfacesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.reflection.v1beta1.ListAllInterfacesRequest
 */
export const ListAllInterfacesRequest = new ListAllInterfacesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAllInterfacesResponse$Type extends MessageType<ListAllInterfacesResponse> {
    constructor() {
        super("cosmos.base.reflection.v1beta1.ListAllInterfacesResponse", [
            { no: 1, name: "interface_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListAllInterfacesResponse>): ListAllInterfacesResponse {
        const message = { interfaceNames: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAllInterfacesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAllInterfacesResponse): ListAllInterfacesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string interface_names */ 1:
                    message.interfaceNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAllInterfacesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string interface_names = 1; */
        for (let i = 0; i < message.interfaceNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.interfaceNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.reflection.v1beta1.ListAllInterfacesResponse
 */
export const ListAllInterfacesResponse = new ListAllInterfacesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListImplementationsRequest$Type extends MessageType<ListImplementationsRequest> {
    constructor() {
        super("cosmos.base.reflection.v1beta1.ListImplementationsRequest", [
            { no: 1, name: "interface_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListImplementationsRequest>): ListImplementationsRequest {
        const message = { interfaceName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListImplementationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListImplementationsRequest): ListImplementationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string interface_name */ 1:
                    message.interfaceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListImplementationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string interface_name = 1; */
        if (message.interfaceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.interfaceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.reflection.v1beta1.ListImplementationsRequest
 */
export const ListImplementationsRequest = new ListImplementationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListImplementationsResponse$Type extends MessageType<ListImplementationsResponse> {
    constructor() {
        super("cosmos.base.reflection.v1beta1.ListImplementationsResponse", [
            { no: 1, name: "implementation_message_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListImplementationsResponse>): ListImplementationsResponse {
        const message = { implementationMessageNames: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListImplementationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListImplementationsResponse): ListImplementationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string implementation_message_names */ 1:
                    message.implementationMessageNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListImplementationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string implementation_message_names = 1; */
        for (let i = 0; i < message.implementationMessageNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.implementationMessageNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.reflection.v1beta1.ListImplementationsResponse
 */
export const ListImplementationsResponse = new ListImplementationsResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.base.reflection.v1beta1.ReflectionService
 */
export const ReflectionService = new ServiceType("cosmos.base.reflection.v1beta1.ReflectionService", [
    { name: "ListAllInterfaces", options: { "google.api.http": { get: "/cosmos/base/reflection/v1beta1/interfaces" } }, I: ListAllInterfacesRequest, O: ListAllInterfacesResponse },
    { name: "ListImplementations", options: { "google.api.http": { get: "/cosmos/base/reflection/v1beta1/interfaces/{interface_name}/implementations" } }, I: ListImplementationsRequest, O: ListImplementationsResponse }
]);
