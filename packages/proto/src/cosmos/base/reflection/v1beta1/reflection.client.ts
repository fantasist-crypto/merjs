// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/base/reflection/v1beta1/reflection.proto" (package "cosmos.base.reflection.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ReflectionService } from "./reflection";
import type { ListImplementationsResponse } from "./reflection";
import type { ListImplementationsRequest } from "./reflection";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListAllInterfacesResponse } from "./reflection";
import type { ListAllInterfacesRequest } from "./reflection";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * ReflectionService defines a service for interface reflection.
 *
 * @generated from protobuf service cosmos.base.reflection.v1beta1.ReflectionService
 */
export interface IReflectionServiceClient {
    /**
     * ListAllInterfaces lists all the interfaces registered in the interface
     * registry.
     *
     * @generated from protobuf rpc: ListAllInterfaces(cosmos.base.reflection.v1beta1.ListAllInterfacesRequest) returns (cosmos.base.reflection.v1beta1.ListAllInterfacesResponse);
     */
    listAllInterfaces(input: ListAllInterfacesRequest, options?: RpcOptions): UnaryCall<ListAllInterfacesRequest, ListAllInterfacesResponse>;
    /**
     * ListImplementations list all the concrete types that implement a given
     * interface.
     *
     * @generated from protobuf rpc: ListImplementations(cosmos.base.reflection.v1beta1.ListImplementationsRequest) returns (cosmos.base.reflection.v1beta1.ListImplementationsResponse);
     */
    listImplementations(input: ListImplementationsRequest, options?: RpcOptions): UnaryCall<ListImplementationsRequest, ListImplementationsResponse>;
}
/**
 * ReflectionService defines a service for interface reflection.
 *
 * @generated from protobuf service cosmos.base.reflection.v1beta1.ReflectionService
 */
export class ReflectionServiceClient implements IReflectionServiceClient, ServiceInfo {
    typeName = ReflectionService.typeName;
    methods = ReflectionService.methods;
    options = ReflectionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * ListAllInterfaces lists all the interfaces registered in the interface
     * registry.
     *
     * @generated from protobuf rpc: ListAllInterfaces(cosmos.base.reflection.v1beta1.ListAllInterfacesRequest) returns (cosmos.base.reflection.v1beta1.ListAllInterfacesResponse);
     */
    listAllInterfaces(input: ListAllInterfacesRequest, options?: RpcOptions): UnaryCall<ListAllInterfacesRequest, ListAllInterfacesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAllInterfacesRequest, ListAllInterfacesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListImplementations list all the concrete types that implement a given
     * interface.
     *
     * @generated from protobuf rpc: ListImplementations(cosmos.base.reflection.v1beta1.ListImplementationsRequest) returns (cosmos.base.reflection.v1beta1.ListImplementationsResponse);
     */
    listImplementations(input: ListImplementationsRequest, options?: RpcOptions): UnaryCall<ListImplementationsRequest, ListImplementationsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListImplementationsRequest, ListImplementationsResponse>("unary", this._transport, method, opt, input);
    }
}
