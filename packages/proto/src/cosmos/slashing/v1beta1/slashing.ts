// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/slashing/v1beta1/slashing.proto" (package "cosmos.slashing.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * ValidatorSigningInfo defines a validator's signing info for monitoring their
 * liveness activity.
 *
 * @generated from protobuf message cosmos.slashing.v1beta1.ValidatorSigningInfo
 */
export interface ValidatorSigningInfo {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * Height at which validator was first a candidate OR was unjailed
     *
     * @generated from protobuf field: int64 start_height = 2;
     */
    startHeight: string;
    /**
     * Index which is incremented each time the validator was a bonded
     * in a block and may have signed a precommit or not. This in conjunction with the
     * `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     *
     * @generated from protobuf field: int64 index_offset = 3;
     */
    indexOffset: string;
    /**
     * Timestamp until which the validator is jailed due to liveness downtime.
     *
     * @generated from protobuf field: google.protobuf.Timestamp jailed_until = 4;
     */
    jailedUntil?: Timestamp;
    /**
     * Whether or not a validator has been tombstoned (killed out of validator set). It is set
     * once the validator commits an equivocation or for any other configured misbehiavor.
     *
     * @generated from protobuf field: bool tombstoned = 5;
     */
    tombstoned: boolean;
    /**
     * A counter kept to avoid unnecessary array reads.
     * Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     *
     * @generated from protobuf field: int64 missed_blocks_counter = 6;
     */
    missedBlocksCounter: string;
}
/**
 * Params represents the parameters used for by the slashing module.
 *
 * @generated from protobuf message cosmos.slashing.v1beta1.Params
 */
export interface Params {
    /**
     * @generated from protobuf field: int64 signed_blocks_window = 1;
     */
    signedBlocksWindow: string;
    /**
     * @generated from protobuf field: bytes min_signed_per_window = 2;
     */
    minSignedPerWindow: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Duration downtime_jail_duration = 3;
     */
    downtimeJailDuration?: Duration;
    /**
     * @generated from protobuf field: bytes slash_fraction_double_sign = 4;
     */
    slashFractionDoubleSign: Uint8Array;
    /**
     * @generated from protobuf field: bytes slash_fraction_downtime = 5;
     */
    slashFractionDowntime: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorSigningInfo$Type extends MessageType<ValidatorSigningInfo> {
    constructor() {
        super("cosmos.slashing.v1beta1.ValidatorSigningInfo", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"start_height\"" } },
            { no: 3, name: "index_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"index_offset\"" } },
            { no: 4, name: "jailed_until", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"jailed_until\"", "gogoproto.stdtime": true } },
            { no: 5, name: "tombstoned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "missed_blocks_counter", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"missed_blocks_counter\"" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<ValidatorSigningInfo>): ValidatorSigningInfo {
        const message = { address: "", startHeight: "0", indexOffset: "0", tombstoned: false, missedBlocksCounter: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidatorSigningInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorSigningInfo): ValidatorSigningInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* int64 start_height */ 2:
                    message.startHeight = reader.int64().toString();
                    break;
                case /* int64 index_offset */ 3:
                    message.indexOffset = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp jailed_until */ 4:
                    message.jailedUntil = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.jailedUntil);
                    break;
                case /* bool tombstoned */ 5:
                    message.tombstoned = reader.bool();
                    break;
                case /* int64 missed_blocks_counter */ 6:
                    message.missedBlocksCounter = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidatorSigningInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* int64 start_height = 2; */
        if (message.startHeight !== "0")
            writer.tag(2, WireType.Varint).int64(message.startHeight);
        /* int64 index_offset = 3; */
        if (message.indexOffset !== "0")
            writer.tag(3, WireType.Varint).int64(message.indexOffset);
        /* google.protobuf.Timestamp jailed_until = 4; */
        if (message.jailedUntil)
            Timestamp.internalBinaryWrite(message.jailedUntil, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool tombstoned = 5; */
        if (message.tombstoned !== false)
            writer.tag(5, WireType.Varint).bool(message.tombstoned);
        /* int64 missed_blocks_counter = 6; */
        if (message.missedBlocksCounter !== "0")
            writer.tag(6, WireType.Varint).int64(message.missedBlocksCounter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.slashing.v1beta1.ValidatorSigningInfo
 */
export const ValidatorSigningInfo = new ValidatorSigningInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
    constructor() {
        super("cosmos.slashing.v1beta1.Params", [
            { no: 1, name: "signed_blocks_window", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"signed_blocks_window\"" } },
            { no: 2, name: "min_signed_per_window", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"min_signed_per_window\"" } },
            { no: 3, name: "downtime_jail_duration", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"downtime_jail_duration\"", "gogoproto.stdduration": true } },
            { no: 4, name: "slash_fraction_double_sign", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"slash_fraction_double_sign\"" } },
            { no: 5, name: "slash_fraction_downtime", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"slash_fraction_downtime\"" } }
        ]);
    }
    create(value?: PartialMessage<Params>): Params {
        const message = { signedBlocksWindow: "0", minSignedPerWindow: new Uint8Array(0), slashFractionDoubleSign: new Uint8Array(0), slashFractionDowntime: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 signed_blocks_window */ 1:
                    message.signedBlocksWindow = reader.int64().toString();
                    break;
                case /* bytes min_signed_per_window */ 2:
                    message.minSignedPerWindow = reader.bytes();
                    break;
                case /* google.protobuf.Duration downtime_jail_duration */ 3:
                    message.downtimeJailDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.downtimeJailDuration);
                    break;
                case /* bytes slash_fraction_double_sign */ 4:
                    message.slashFractionDoubleSign = reader.bytes();
                    break;
                case /* bytes slash_fraction_downtime */ 5:
                    message.slashFractionDowntime = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 signed_blocks_window = 1; */
        if (message.signedBlocksWindow !== "0")
            writer.tag(1, WireType.Varint).int64(message.signedBlocksWindow);
        /* bytes min_signed_per_window = 2; */
        if (message.minSignedPerWindow.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.minSignedPerWindow);
        /* google.protobuf.Duration downtime_jail_duration = 3; */
        if (message.downtimeJailDuration)
            Duration.internalBinaryWrite(message.downtimeJailDuration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes slash_fraction_double_sign = 4; */
        if (message.slashFractionDoubleSign.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.slashFractionDoubleSign);
        /* bytes slash_fraction_downtime = 5; */
        if (message.slashFractionDowntime.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.slashFractionDowntime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.slashing.v1beta1.Params
 */
export const Params = new Params$Type();
