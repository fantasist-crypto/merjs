// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/evidence/v1beta1/query.proto" (package "cosmos.evidence.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { PageRequest } from "../../base/query/v1beta1/pagination";
import { Any } from "../../../google/protobuf/any";
/**
 * QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
 *
 * @generated from protobuf message cosmos.evidence.v1beta1.QueryEvidenceRequest
 */
export interface QueryEvidenceRequest {
    /**
     * evidence_hash defines the hash of the requested evidence.
     *
     * @generated from protobuf field: bytes evidence_hash = 1;
     */
    evidenceHash: Uint8Array;
}
/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 *
 * @generated from protobuf message cosmos.evidence.v1beta1.QueryEvidenceResponse
 */
export interface QueryEvidenceResponse {
    /**
     * evidence returns the requested evidence.
     *
     * @generated from protobuf field: google.protobuf.Any evidence = 1;
     */
    evidence?: Any;
}
/**
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from protobuf message cosmos.evidence.v1beta1.QueryAllEvidenceRequest
 */
export interface QueryAllEvidenceRequest {
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from protobuf message cosmos.evidence.v1beta1.QueryAllEvidenceResponse
 */
export interface QueryAllEvidenceResponse {
    /**
     * evidence returns all evidences.
     *
     * @generated from protobuf field: repeated google.protobuf.Any evidence = 1;
     */
    evidence: Any[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryEvidenceRequest$Type extends MessageType<QueryEvidenceRequest> {
    constructor() {
        super("cosmos.evidence.v1beta1.QueryEvidenceRequest", [
            { no: 1, name: "evidence_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/tendermint/tendermint/libs/bytes.HexBytes" } }
        ]);
    }
    create(value?: PartialMessage<QueryEvidenceRequest>): QueryEvidenceRequest {
        const message = { evidenceHash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryEvidenceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryEvidenceRequest): QueryEvidenceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes evidence_hash */ 1:
                    message.evidenceHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryEvidenceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes evidence_hash = 1; */
        if (message.evidenceHash.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.evidenceHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.evidence.v1beta1.QueryEvidenceRequest
 */
export const QueryEvidenceRequest = new QueryEvidenceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryEvidenceResponse$Type extends MessageType<QueryEvidenceResponse> {
    constructor() {
        super("cosmos.evidence.v1beta1.QueryEvidenceResponse", [
            { no: 1, name: "evidence", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<QueryEvidenceResponse>): QueryEvidenceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryEvidenceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryEvidenceResponse): QueryEvidenceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any evidence */ 1:
                    message.evidence = Any.internalBinaryRead(reader, reader.uint32(), options, message.evidence);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryEvidenceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any evidence = 1; */
        if (message.evidence)
            Any.internalBinaryWrite(message.evidence, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.evidence.v1beta1.QueryEvidenceResponse
 */
export const QueryEvidenceResponse = new QueryEvidenceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllEvidenceRequest$Type extends MessageType<QueryAllEvidenceRequest> {
    constructor() {
        super("cosmos.evidence.v1beta1.QueryAllEvidenceRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryAllEvidenceRequest>): QueryAllEvidenceRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllEvidenceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllEvidenceRequest): QueryAllEvidenceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllEvidenceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.evidence.v1beta1.QueryAllEvidenceRequest
 */
export const QueryAllEvidenceRequest = new QueryAllEvidenceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllEvidenceResponse$Type extends MessageType<QueryAllEvidenceResponse> {
    constructor() {
        super("cosmos.evidence.v1beta1.QueryAllEvidenceResponse", [
            { no: 1, name: "evidence", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryAllEvidenceResponse>): QueryAllEvidenceResponse {
        const message = { evidence: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllEvidenceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllEvidenceResponse): QueryAllEvidenceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Any evidence */ 1:
                    message.evidence.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllEvidenceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Any evidence = 1; */
        for (let i = 0; i < message.evidence.length; i++)
            Any.internalBinaryWrite(message.evidence[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.evidence.v1beta1.QueryAllEvidenceResponse
 */
export const QueryAllEvidenceResponse = new QueryAllEvidenceResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.evidence.v1beta1.Query
 */
export const Query = new ServiceType("cosmos.evidence.v1beta1.Query", [
    { name: "Evidence", options: { "google.api.http": { get: "/cosmos/evidence/v1beta1/evidence/{evidence_hash}" } }, I: QueryEvidenceRequest, O: QueryEvidenceResponse },
    { name: "AllEvidence", options: { "google.api.http": { get: "/cosmos/evidence/v1beta1/evidence" } }, I: QueryAllEvidenceRequest, O: QueryAllEvidenceResponse }
]);
