// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/evidence/v1beta1/tx.proto" (package "cosmos.evidence.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgSubmitEvidenceResponse } from "./tx";
import type { MsgSubmitEvidence } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the evidence Msg service.
 *
 * @generated from protobuf service cosmos.evidence.v1beta1.Msg
 */
export interface IMsgClient {
    /**
     * SubmitEvidence submits an arbitrary Evidence of misbehavior such as equivocation or
     * counterfactual signing.
     *
     * @generated from protobuf rpc: SubmitEvidence(cosmos.evidence.v1beta1.MsgSubmitEvidence) returns (cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse);
     */
    submitEvidence(input: MsgSubmitEvidence, options?: RpcOptions): UnaryCall<MsgSubmitEvidence, MsgSubmitEvidenceResponse>;
}
/**
 * Msg defines the evidence Msg service.
 *
 * @generated from protobuf service cosmos.evidence.v1beta1.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * SubmitEvidence submits an arbitrary Evidence of misbehavior such as equivocation or
     * counterfactual signing.
     *
     * @generated from protobuf rpc: SubmitEvidence(cosmos.evidence.v1beta1.MsgSubmitEvidence) returns (cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse);
     */
    submitEvidence(input: MsgSubmitEvidence, options?: RpcOptions): UnaryCall<MsgSubmitEvidence, MsgSubmitEvidenceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgSubmitEvidence, MsgSubmitEvidenceResponse>("unary", this._transport, method, opt, input);
    }
}
