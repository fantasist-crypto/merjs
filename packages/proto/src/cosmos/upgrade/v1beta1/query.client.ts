// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/upgrade/v1beta1/query.proto" (package "cosmos.upgrade.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryModuleVersionsResponse } from "./query";
import type { QueryModuleVersionsRequest } from "./query";
import type { QueryUpgradedConsensusStateResponse } from "./query";
import type { QueryUpgradedConsensusStateRequest } from "./query";
import type { QueryAppliedPlanResponse } from "./query";
import type { QueryAppliedPlanRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryCurrentPlanResponse } from "./query";
import type { QueryCurrentPlanRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC upgrade querier service.
 *
 * @generated from protobuf service cosmos.upgrade.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * CurrentPlan queries the current upgrade plan.
     *
     * @generated from protobuf rpc: CurrentPlan(cosmos.upgrade.v1beta1.QueryCurrentPlanRequest) returns (cosmos.upgrade.v1beta1.QueryCurrentPlanResponse);
     */
    currentPlan(input: QueryCurrentPlanRequest, options?: RpcOptions): UnaryCall<QueryCurrentPlanRequest, QueryCurrentPlanResponse>;
    /**
     * AppliedPlan queries a previously applied upgrade plan by its name.
     *
     * @generated from protobuf rpc: AppliedPlan(cosmos.upgrade.v1beta1.QueryAppliedPlanRequest) returns (cosmos.upgrade.v1beta1.QueryAppliedPlanResponse);
     */
    appliedPlan(input: QueryAppliedPlanRequest, options?: RpcOptions): UnaryCall<QueryAppliedPlanRequest, QueryAppliedPlanResponse>;
    /**
     * UpgradedConsensusState queries the consensus state that will serve
     * as a trusted kernel for the next version of this chain. It will only be
     * stored at the last height of this chain.
     * UpgradedConsensusState RPC not supported with legacy querier
     * This rpc is deprecated now that IBC has its own replacement
     * (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
     *
     * @deprecated
     * @generated from protobuf rpc: UpgradedConsensusState(cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest) returns (cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse);
     */
    upgradedConsensusState(input: QueryUpgradedConsensusStateRequest, options?: RpcOptions): UnaryCall<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse>;
    /**
     * ModuleVersions queries the list of module versions from state.
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf rpc: ModuleVersions(cosmos.upgrade.v1beta1.QueryModuleVersionsRequest) returns (cosmos.upgrade.v1beta1.QueryModuleVersionsResponse);
     */
    moduleVersions(input: QueryModuleVersionsRequest, options?: RpcOptions): UnaryCall<QueryModuleVersionsRequest, QueryModuleVersionsResponse>;
}
/**
 * Query defines the gRPC upgrade querier service.
 *
 * @generated from protobuf service cosmos.upgrade.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * CurrentPlan queries the current upgrade plan.
     *
     * @generated from protobuf rpc: CurrentPlan(cosmos.upgrade.v1beta1.QueryCurrentPlanRequest) returns (cosmos.upgrade.v1beta1.QueryCurrentPlanResponse);
     */
    currentPlan(input: QueryCurrentPlanRequest, options?: RpcOptions): UnaryCall<QueryCurrentPlanRequest, QueryCurrentPlanResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryCurrentPlanRequest, QueryCurrentPlanResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AppliedPlan queries a previously applied upgrade plan by its name.
     *
     * @generated from protobuf rpc: AppliedPlan(cosmos.upgrade.v1beta1.QueryAppliedPlanRequest) returns (cosmos.upgrade.v1beta1.QueryAppliedPlanResponse);
     */
    appliedPlan(input: QueryAppliedPlanRequest, options?: RpcOptions): UnaryCall<QueryAppliedPlanRequest, QueryAppliedPlanResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAppliedPlanRequest, QueryAppliedPlanResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpgradedConsensusState queries the consensus state that will serve
     * as a trusted kernel for the next version of this chain. It will only be
     * stored at the last height of this chain.
     * UpgradedConsensusState RPC not supported with legacy querier
     * This rpc is deprecated now that IBC has its own replacement
     * (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
     *
     * @deprecated
     * @generated from protobuf rpc: UpgradedConsensusState(cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest) returns (cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse);
     */
    upgradedConsensusState(input: QueryUpgradedConsensusStateRequest, options?: RpcOptions): UnaryCall<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ModuleVersions queries the list of module versions from state.
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf rpc: ModuleVersions(cosmos.upgrade.v1beta1.QueryModuleVersionsRequest) returns (cosmos.upgrade.v1beta1.QueryModuleVersionsResponse);
     */
    moduleVersions(input: QueryModuleVersionsRequest, options?: RpcOptions): UnaryCall<QueryModuleVersionsRequest, QueryModuleVersionsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryModuleVersionsRequest, QueryModuleVersionsResponse>("unary", this._transport, method, opt, input);
    }
}
