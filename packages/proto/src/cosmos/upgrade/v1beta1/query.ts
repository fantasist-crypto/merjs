// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/upgrade/v1beta1/query.proto" (package "cosmos.upgrade.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ModuleVersion } from "./upgrade";
import { Plan } from "./upgrade";
/**
 * QueryCurrentPlanRequest is the request type for the Query/CurrentPlan RPC
 * method.
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryCurrentPlanRequest
 */
export interface QueryCurrentPlanRequest {
}
/**
 * QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
 * method.
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryCurrentPlanResponse
 */
export interface QueryCurrentPlanResponse {
    /**
     * plan is the current upgrade plan.
     *
     * @generated from protobuf field: cosmos.upgrade.v1beta1.Plan plan = 1;
     */
    plan?: Plan;
}
/**
 * QueryCurrentPlanRequest is the request type for the Query/AppliedPlan RPC
 * method.
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryAppliedPlanRequest
 */
export interface QueryAppliedPlanRequest {
    /**
     * name is the name of the applied plan to query for.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
 * method.
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryAppliedPlanResponse
 */
export interface QueryAppliedPlanResponse {
    /**
     * height is the block height at which the plan was applied.
     *
     * @generated from protobuf field: int64 height = 1;
     */
    height: string;
}
/**
 * QueryUpgradedConsensusStateRequest is the request type for the Query/UpgradedConsensusState
 * RPC method.
 *
 * @deprecated
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest
 */
export interface QueryUpgradedConsensusStateRequest {
    /**
     * last height of the current chain must be sent in request
     * as this is the height under which next consensus state is stored
     *
     * @generated from protobuf field: int64 last_height = 1;
     */
    lastHeight: string;
}
/**
 * QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState
 * RPC method.
 *
 * @deprecated
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse
 */
export interface QueryUpgradedConsensusStateResponse {
    /**
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf field: bytes upgraded_consensus_state = 2;
     */
    upgradedConsensusState: Uint8Array;
}
/**
 * QueryModuleVersionsRequest is the request type for the Query/ModuleVersions
 * RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryModuleVersionsRequest
 */
export interface QueryModuleVersionsRequest {
    /**
     * module_name is a field to query a specific module
     * consensus version from state. Leaving this empty will
     * fetch the full list of module versions from state
     *
     * @generated from protobuf field: string module_name = 1;
     */
    moduleName: string;
}
/**
 * QueryModuleVersionsResponse is the response type for the Query/ModuleVersions
 * RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.QueryModuleVersionsResponse
 */
export interface QueryModuleVersionsResponse {
    /**
     * module_versions is a list of module names with their consensus versions.
     *
     * @generated from protobuf field: repeated cosmos.upgrade.v1beta1.ModuleVersion module_versions = 1;
     */
    moduleVersions: ModuleVersion[];
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryCurrentPlanRequest$Type extends MessageType<QueryCurrentPlanRequest> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryCurrentPlanRequest", []);
    }
    create(value?: PartialMessage<QueryCurrentPlanRequest>): QueryCurrentPlanRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCurrentPlanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCurrentPlanRequest): QueryCurrentPlanRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryCurrentPlanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryCurrentPlanRequest
 */
export const QueryCurrentPlanRequest = new QueryCurrentPlanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCurrentPlanResponse$Type extends MessageType<QueryCurrentPlanResponse> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryCurrentPlanResponse", [
            { no: 1, name: "plan", kind: "message", T: () => Plan }
        ]);
    }
    create(value?: PartialMessage<QueryCurrentPlanResponse>): QueryCurrentPlanResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCurrentPlanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCurrentPlanResponse): QueryCurrentPlanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.upgrade.v1beta1.Plan plan */ 1:
                    message.plan = Plan.internalBinaryRead(reader, reader.uint32(), options, message.plan);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCurrentPlanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.upgrade.v1beta1.Plan plan = 1; */
        if (message.plan)
            Plan.internalBinaryWrite(message.plan, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryCurrentPlanResponse
 */
export const QueryCurrentPlanResponse = new QueryCurrentPlanResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAppliedPlanRequest$Type extends MessageType<QueryAppliedPlanRequest> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryAppliedPlanRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryAppliedPlanRequest>): QueryAppliedPlanRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAppliedPlanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAppliedPlanRequest): QueryAppliedPlanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAppliedPlanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryAppliedPlanRequest
 */
export const QueryAppliedPlanRequest = new QueryAppliedPlanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAppliedPlanResponse$Type extends MessageType<QueryAppliedPlanResponse> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryAppliedPlanResponse", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryAppliedPlanResponse>): QueryAppliedPlanResponse {
        const message = { height: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAppliedPlanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAppliedPlanResponse): QueryAppliedPlanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAppliedPlanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 height = 1; */
        if (message.height !== "0")
            writer.tag(1, WireType.Varint).int64(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryAppliedPlanResponse
 */
export const QueryAppliedPlanResponse = new QueryAppliedPlanResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUpgradedConsensusStateRequest$Type extends MessageType<QueryUpgradedConsensusStateRequest> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest", [
            { no: 1, name: "last_height", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<QueryUpgradedConsensusStateRequest>): QueryUpgradedConsensusStateRequest {
        const message = { lastHeight: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryUpgradedConsensusStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUpgradedConsensusStateRequest): QueryUpgradedConsensusStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 last_height */ 1:
                    message.lastHeight = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryUpgradedConsensusStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 last_height = 1; */
        if (message.lastHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.lastHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest
 */
export const QueryUpgradedConsensusStateRequest = new QueryUpgradedConsensusStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUpgradedConsensusStateResponse$Type extends MessageType<QueryUpgradedConsensusStateResponse> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse", [
            { no: 2, name: "upgraded_consensus_state", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<QueryUpgradedConsensusStateResponse>): QueryUpgradedConsensusStateResponse {
        const message = { upgradedConsensusState: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryUpgradedConsensusStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUpgradedConsensusStateResponse): QueryUpgradedConsensusStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes upgraded_consensus_state */ 2:
                    message.upgradedConsensusState = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryUpgradedConsensusStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes upgraded_consensus_state = 2; */
        if (message.upgradedConsensusState.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.upgradedConsensusState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse
 */
export const QueryUpgradedConsensusStateResponse = new QueryUpgradedConsensusStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryModuleVersionsRequest$Type extends MessageType<QueryModuleVersionsRequest> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryModuleVersionsRequest", [
            { no: 1, name: "module_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryModuleVersionsRequest>): QueryModuleVersionsRequest {
        const message = { moduleName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryModuleVersionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryModuleVersionsRequest): QueryModuleVersionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module_name */ 1:
                    message.moduleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryModuleVersionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module_name = 1; */
        if (message.moduleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moduleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryModuleVersionsRequest
 */
export const QueryModuleVersionsRequest = new QueryModuleVersionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryModuleVersionsResponse$Type extends MessageType<QueryModuleVersionsResponse> {
    constructor() {
        super("cosmos.upgrade.v1beta1.QueryModuleVersionsResponse", [
            { no: 1, name: "module_versions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ModuleVersion }
        ]);
    }
    create(value?: PartialMessage<QueryModuleVersionsResponse>): QueryModuleVersionsResponse {
        const message = { moduleVersions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryModuleVersionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryModuleVersionsResponse): QueryModuleVersionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.upgrade.v1beta1.ModuleVersion module_versions */ 1:
                    message.moduleVersions.push(ModuleVersion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryModuleVersionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.upgrade.v1beta1.ModuleVersion module_versions = 1; */
        for (let i = 0; i < message.moduleVersions.length; i++)
            ModuleVersion.internalBinaryWrite(message.moduleVersions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.QueryModuleVersionsResponse
 */
export const QueryModuleVersionsResponse = new QueryModuleVersionsResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.upgrade.v1beta1.Query
 */
export const Query = new ServiceType("cosmos.upgrade.v1beta1.Query", [
    { name: "CurrentPlan", options: { "google.api.http": { get: "/cosmos/upgrade/v1beta1/current_plan" } }, I: QueryCurrentPlanRequest, O: QueryCurrentPlanResponse },
    { name: "AppliedPlan", options: { "google.api.http": { get: "/cosmos/upgrade/v1beta1/applied_plan/{name}" } }, I: QueryAppliedPlanRequest, O: QueryAppliedPlanResponse },
    { name: "UpgradedConsensusState", options: { "google.api.http": { get: "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}" } }, I: QueryUpgradedConsensusStateRequest, O: QueryUpgradedConsensusStateResponse },
    { name: "ModuleVersions", options: { "google.api.http": { get: "/cosmos/upgrade/v1beta1/module_versions" } }, I: QueryModuleVersionsRequest, O: QueryModuleVersionsResponse }
]);
