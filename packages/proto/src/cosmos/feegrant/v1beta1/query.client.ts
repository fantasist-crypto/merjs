// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/feegrant/v1beta1/query.proto" (package "cosmos.feegrant.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryAllowancesResponse } from "./query";
import type { QueryAllowancesRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryAllowanceResponse } from "./query";
import type { QueryAllowanceRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.feegrant.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Allowance returns fee granted to the grantee by the granter.
     *
     * @generated from protobuf rpc: Allowance(cosmos.feegrant.v1beta1.QueryAllowanceRequest) returns (cosmos.feegrant.v1beta1.QueryAllowanceResponse);
     */
    allowance(input: QueryAllowanceRequest, options?: RpcOptions): UnaryCall<QueryAllowanceRequest, QueryAllowanceResponse>;
    /**
     * Allowances returns all the grants for address.
     *
     * @generated from protobuf rpc: Allowances(cosmos.feegrant.v1beta1.QueryAllowancesRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesResponse);
     */
    allowances(input: QueryAllowancesRequest, options?: RpcOptions): UnaryCall<QueryAllowancesRequest, QueryAllowancesResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.feegrant.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Allowance returns fee granted to the grantee by the granter.
     *
     * @generated from protobuf rpc: Allowance(cosmos.feegrant.v1beta1.QueryAllowanceRequest) returns (cosmos.feegrant.v1beta1.QueryAllowanceResponse);
     */
    allowance(input: QueryAllowanceRequest, options?: RpcOptions): UnaryCall<QueryAllowanceRequest, QueryAllowanceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllowanceRequest, QueryAllowanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Allowances returns all the grants for address.
     *
     * @generated from protobuf rpc: Allowances(cosmos.feegrant.v1beta1.QueryAllowancesRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesResponse);
     */
    allowances(input: QueryAllowancesRequest, options?: RpcOptions): UnaryCall<QueryAllowancesRequest, QueryAllowancesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllowancesRequest, QueryAllowancesResponse>("unary", this._transport, method, opt, input);
    }
}
