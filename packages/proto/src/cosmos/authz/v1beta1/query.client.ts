// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/authz/v1beta1/query.proto" (package "cosmos.authz.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryGrantsResponse } from "./query";
import type { QueryGrantsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.authz.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Returns list of `Authorization`, granted to the grantee by the granter.
     *
     * @generated from protobuf rpc: Grants(cosmos.authz.v1beta1.QueryGrantsRequest) returns (cosmos.authz.v1beta1.QueryGrantsResponse);
     */
    grants(input: QueryGrantsRequest, options?: RpcOptions): UnaryCall<QueryGrantsRequest, QueryGrantsResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.authz.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Returns list of `Authorization`, granted to the grantee by the granter.
     *
     * @generated from protobuf rpc: Grants(cosmos.authz.v1beta1.QueryGrantsRequest) returns (cosmos.authz.v1beta1.QueryGrantsResponse);
     */
    grants(input: QueryGrantsRequest, options?: RpcOptions): UnaryCall<QueryGrantsRequest, QueryGrantsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGrantsRequest, QueryGrantsResponse>("unary", this._transport, method, opt, input);
    }
}
