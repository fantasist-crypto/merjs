// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/staking/v1beta1/authz.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
/**
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.staking.v1beta1.StakeAuthorization
 */
export interface StakeAuthorization {
    /**
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     *
     * @generated from protobuf field: cosmos.base.v1beta1.Coin max_tokens = 1;
     */
    maxTokens?: Coin;
    /**
     * @generated from protobuf oneof: validators
     */
    validators: {
        oneofKind: "allowList";
        /**
         * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
         * account.
         *
         * @generated from protobuf field: cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;
         */
        allowList: StakeAuthorization_Validators;
    } | {
        oneofKind: "denyList";
        /**
         * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
         *
         * @generated from protobuf field: cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;
         */
        denyList: StakeAuthorization_Validators;
    } | {
        oneofKind: undefined;
    };
    /**
     * authorization_type defines one of AuthorizationType.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;
     */
    authorizationType: AuthorizationType;
}
/**
 * Validators defines list of validator addresses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.StakeAuthorization.Validators
 */
export interface StakeAuthorization_Validators {
    /**
     * @generated from protobuf field: repeated string address = 1;
     */
    address: string[];
}
/**
 * AuthorizationType defines the type of staking module authorization type
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf enum cosmos.staking.v1beta1.AuthorizationType
 */
export enum AuthorizationType {
    /**
     * AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_DELEGATE = 1;
     */
    DELEGATE = 1,
    /**
     * AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_UNDELEGATE = 2;
     */
    UNDELEGATE = 2,
    /**
     * AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_REDELEGATE = 3;
     */
    REDELEGATE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class StakeAuthorization$Type extends MessageType<StakeAuthorization> {
    constructor() {
        super("cosmos.staking.v1beta1.StakeAuthorization", [
            { no: 1, name: "max_tokens", kind: "message", T: () => Coin, options: { "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coin" } },
            { no: 2, name: "allow_list", kind: "message", oneof: "validators", T: () => StakeAuthorization_Validators },
            { no: 3, name: "deny_list", kind: "message", oneof: "validators", T: () => StakeAuthorization_Validators },
            { no: 4, name: "authorization_type", kind: "enum", T: () => ["cosmos.staking.v1beta1.AuthorizationType", AuthorizationType, "AUTHORIZATION_TYPE_"] }
        ], { "cosmos_proto.implements_interface": "Authorization" });
    }
    create(value?: PartialMessage<StakeAuthorization>): StakeAuthorization {
        const message = { validators: { oneofKind: undefined }, authorizationType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StakeAuthorization>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StakeAuthorization): StakeAuthorization {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.v1beta1.Coin max_tokens */ 1:
                    message.maxTokens = Coin.internalBinaryRead(reader, reader.uint32(), options, message.maxTokens);
                    break;
                case /* cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list */ 2:
                    message.validators = {
                        oneofKind: "allowList",
                        allowList: StakeAuthorization_Validators.internalBinaryRead(reader, reader.uint32(), options, (message.validators as any).allowList)
                    };
                    break;
                case /* cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list */ 3:
                    message.validators = {
                        oneofKind: "denyList",
                        denyList: StakeAuthorization_Validators.internalBinaryRead(reader, reader.uint32(), options, (message.validators as any).denyList)
                    };
                    break;
                case /* cosmos.staking.v1beta1.AuthorizationType authorization_type */ 4:
                    message.authorizationType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StakeAuthorization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.v1beta1.Coin max_tokens = 1; */
        if (message.maxTokens)
            Coin.internalBinaryWrite(message.maxTokens, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2; */
        if (message.validators.oneofKind === "allowList")
            StakeAuthorization_Validators.internalBinaryWrite(message.validators.allowList, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3; */
        if (message.validators.oneofKind === "denyList")
            StakeAuthorization_Validators.internalBinaryWrite(message.validators.denyList, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.staking.v1beta1.AuthorizationType authorization_type = 4; */
        if (message.authorizationType !== 0)
            writer.tag(4, WireType.Varint).int32(message.authorizationType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.StakeAuthorization
 */
export const StakeAuthorization = new StakeAuthorization$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StakeAuthorization_Validators$Type extends MessageType<StakeAuthorization_Validators> {
    constructor() {
        super("cosmos.staking.v1beta1.StakeAuthorization.Validators", [
            { no: 1, name: "address", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StakeAuthorization_Validators>): StakeAuthorization_Validators {
        const message = { address: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StakeAuthorization_Validators>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StakeAuthorization_Validators): StakeAuthorization_Validators {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string address */ 1:
                    message.address.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StakeAuthorization_Validators, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string address = 1; */
        for (let i = 0; i < message.address.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.address[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.StakeAuthorization.Validators
 */
export const StakeAuthorization_Validators = new StakeAuthorization_Validators$Type();
