// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/staking/v1beta1/staking.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
import { Any } from "../../../google/protobuf/any";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Header } from "../../../tendermint/types/types";
/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 *
 * @generated from protobuf message cosmos.staking.v1beta1.HistoricalInfo
 */
export interface HistoricalInfo {
    /**
     * @generated from protobuf field: tendermint.types.Header header = 1;
     */
    header?: Header;
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.Validator valset = 2;
     */
    valset: Validator[];
}
/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.CommissionRates
 */
export interface CommissionRates {
    /**
     * rate is the commission rate charged to delegators, as a fraction.
     *
     * @generated from protobuf field: string rate = 1;
     */
    rate: string;
    /**
     * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
     *
     * @generated from protobuf field: string max_rate = 2;
     */
    maxRate: string;
    /**
     * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
     *
     * @generated from protobuf field: string max_change_rate = 3;
     */
    maxChangeRate: string;
}
/**
 * Commission defines commission parameters for a given validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Commission
 */
export interface Commission {
    /**
     * commission_rates defines the initial commission rates to be used for creating a validator.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.CommissionRates commission_rates = 1;
     */
    commissionRates?: CommissionRates;
    /**
     * update_time is the last time the commission rate was changed.
     *
     * @generated from protobuf field: google.protobuf.Timestamp update_time = 2;
     */
    updateTime?: Timestamp;
}
/**
 * Description defines a validator description.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Description
 */
export interface Description {
    /**
     * moniker defines a human-readable name for the validator.
     *
     * @generated from protobuf field: string moniker = 1;
     */
    moniker: string;
    /**
     * identity defines an optional identity signature (ex. UPort or Keybase).
     *
     * @generated from protobuf field: string identity = 2;
     */
    identity: string;
    /**
     * website defines an optional website link.
     *
     * @generated from protobuf field: string website = 3;
     */
    website: string;
    /**
     * security_contact defines an optional email for security contact.
     *
     * @generated from protobuf field: string security_contact = 4;
     */
    securityContact: string;
    /**
     * details define other optional details.
     *
     * @generated from protobuf field: string details = 5;
     */
    details: string;
}
/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Validator
 */
export interface Validator {
    /**
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     *
     * @generated from protobuf field: string operator_address = 1;
     */
    operatorAddress: string;
    /**
     * consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
     *
     * @generated from protobuf field: google.protobuf.Any consensus_pubkey = 2;
     */
    consensusPubkey?: Any;
    /**
     * jailed defined whether the validator has been jailed from bonded status or not.
     *
     * @generated from protobuf field: bool jailed = 3;
     */
    jailed: boolean;
    /**
     * status is the validator status (bonded/unbonding/unbonded).
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.BondStatus status = 4;
     */
    status: BondStatus;
    /**
     * tokens define the delegated tokens (incl. self-delegation).
     *
     * @generated from protobuf field: string tokens = 5;
     */
    tokens: string;
    /**
     * delegator_shares defines total shares issued to a validator's delegators.
     *
     * @generated from protobuf field: string delegator_shares = 6;
     */
    delegatorShares: string;
    /**
     * description defines the description terms for the validator.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.Description description = 7;
     */
    description?: Description;
    /**
     * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
     *
     * @generated from protobuf field: int64 unbonding_height = 8;
     */
    unbondingHeight: string;
    /**
     * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
     *
     * @generated from protobuf field: google.protobuf.Timestamp unbonding_time = 9;
     */
    unbondingTime?: Timestamp;
    /**
     * commission defines the commission parameters.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.Commission commission = 10;
     */
    commission?: Commission;
    /**
     * min_self_delegation is the validator's self declared minimum self delegation.
     *
     * @generated from protobuf field: string min_self_delegation = 11;
     */
    minSelfDelegation: string;
}
/**
 * ValAddresses defines a repeated set of validator addresses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.ValAddresses
 */
export interface ValAddresses {
    /**
     * @generated from protobuf field: repeated string addresses = 1;
     */
    addresses: string[];
}
/**
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVPair
 */
export interface DVPair {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
}
/**
 * DVPairs defines an array of DVPair objects.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVPairs
 */
export interface DVPairs {
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.DVPair pairs = 1;
     */
    pairs: DVPair[];
}
/**
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVVTriplet
 */
export interface DVVTriplet {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * @generated from protobuf field: string validator_src_address = 2;
     */
    validatorSrcAddress: string;
    /**
     * @generated from protobuf field: string validator_dst_address = 3;
     */
    validatorDstAddress: string;
}
/**
 * DVVTriplets defines an array of DVVTriplet objects.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVVTriplets
 */
export interface DVVTriplets {
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.DVVTriplet triplets = 1;
     */
    triplets: DVVTriplet[];
}
/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Delegation
 */
export interface Delegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     *
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
    /**
     * shares define the delegation shares received.
     *
     * @generated from protobuf field: string shares = 3;
     */
    shares: string;
}
/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.UnbondingDelegation
 */
export interface UnbondingDelegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     *
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
    /**
     * entries are the unbonding delegation entries.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3;
     */
    entries: UnbondingDelegationEntry[]; // unbonding delegation entries
}
/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export interface UnbondingDelegationEntry {
    /**
     * creation_height is the height which the unbonding took place.
     *
     * @generated from protobuf field: int64 creation_height = 1;
     */
    creationHeight: string;
    /**
     * completion_time is the unix time for unbonding completion.
     *
     * @generated from protobuf field: google.protobuf.Timestamp completion_time = 2;
     */
    completionTime?: Timestamp;
    /**
     * initial_balance defines the tokens initially scheduled to receive at completion.
     *
     * @generated from protobuf field: string initial_balance = 3;
     */
    initialBalance: string;
    /**
     * balance defines the tokens to receive at completion.
     *
     * @generated from protobuf field: string balance = 4;
     */
    balance: string;
}
/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.RedelegationEntry
 */
export interface RedelegationEntry {
    /**
     * creation_height  defines the height which the redelegation took place.
     *
     * @generated from protobuf field: int64 creation_height = 1;
     */
    creationHeight: string;
    /**
     * completion_time defines the unix time for redelegation completion.
     *
     * @generated from protobuf field: google.protobuf.Timestamp completion_time = 2;
     */
    completionTime?: Timestamp;
    /**
     * initial_balance defines the initial balance when redelegation started.
     *
     * @generated from protobuf field: string initial_balance = 3;
     */
    initialBalance: string;
    /**
     * shares_dst is the amount of destination-validator shares created by redelegation.
     *
     * @generated from protobuf field: string shares_dst = 4;
     */
    sharesDst: string;
}
/**
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Redelegation
 */
export interface Redelegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * validator_src_address is the validator redelegation source operator address.
     *
     * @generated from protobuf field: string validator_src_address = 2;
     */
    validatorSrcAddress: string;
    /**
     * validator_dst_address is the validator redelegation destination operator address.
     *
     * @generated from protobuf field: string validator_dst_address = 3;
     */
    validatorDstAddress: string;
    /**
     * entries are the redelegation entries.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.RedelegationEntry entries = 4;
     */
    entries: RedelegationEntry[]; // redelegation entries
}
/**
 * Params defines the parameters for the staking module.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Params
 */
export interface Params {
    /**
     * unbonding_time is the time duration of unbonding.
     *
     * @generated from protobuf field: google.protobuf.Duration unbonding_time = 1;
     */
    unbondingTime?: Duration;
    /**
     * max_validators is the maximum number of validators.
     *
     * @generated from protobuf field: uint32 max_validators = 2;
     */
    maxValidators: number;
    /**
     * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
     *
     * @generated from protobuf field: uint32 max_entries = 3;
     */
    maxEntries: number;
    /**
     * historical_entries is the number of historical entries to persist.
     *
     * @generated from protobuf field: uint32 historical_entries = 4;
     */
    historicalEntries: number;
    /**
     * bond_denom defines the bondable coin denomination.
     *
     * @generated from protobuf field: string bond_denom = 5;
     */
    bondDenom: string;
}
/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DelegationResponse
 */
export interface DelegationResponse {
    /**
     * @generated from protobuf field: cosmos.staking.v1beta1.Delegation delegation = 1;
     */
    delegation?: Delegation;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin balance = 2;
     */
    balance?: Coin;
}
/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export interface RedelegationEntryResponse {
    /**
     * @generated from protobuf field: cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1;
     */
    redelegationEntry?: RedelegationEntry;
    /**
     * @generated from protobuf field: string balance = 4;
     */
    balance: string;
}
/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.RedelegationResponse
 */
export interface RedelegationResponse {
    /**
     * @generated from protobuf field: cosmos.staking.v1beta1.Redelegation redelegation = 1;
     */
    redelegation?: Redelegation;
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2;
     */
    entries: RedelegationEntryResponse[];
}
/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Pool
 */
export interface Pool {
    /**
     * @generated from protobuf field: string not_bonded_tokens = 1;
     */
    notBondedTokens: string;
    /**
     * @generated from protobuf field: string bonded_tokens = 2;
     */
    bondedTokens: string;
}
/**
 * BondStatus is the status of a validator.
 *
 * @generated from protobuf enum cosmos.staking.v1beta1.BondStatus
 */
export enum BondStatus {
    /**
     * UNSPECIFIED defines an invalid validator status.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * UNBONDED defines a validator that is not bonded.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNBONDED = 1;
     */
    UNBONDED = 1,
    /**
     * UNBONDING defines a validator that is unbonding.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNBONDING = 2;
     */
    UNBONDING = 2,
    /**
     * BONDED defines a validator that is bonded.
     *
     * @generated from protobuf enum value: BOND_STATUS_BONDED = 3;
     */
    BONDED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class HistoricalInfo$Type extends MessageType<HistoricalInfo> {
    constructor() {
        super("cosmos.staking.v1beta1.HistoricalInfo", [
            { no: 1, name: "header", kind: "message", T: () => Header, options: { "gogoproto.nullable": false } },
            { no: 2, name: "valset", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<HistoricalInfo>): HistoricalInfo {
        const message = { valset: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HistoricalInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoricalInfo): HistoricalInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.Header header */ 1:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated cosmos.staking.v1beta1.Validator valset */ 2:
                    message.valset.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoricalInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tendermint.types.Header header = 1; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.Validator valset = 2; */
        for (let i = 0; i < message.valset.length; i++)
            Validator.internalBinaryWrite(message.valset[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.HistoricalInfo
 */
export const HistoricalInfo = new HistoricalInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommissionRates$Type extends MessageType<CommissionRates> {
    constructor() {
        super("cosmos.staking.v1beta1.CommissionRates", [
            { no: 1, name: "rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } },
            { no: 2, name: "max_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"max_rate\"" } },
            { no: 3, name: "max_change_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"max_change_rate\"" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<CommissionRates>): CommissionRates {
        const message = { rate: "", maxRate: "", maxChangeRate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommissionRates>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommissionRates): CommissionRates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rate */ 1:
                    message.rate = reader.string();
                    break;
                case /* string max_rate */ 2:
                    message.maxRate = reader.string();
                    break;
                case /* string max_change_rate */ 3:
                    message.maxChangeRate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommissionRates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rate = 1; */
        if (message.rate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rate);
        /* string max_rate = 2; */
        if (message.maxRate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.maxRate);
        /* string max_change_rate = 3; */
        if (message.maxChangeRate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.maxChangeRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.CommissionRates
 */
export const CommissionRates = new CommissionRates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Commission$Type extends MessageType<Commission> {
    constructor() {
        super("cosmos.staking.v1beta1.Commission", [
            { no: 1, name: "commission_rates", kind: "message", T: () => CommissionRates, options: { "gogoproto.nullable": false, "gogoproto.embed": true } },
            { no: 2, name: "update_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"update_time\"", "gogoproto.stdtime": true } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<Commission>): Commission {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Commission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Commission): Commission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.CommissionRates commission_rates */ 1:
                    message.commissionRates = CommissionRates.internalBinaryRead(reader, reader.uint32(), options, message.commissionRates);
                    break;
                case /* google.protobuf.Timestamp update_time */ 2:
                    message.updateTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updateTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Commission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.staking.v1beta1.CommissionRates commission_rates = 1; */
        if (message.commissionRates)
            CommissionRates.internalBinaryWrite(message.commissionRates, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp update_time = 2; */
        if (message.updateTime)
            Timestamp.internalBinaryWrite(message.updateTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Commission
 */
export const Commission = new Commission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Description$Type extends MessageType<Description> {
    constructor() {
        super("cosmos.staking.v1beta1.Description", [
            { no: 1, name: "moniker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "identity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "website", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "security_contact", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"security_contact\"" } },
            { no: 5, name: "details", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<Description>): Description {
        const message = { moniker: "", identity: "", website: "", securityContact: "", details: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Description>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Description): Description {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string moniker */ 1:
                    message.moniker = reader.string();
                    break;
                case /* string identity */ 2:
                    message.identity = reader.string();
                    break;
                case /* string website */ 3:
                    message.website = reader.string();
                    break;
                case /* string security_contact */ 4:
                    message.securityContact = reader.string();
                    break;
                case /* string details */ 5:
                    message.details = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Description, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string moniker = 1; */
        if (message.moniker !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moniker);
        /* string identity = 2; */
        if (message.identity !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.identity);
        /* string website = 3; */
        if (message.website !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.website);
        /* string security_contact = 4; */
        if (message.securityContact !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.securityContact);
        /* string details = 5; */
        if (message.details !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.details);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Description
 */
export const Description = new Description$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Validator$Type extends MessageType<Validator> {
    constructor() {
        super("cosmos.staking.v1beta1.Validator", [
            { no: 1, name: "operator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"operator_address\"" } },
            { no: 2, name: "consensus_pubkey", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"consensus_pubkey\"", "cosmos_proto.accepts_interface": "cosmos.crypto.PubKey" } },
            { no: 3, name: "jailed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["cosmos.staking.v1beta1.BondStatus", BondStatus, "BOND_STATUS_"] },
            { no: 5, name: "tokens", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 6, name: "delegator_shares", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"delegator_shares\"" } },
            { no: 7, name: "description", kind: "message", T: () => Description, options: { "gogoproto.nullable": false } },
            { no: 8, name: "unbonding_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"unbonding_height\"" } },
            { no: 9, name: "unbonding_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"unbonding_time\"", "gogoproto.stdtime": true } },
            { no: 10, name: "commission", kind: "message", T: () => Commission, options: { "gogoproto.nullable": false } },
            { no: 11, name: "min_self_delegation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"min_self_delegation\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<Validator>): Validator {
        const message = { operatorAddress: "", jailed: false, status: 0, tokens: "", delegatorShares: "", unbondingHeight: "0", minSelfDelegation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Validator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Validator): Validator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string operator_address */ 1:
                    message.operatorAddress = reader.string();
                    break;
                case /* google.protobuf.Any consensus_pubkey */ 2:
                    message.consensusPubkey = Any.internalBinaryRead(reader, reader.uint32(), options, message.consensusPubkey);
                    break;
                case /* bool jailed */ 3:
                    message.jailed = reader.bool();
                    break;
                case /* cosmos.staking.v1beta1.BondStatus status */ 4:
                    message.status = reader.int32();
                    break;
                case /* string tokens */ 5:
                    message.tokens = reader.string();
                    break;
                case /* string delegator_shares */ 6:
                    message.delegatorShares = reader.string();
                    break;
                case /* cosmos.staking.v1beta1.Description description */ 7:
                    message.description = Description.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* int64 unbonding_height */ 8:
                    message.unbondingHeight = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp unbonding_time */ 9:
                    message.unbondingTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.unbondingTime);
                    break;
                case /* cosmos.staking.v1beta1.Commission commission */ 10:
                    message.commission = Commission.internalBinaryRead(reader, reader.uint32(), options, message.commission);
                    break;
                case /* string min_self_delegation */ 11:
                    message.minSelfDelegation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Validator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string operator_address = 1; */
        if (message.operatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.operatorAddress);
        /* google.protobuf.Any consensus_pubkey = 2; */
        if (message.consensusPubkey)
            Any.internalBinaryWrite(message.consensusPubkey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool jailed = 3; */
        if (message.jailed !== false)
            writer.tag(3, WireType.Varint).bool(message.jailed);
        /* cosmos.staking.v1beta1.BondStatus status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* string tokens = 5; */
        if (message.tokens !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tokens);
        /* string delegator_shares = 6; */
        if (message.delegatorShares !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.delegatorShares);
        /* cosmos.staking.v1beta1.Description description = 7; */
        if (message.description)
            Description.internalBinaryWrite(message.description, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 unbonding_height = 8; */
        if (message.unbondingHeight !== "0")
            writer.tag(8, WireType.Varint).int64(message.unbondingHeight);
        /* google.protobuf.Timestamp unbonding_time = 9; */
        if (message.unbondingTime)
            Timestamp.internalBinaryWrite(message.unbondingTime, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.staking.v1beta1.Commission commission = 10; */
        if (message.commission)
            Commission.internalBinaryWrite(message.commission, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string min_self_delegation = 11; */
        if (message.minSelfDelegation !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.minSelfDelegation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Validator
 */
export const Validator = new Validator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValAddresses$Type extends MessageType<ValAddresses> {
    constructor() {
        super("cosmos.staking.v1beta1.ValAddresses", [
            { no: 1, name: "addresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.stringer": true });
    }
    create(value?: PartialMessage<ValAddresses>): ValAddresses {
        const message = { addresses: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValAddresses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValAddresses): ValAddresses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string addresses */ 1:
                    message.addresses.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValAddresses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string addresses = 1; */
        for (let i = 0; i < message.addresses.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.addresses[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.ValAddresses
 */
export const ValAddresses = new ValAddresses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVPair$Type extends MessageType<DVPair> {
    constructor() {
        super("cosmos.staking.v1beta1.DVPair", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<DVPair>): DVPair {
        const message = { delegatorAddress: "", validatorAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DVPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVPair): DVPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DVPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVPair
 */
export const DVPair = new DVPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVPairs$Type extends MessageType<DVPairs> {
    constructor() {
        super("cosmos.staking.v1beta1.DVPairs", [
            { no: 1, name: "pairs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DVPair, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<DVPairs>): DVPairs {
        const message = { pairs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DVPairs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVPairs): DVPairs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.DVPair pairs */ 1:
                    message.pairs.push(DVPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DVPairs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.staking.v1beta1.DVPair pairs = 1; */
        for (let i = 0; i < message.pairs.length; i++)
            DVPair.internalBinaryWrite(message.pairs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVPairs
 */
export const DVPairs = new DVPairs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVVTriplet$Type extends MessageType<DVVTriplet> {
    constructor() {
        super("cosmos.staking.v1beta1.DVVTriplet", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_src_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_src_address\"" } },
            { no: 3, name: "validator_dst_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_dst_address\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<DVVTriplet>): DVVTriplet {
        const message = { delegatorAddress: "", validatorSrcAddress: "", validatorDstAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DVVTriplet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVVTriplet): DVVTriplet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_src_address */ 2:
                    message.validatorSrcAddress = reader.string();
                    break;
                case /* string validator_dst_address */ 3:
                    message.validatorDstAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DVVTriplet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_src_address = 2; */
        if (message.validatorSrcAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorSrcAddress);
        /* string validator_dst_address = 3; */
        if (message.validatorDstAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.validatorDstAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVVTriplet
 */
export const DVVTriplet = new DVVTriplet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVVTriplets$Type extends MessageType<DVVTriplets> {
    constructor() {
        super("cosmos.staking.v1beta1.DVVTriplets", [
            { no: 1, name: "triplets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DVVTriplet, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<DVVTriplets>): DVVTriplets {
        const message = { triplets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DVVTriplets>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVVTriplets): DVVTriplets {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.DVVTriplet triplets */ 1:
                    message.triplets.push(DVVTriplet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DVVTriplets, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.staking.v1beta1.DVVTriplet triplets = 1; */
        for (let i = 0; i < message.triplets.length; i++)
            DVVTriplet.internalBinaryWrite(message.triplets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVVTriplets
 */
export const DVVTriplets = new DVVTriplets$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Delegation$Type extends MessageType<Delegation> {
    constructor() {
        super("cosmos.staking.v1beta1.Delegation", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 3, name: "shares", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<Delegation>): Delegation {
        const message = { delegatorAddress: "", validatorAddress: "", shares: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Delegation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Delegation): Delegation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                case /* string shares */ 3:
                    message.shares = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Delegation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        /* string shares = 3; */
        if (message.shares !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shares);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Delegation
 */
export const Delegation = new Delegation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnbondingDelegation$Type extends MessageType<UnbondingDelegation> {
    constructor() {
        super("cosmos.staking.v1beta1.UnbondingDelegation", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 3, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnbondingDelegationEntry, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<UnbondingDelegation>): UnbondingDelegation {
        const message = { delegatorAddress: "", validatorAddress: "", entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnbondingDelegation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnbondingDelegation): UnbondingDelegation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                case /* repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries */ 3:
                    message.entries.push(UnbondingDelegationEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnbondingDelegation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        /* repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3; */
        for (let i = 0; i < message.entries.length; i++)
            UnbondingDelegationEntry.internalBinaryWrite(message.entries[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.UnbondingDelegation
 */
export const UnbondingDelegation = new UnbondingDelegation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnbondingDelegationEntry$Type extends MessageType<UnbondingDelegationEntry> {
    constructor() {
        super("cosmos.staking.v1beta1.UnbondingDelegationEntry", [
            { no: 1, name: "creation_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"creation_height\"" } },
            { no: 2, name: "completion_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"completion_time\"", "gogoproto.stdtime": true } },
            { no: 3, name: "initial_balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"initial_balance\"" } },
            { no: 4, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<UnbondingDelegationEntry>): UnbondingDelegationEntry {
        const message = { creationHeight: "0", initialBalance: "", balance: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnbondingDelegationEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnbondingDelegationEntry): UnbondingDelegationEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 creation_height */ 1:
                    message.creationHeight = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp completion_time */ 2:
                    message.completionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completionTime);
                    break;
                case /* string initial_balance */ 3:
                    message.initialBalance = reader.string();
                    break;
                case /* string balance */ 4:
                    message.balance = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnbondingDelegationEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 creation_height = 1; */
        if (message.creationHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.creationHeight);
        /* google.protobuf.Timestamp completion_time = 2; */
        if (message.completionTime)
            Timestamp.internalBinaryWrite(message.completionTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string initial_balance = 3; */
        if (message.initialBalance !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.initialBalance);
        /* string balance = 4; */
        if (message.balance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.balance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export const UnbondingDelegationEntry = new UnbondingDelegationEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedelegationEntry$Type extends MessageType<RedelegationEntry> {
    constructor() {
        super("cosmos.staking.v1beta1.RedelegationEntry", [
            { no: 1, name: "creation_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"creation_height\"" } },
            { no: 2, name: "completion_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"completion_time\"", "gogoproto.stdtime": true } },
            { no: 3, name: "initial_balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"initial_balance\"" } },
            { no: 4, name: "shares_dst", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<RedelegationEntry>): RedelegationEntry {
        const message = { creationHeight: "0", initialBalance: "", sharesDst: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedelegationEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedelegationEntry): RedelegationEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 creation_height */ 1:
                    message.creationHeight = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp completion_time */ 2:
                    message.completionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completionTime);
                    break;
                case /* string initial_balance */ 3:
                    message.initialBalance = reader.string();
                    break;
                case /* string shares_dst */ 4:
                    message.sharesDst = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedelegationEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 creation_height = 1; */
        if (message.creationHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.creationHeight);
        /* google.protobuf.Timestamp completion_time = 2; */
        if (message.completionTime)
            Timestamp.internalBinaryWrite(message.completionTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string initial_balance = 3; */
        if (message.initialBalance !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.initialBalance);
        /* string shares_dst = 4; */
        if (message.sharesDst !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sharesDst);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationEntry
 */
export const RedelegationEntry = new RedelegationEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Redelegation$Type extends MessageType<Redelegation> {
    constructor() {
        super("cosmos.staking.v1beta1.Redelegation", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_src_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_src_address\"" } },
            { no: 3, name: "validator_dst_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_dst_address\"" } },
            { no: 4, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedelegationEntry, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<Redelegation>): Redelegation {
        const message = { delegatorAddress: "", validatorSrcAddress: "", validatorDstAddress: "", entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Redelegation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Redelegation): Redelegation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_src_address */ 2:
                    message.validatorSrcAddress = reader.string();
                    break;
                case /* string validator_dst_address */ 3:
                    message.validatorDstAddress = reader.string();
                    break;
                case /* repeated cosmos.staking.v1beta1.RedelegationEntry entries */ 4:
                    message.entries.push(RedelegationEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Redelegation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_src_address = 2; */
        if (message.validatorSrcAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorSrcAddress);
        /* string validator_dst_address = 3; */
        if (message.validatorDstAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.validatorDstAddress);
        /* repeated cosmos.staking.v1beta1.RedelegationEntry entries = 4; */
        for (let i = 0; i < message.entries.length; i++)
            RedelegationEntry.internalBinaryWrite(message.entries[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Redelegation
 */
export const Redelegation = new Redelegation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
    constructor() {
        super("cosmos.staking.v1beta1.Params", [
            { no: 1, name: "unbonding_time", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"unbonding_time\"", "gogoproto.stdduration": true } },
            { no: 2, name: "max_validators", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.moretags": "yaml:\"max_validators\"" } },
            { no: 3, name: "max_entries", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.moretags": "yaml:\"max_entries\"" } },
            { no: 4, name: "historical_entries", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.moretags": "yaml:\"historical_entries\"" } },
            { no: 5, name: "bond_denom", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"bond_denom\"" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<Params>): Params {
        const message = { maxValidators: 0, maxEntries: 0, historicalEntries: 0, bondDenom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration unbonding_time */ 1:
                    message.unbondingTime = Duration.internalBinaryRead(reader, reader.uint32(), options, message.unbondingTime);
                    break;
                case /* uint32 max_validators */ 2:
                    message.maxValidators = reader.uint32();
                    break;
                case /* uint32 max_entries */ 3:
                    message.maxEntries = reader.uint32();
                    break;
                case /* uint32 historical_entries */ 4:
                    message.historicalEntries = reader.uint32();
                    break;
                case /* string bond_denom */ 5:
                    message.bondDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration unbonding_time = 1; */
        if (message.unbondingTime)
            Duration.internalBinaryWrite(message.unbondingTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 max_validators = 2; */
        if (message.maxValidators !== 0)
            writer.tag(2, WireType.Varint).uint32(message.maxValidators);
        /* uint32 max_entries = 3; */
        if (message.maxEntries !== 0)
            writer.tag(3, WireType.Varint).uint32(message.maxEntries);
        /* uint32 historical_entries = 4; */
        if (message.historicalEntries !== 0)
            writer.tag(4, WireType.Varint).uint32(message.historicalEntries);
        /* string bond_denom = 5; */
        if (message.bondDenom !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bondDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Params
 */
export const Params = new Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationResponse$Type extends MessageType<DelegationResponse> {
    constructor() {
        super("cosmos.staking.v1beta1.DelegationResponse", [
            { no: 1, name: "delegation", kind: "message", T: () => Delegation, options: { "gogoproto.nullable": false } },
            { no: 2, name: "balance", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<DelegationResponse>): DelegationResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DelegationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelegationResponse): DelegationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Delegation delegation */ 1:
                    message.delegation = Delegation.internalBinaryRead(reader, reader.uint32(), options, message.delegation);
                    break;
                case /* cosmos.base.v1beta1.Coin balance */ 2:
                    message.balance = Coin.internalBinaryRead(reader, reader.uint32(), options, message.balance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DelegationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.staking.v1beta1.Delegation delegation = 1; */
        if (message.delegation)
            Delegation.internalBinaryWrite(message.delegation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.v1beta1.Coin balance = 2; */
        if (message.balance)
            Coin.internalBinaryWrite(message.balance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DelegationResponse
 */
export const DelegationResponse = new DelegationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedelegationEntryResponse$Type extends MessageType<RedelegationEntryResponse> {
    constructor() {
        super("cosmos.staking.v1beta1.RedelegationEntryResponse", [
            { no: 1, name: "redelegation_entry", kind: "message", T: () => RedelegationEntry, options: { "gogoproto.nullable": false } },
            { no: 4, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ], { "gogoproto.equal": true });
    }
    create(value?: PartialMessage<RedelegationEntryResponse>): RedelegationEntryResponse {
        const message = { balance: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedelegationEntryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedelegationEntryResponse): RedelegationEntryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.RedelegationEntry redelegation_entry */ 1:
                    message.redelegationEntry = RedelegationEntry.internalBinaryRead(reader, reader.uint32(), options, message.redelegationEntry);
                    break;
                case /* string balance */ 4:
                    message.balance = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedelegationEntryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1; */
        if (message.redelegationEntry)
            RedelegationEntry.internalBinaryWrite(message.redelegationEntry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string balance = 4; */
        if (message.balance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.balance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export const RedelegationEntryResponse = new RedelegationEntryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedelegationResponse$Type extends MessageType<RedelegationResponse> {
    constructor() {
        super("cosmos.staking.v1beta1.RedelegationResponse", [
            { no: 1, name: "redelegation", kind: "message", T: () => Redelegation, options: { "gogoproto.nullable": false } },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedelegationEntryResponse, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.equal": false });
    }
    create(value?: PartialMessage<RedelegationResponse>): RedelegationResponse {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedelegationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedelegationResponse): RedelegationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Redelegation redelegation */ 1:
                    message.redelegation = Redelegation.internalBinaryRead(reader, reader.uint32(), options, message.redelegation);
                    break;
                case /* repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries */ 2:
                    message.entries.push(RedelegationEntryResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedelegationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.staking.v1beta1.Redelegation redelegation = 1; */
        if (message.redelegation)
            Redelegation.internalBinaryWrite(message.redelegation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            RedelegationEntryResponse.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationResponse
 */
export const RedelegationResponse = new RedelegationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pool$Type extends MessageType<Pool> {
    constructor() {
        super("cosmos.staking.v1beta1.Pool", [
            { no: 1, name: "not_bonded_tokens", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.jsontag": "not_bonded_tokens" } },
            { no: 2, name: "bonded_tokens", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.jsontag": "bonded_tokens", "gogoproto.moretags": "yaml:\"bonded_tokens\"" } }
        ], { "gogoproto.equal": true, "gogoproto.description": true });
    }
    create(value?: PartialMessage<Pool>): Pool {
        const message = { notBondedTokens: "", bondedTokens: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Pool>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pool): Pool {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string not_bonded_tokens */ 1:
                    message.notBondedTokens = reader.string();
                    break;
                case /* string bonded_tokens */ 2:
                    message.bondedTokens = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string not_bonded_tokens = 1; */
        if (message.notBondedTokens !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notBondedTokens);
        /* string bonded_tokens = 2; */
        if (message.bondedTokens !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bondedTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Pool
 */
export const Pool = new Pool$Type();
