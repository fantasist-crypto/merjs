// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/mint/v1beta1/query.proto" (package "cosmos.mint.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./mint";
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from protobuf message cosmos.mint.v1beta1.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from protobuf message cosmos.mint.v1beta1.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params defines the parameters of the module.
     *
     * @generated from protobuf field: cosmos.mint.v1beta1.Params params = 1;
     */
    params?: Params;
}
/**
 * QueryInflationRequest is the request type for the Query/Inflation RPC method.
 *
 * @generated from protobuf message cosmos.mint.v1beta1.QueryInflationRequest
 */
export interface QueryInflationRequest {
}
/**
 * QueryInflationResponse is the response type for the Query/Inflation RPC
 * method.
 *
 * @generated from protobuf message cosmos.mint.v1beta1.QueryInflationResponse
 */
export interface QueryInflationResponse {
    /**
     * inflation is the current minting inflation value.
     *
     * @generated from protobuf field: bytes inflation = 1;
     */
    inflation: Uint8Array;
}
/**
 * QueryAnnualProvisionsRequest is the request type for the
 * Query/AnnualProvisions RPC method.
 *
 * @generated from protobuf message cosmos.mint.v1beta1.QueryAnnualProvisionsRequest
 */
export interface QueryAnnualProvisionsRequest {
}
/**
 * QueryAnnualProvisionsResponse is the response type for the
 * Query/AnnualProvisions RPC method.
 *
 * @generated from protobuf message cosmos.mint.v1beta1.QueryAnnualProvisionsResponse
 */
export interface QueryAnnualProvisionsResponse {
    /**
     * annual_provisions is the current minting annual provisions value.
     *
     * @generated from protobuf field: bytes annual_provisions = 1;
     */
    annualProvisions: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("cosmos.mint.v1beta1.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.mint.v1beta1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("cosmos.mint.v1beta1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.mint.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.mint.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.mint.v1beta1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryInflationRequest$Type extends MessageType<QueryInflationRequest> {
    constructor() {
        super("cosmos.mint.v1beta1.QueryInflationRequest", []);
    }
    create(value?: PartialMessage<QueryInflationRequest>): QueryInflationRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryInflationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryInflationRequest): QueryInflationRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryInflationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.mint.v1beta1.QueryInflationRequest
 */
export const QueryInflationRequest = new QueryInflationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryInflationResponse$Type extends MessageType<QueryInflationResponse> {
    constructor() {
        super("cosmos.mint.v1beta1.QueryInflationResponse", [
            { no: 1, name: "inflation", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ]);
    }
    create(value?: PartialMessage<QueryInflationResponse>): QueryInflationResponse {
        const message = { inflation: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryInflationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryInflationResponse): QueryInflationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes inflation */ 1:
                    message.inflation = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryInflationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes inflation = 1; */
        if (message.inflation.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.inflation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.mint.v1beta1.QueryInflationResponse
 */
export const QueryInflationResponse = new QueryInflationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAnnualProvisionsRequest$Type extends MessageType<QueryAnnualProvisionsRequest> {
    constructor() {
        super("cosmos.mint.v1beta1.QueryAnnualProvisionsRequest", []);
    }
    create(value?: PartialMessage<QueryAnnualProvisionsRequest>): QueryAnnualProvisionsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAnnualProvisionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAnnualProvisionsRequest): QueryAnnualProvisionsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryAnnualProvisionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.mint.v1beta1.QueryAnnualProvisionsRequest
 */
export const QueryAnnualProvisionsRequest = new QueryAnnualProvisionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAnnualProvisionsResponse$Type extends MessageType<QueryAnnualProvisionsResponse> {
    constructor() {
        super("cosmos.mint.v1beta1.QueryAnnualProvisionsResponse", [
            { no: 1, name: "annual_provisions", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ]);
    }
    create(value?: PartialMessage<QueryAnnualProvisionsResponse>): QueryAnnualProvisionsResponse {
        const message = { annualProvisions: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAnnualProvisionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAnnualProvisionsResponse): QueryAnnualProvisionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes annual_provisions */ 1:
                    message.annualProvisions = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAnnualProvisionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes annual_provisions = 1; */
        if (message.annualProvisions.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.annualProvisions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.mint.v1beta1.QueryAnnualProvisionsResponse
 */
export const QueryAnnualProvisionsResponse = new QueryAnnualProvisionsResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.mint.v1beta1.Query
 */
export const Query = new ServiceType("cosmos.mint.v1beta1.Query", [
    { name: "Params", options: { "google.api.http": { get: "/cosmos/mint/v1beta1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "Inflation", options: { "google.api.http": { get: "/cosmos/mint/v1beta1/inflation" } }, I: QueryInflationRequest, O: QueryInflationResponse },
    { name: "AnnualProvisions", options: { "google.api.http": { get: "/cosmos/mint/v1beta1/annual_provisions" } }, I: QueryAnnualProvisionsRequest, O: QueryAnnualProvisionsResponse }
]);
