// @generated by protobuf-ts 2.6.0 with parameter long_type_string
// @generated from protobuf file "cosmos/mint/v1beta1/query.proto" (package "cosmos.mint.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryAnnualProvisionsResponse } from "./query";
import type { QueryAnnualProvisionsRequest } from "./query";
import type { QueryInflationResponse } from "./query";
import type { QueryInflationRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query provides defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.mint.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Params returns the total set of minting parameters.
     *
     * @generated from protobuf rpc: Params(cosmos.mint.v1beta1.QueryParamsRequest) returns (cosmos.mint.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * Inflation returns the current minting inflation value.
     *
     * @generated from protobuf rpc: Inflation(cosmos.mint.v1beta1.QueryInflationRequest) returns (cosmos.mint.v1beta1.QueryInflationResponse);
     */
    inflation(input: QueryInflationRequest, options?: RpcOptions): UnaryCall<QueryInflationRequest, QueryInflationResponse>;
    /**
     * AnnualProvisions current minting annual provisions value.
     *
     * @generated from protobuf rpc: AnnualProvisions(cosmos.mint.v1beta1.QueryAnnualProvisionsRequest) returns (cosmos.mint.v1beta1.QueryAnnualProvisionsResponse);
     */
    annualProvisions(input: QueryAnnualProvisionsRequest, options?: RpcOptions): UnaryCall<QueryAnnualProvisionsRequest, QueryAnnualProvisionsResponse>;
}
/**
 * Query provides defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.mint.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Params returns the total set of minting parameters.
     *
     * @generated from protobuf rpc: Params(cosmos.mint.v1beta1.QueryParamsRequest) returns (cosmos.mint.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Inflation returns the current minting inflation value.
     *
     * @generated from protobuf rpc: Inflation(cosmos.mint.v1beta1.QueryInflationRequest) returns (cosmos.mint.v1beta1.QueryInflationResponse);
     */
    inflation(input: QueryInflationRequest, options?: RpcOptions): UnaryCall<QueryInflationRequest, QueryInflationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryInflationRequest, QueryInflationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AnnualProvisions current minting annual provisions value.
     *
     * @generated from protobuf rpc: AnnualProvisions(cosmos.mint.v1beta1.QueryAnnualProvisionsRequest) returns (cosmos.mint.v1beta1.QueryAnnualProvisionsResponse);
     */
    annualProvisions(input: QueryAnnualProvisionsRequest, options?: RpcOptions): UnaryCall<QueryAnnualProvisionsRequest, QueryAnnualProvisionsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAnnualProvisionsRequest, QueryAnnualProvisionsResponse>("unary", this._transport, method, opt, input);
    }
}
